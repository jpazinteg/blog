<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Japan Azure Integration Support Blog</title>
  
  <subtitle>日本マイクロソフトの Azure Integration に関するサポート情報のブログです。</subtitle>
  <link href="https://jpazinteg.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jpazinteg.github.io/blog/"/>
  <updated>2023-05-11T07:23:23.618Z</updated>
  <id>https://jpazinteg.github.io/blog/</id>
  
  <author>
    <name>Japan Azure Integration Support Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Standard Logic Apps のワークフローを API 操作でキャンセルする</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/</id>
    <published>2023-05-02T07:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.618Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。</p><p>まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP">Workflow Runs - Cancel</a></li></ul><p>しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。<br>そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Standard Logic Apps の実行中のワークフローを REST API でキャンセルしたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><h2 id="キャンセル処理の-API-の確認方法"><a href="#キャンセル処理の-API-の確認方法" class="headerlink" title="キャンセル処理の API の確認方法"></a>キャンセル処理の API の確認方法</h2><p>まず、先にもご案内しました通り、Standard Logic Apps のワークフローの処理をキャンセルする API については公開情報はございません。<br>その為、今回の記事では以下のリソース プロバイダーに対してキャンセル処理の API を直接実行することで、ワークフローのキャンセル処理を実装致します。</p><ul><li><a href="https://learn.microsoft.com/en-US/azure/templates/microsoft.web/sites/hostruntime/webhooks/api/workflows/runs?pivots=deployment-language-arm-template">Microsoft.Web sites/hostruntime/webhooks/api/workflows/runs</a></li></ul><p>実際にどのような方法で設定するかにつきましてですが、こちらブラウザの開発者ツールにて GUI 操作時のリクエストを解析することで確認可能でございます。<br>確認方法につきまして、以下に参考例を記載いたします。</p><p>＜確認方法＞</p><ol><li><p>ブラウザを起動し、開発者ツール (F12) を実行します。本例では chromium 版 Edge を利用しております。</p></li><li><p> 実際に実行中のワークフローを [実行の取り消し] ボタンでキャンセルいたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image001.png"> </p></li><li><p>実際のリクエストとして “cancel?api-version=2018-11-01” の実行結果が出力されますので、こちらのヘッダに記載されている要求 URL を確認します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image002.png"> </p></li></ol><p>以上より、以下のような API が実行されていることを確認出来ます。</p><p>＜実際に実行されている API＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://management.azure.com/subscriptions/&#123;SubscriptionId&#125;/resourceGroups/&#123;ResourceGroupName&#125;/providers/Microsoft.Web/sites/&#123;LogicAppsName&#125;/hostruntime/runtime/webhooks/workflow/api/management/workflows/&#123;WorkFlowName&#125;/runs/&#123;RunId&#125;/cancel?api-version=2018-11-01</span><br></pre></td></tr></table></figure><p>・SubscriptionId：Standard Logic Apps の存在するサブスクリプション ID<br>・ResourceGroupName：Standard Logic Apps の存在するリソース グループ名<br>・LogicAppsName：Standard Logic Apps 名<br>・WorkFlowName：Standard Logic Apps 内に作成した ワークフロー名<br>・RunId：実行 ID</p><p>なお、こちらの API の内容については 2023/05/01 現在の内容となります。<br>今後将来的に予告なく内容が変更される場合がございますので予めご了承下さい。</p><p>これらを基に、以下の通りキャンセル処理の設定例を記載いたします。</p><h2 id="設定例と実行結果"><a href="#設定例と実行結果" class="headerlink" title="設定例と実行結果"></a>設定例と実行結果</h2><p>本例では、マネージド ID を有効にした従量課金タイプの Logic Apps より、上記 API を実行して処理のキャンセルを実装いたします。<br>まず、Standard Logic Apps とは別で従量課金タイプの Logic Apps を用意し、事前にマネージド ID を有効に致します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image003.png"> </p><p>次に、そのまま同一画面上の [Azure ロールの割り当て] ボタンを選択し、マネージド ID に “Web サイト共同作成者” ロールを付与します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image004.png"> </p><p><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image005.png"> </p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/role-based-access-control/built-in-roles#website-contributor">Azure 組み込みロール # Website Contributor</a></li></ul><p>次に、従量課金タイプのワークフローにて、HTTP アクションを設定いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-http">Azure Logic Apps から HTTP または HTTPS でサービス エンドポイントを呼び出す</a></li></ul><p>以下の通りパラメーターを指定し、認証方法にマネージド ID を指定いたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image006.png"><br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image007.png"> </p><p>以上の設定より、マネージド ID を基にリクエストを行うことで API を実行し、実行中のワークフローの処理をキャンセルすることが可能でございます。</p><p>＜実行例＞<br>・Standard Logic Apps にてワークフロー実行中。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image008.png"> </p><p>・従量課金タイプよりワークフローを実行。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image009.png"> </p><p>・結果<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image010.png"> </p><p>以上より、API 操作を基に Standard Logic Apps のワークフローの実行をキャンセルすることが可能でございます。<br>なお、先にも申しました通り、こちら公開情報がございませんことと、2023/05/01 現在の情報となりますので、今後内容が変更される可能性が十分にございます。<br>お手数をおかけして申し訳ございませんが、上記を踏まえまして、お客様にて十分に検証を実施いただいたうえで採用要否についてご検討をいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。&lt;/p&gt;
&lt;p&gt;まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP&quot;&gt;Workflow Runs - Cancel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。&lt;br&gt;そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps の送信 IP アドレスについて</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/outboundIpaddress/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/outboundIpaddress/</id>
    <published>2023-04-24T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.638Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps の送信 IP アドレスについて説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps の送信 IP アドレスの情報を用いて、アクセス制限を行いたい方</li></ul><h2 id="Logic-Apps-のコネクタの種類"><a href="#Logic-Apps-のコネクタの種類" class="headerlink" title="Logic Apps のコネクタの種類"></a>Logic Apps のコネクタの種類</h2><p>Logic Apps では、組み込みのトリガーおよびアクションと、マネージド コネクタの大きく 2 種類があります。<br>それによって送信 IP アドレスが異なりますので、まずはコネクタの種類について説明いたします。</p><h3 id="組み込みのトリガーおよびアクション"><a href="#組み込みのトリガーおよびアクション" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p>トリガーおよびアクション追加時に、「ビルトイン」タブに表示されるものになります。<br><strong>&lt;従量課金タイプ&gt;</strong><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress01.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-in-consumption-versus-standard">Azure Logic Apps の組み込みコネクタ # 従量課金と Standard の組み込みコネクタの比較</a></li></ul><h3 id="マネージド-コネクタ"><a href="#マネージド-コネクタ" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプでは、トリガーおよびアクション追加時に「標準」タブおよび「エンタープライズ」タブに表示されるものになります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress03.jpg"><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress04.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard タイプでは、「Azure」タブに表示されるものになります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/managed">Azure Logic Apps のマネージド コネクタ</a></li></ul><h2 id="送信-IP-アドレス"><a href="#送信-IP-アドレス" class="headerlink" title="送信 IP アドレス"></a>送信 IP アドレス</h2><h3 id="組み込みのトリガーおよびアクション-1"><a href="#組み込みのトリガーおよびアクション-1" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプの Logic Apps において「HTTP」アクションのような組み込みアクションで利用されます送信 IP アドレスは、<br>以下の公開情報の該当リージョンのものとなります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#multi-tenant---outbound-ip-addresses">Azure Logic Apps の制約と構成の参考文献 # マルチテナント - 送信 IP アドレス</a></li></ul><p>たとえば、東日本リージョンに Logic Apps を配置されている場合、以下が対象となります。<br>ファイアウォール等で受信ルールをご設定いただいている場合には、該当リージョンのすべての IP アドレスを許可いただく必要がございます。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress06.jpg"></p><p>また、こちらの IP アドレスは、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] の「ランタイム発信 IP アドレス」が該当いたします。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress07.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard タイプの Logic Apps におきましては、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] にて、「追加の送信 IP アドレス」が該当いたします。<br>※ 「送信 IP アドレス」は、「追加の送信 IP アドレス」に含まれております。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress08.jpg"></p><h3 id="マネージド-コネクタ-1"><a href="#マネージド-コネクタ-1" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p>マネージド コネクタは、従量課金タイプの Logic Apps でも Standard タイプの Logic Apps でも送信 IP アドレスは共通しております。<br>以下の公開情報の該当リージョンのものとなります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><p>たとえば、東日本リージョンに Logic Apps を配置されている場合、以下が対象となります。<br>ファイアウォール等で受信ルールをご設定いただいている場合には、該当リージョンのすべての IP アドレスを許可いただく必要がございます。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress09.jpg"></p><p>従量課金タイプの場合、こちらの IP アドレスは、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] の「コネクタ発信 IP アドレス」が該当いたします。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress10.jpg"></p><h2 id="サービス-タグ"><a href="#サービス-タグ" class="headerlink" title="サービス タグ"></a>サービス タグ</h2><p>Azure 上の VNet 等の一部の製品では、サービス タグをご利用いただくことが可能でございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/virtual-network/service-tags-overview">仮想ネットワーク サービス タグ</a></li></ul><p>Logic Apps に関連するサービス タグは以下になります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress11.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#firewall-ip-configuration-considerations">Azure Logic Apps の制約と構成の参考文献 # ファイアウォールの IP 構成に関する考慮事項</a></li></ul><h3 id="組み込みのトリガーおよびアクション-2"><a href="#組み込みのトリガーおよびアクション-2" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p>従量課金タイプの場合は、サービス タグは「<strong>LogicApps</strong>」になります。<br>※ Standard タイプでは、サービス タグのご用意がございません。</p><h3 id="マネージド-コネクタ-2"><a href="#マネージド-コネクタ-2" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p>マネージド コネクタの場合は、従量課金タイプ、Standard タイプ問わず、サービス タグは「<strong>AzureConnectors</strong>」になります。<br>「<strong>AzureConnectors.リージョン</strong>」とすることで、特定のリージョンのものを指定することが可能です。</p><h2 id="IP-アドレスの変更"><a href="#IP-アドレスの変更" class="headerlink" title="IP アドレスの変更"></a>IP アドレスの変更</h2><p>以下に記載の送信 IP アドレスは、過去に変更された事例がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#multi-tenant---outbound-ip-addresses">Azure Logic Apps の制約と構成の参考文献 # マルチテナント - 送信 IP アドレス</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><p>Azure のサブスクリプション管理者宛てにメールでの通知、およびサービス正常性での通知が行われましたので、<br>変更時には IP アドレスの設定の見直しをお願いいたします。<br>※ サービス タグをご利用の場合には、ご変更いただく必要はございません。</p><p>ご参考までに過去のアナウンスのスケジュールにつきましてご案内いたします。</p><p>・メールでのアナウンス：2020/7/16<br>・変更実施：2020/8/31<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress12.jpg"></p><p>・メールでのアナウンス：2022/3/26<br>・変更実施：2022/5/15<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress13.jpg"></p><h2 id="サービス正常性アラートの設定"><a href="#サービス正常性アラートの設定" class="headerlink" title="サービス正常性アラートの設定"></a>サービス正常性アラートの設定</h2><p>正常性アラートからメールで通知する方法がございます。</p><ol><li>[Azure ポータル] - [サービス正常性] - [アラート - 正常性アラート] - [+ サービス正常性アラートの追加] を選択します。</li><li>以下の項目を設定します。<br>[条件 - アラートの対象] - [サブスクリプション] : 対象のサブスクリプションを選択します。<br>[条件 - アラートの対象] - [サービス] : Logic Apps<br>[条件 - アラートの対象] - [リージョン] : Logic Apps をご利用頂いておりますリージョンを選択します。 [全体] を選択することも可能です。<br>[条件 - アラートの対象] - [Service Health の基準] : 全てにチェック入れます。<br>[アクション - アクショングループ名] : [アクショングループの追加] を選択し、メール通知を含むアクショングループを追加します。<br>[アラートルールに詳細 - アラートルール名] : 任意のアラートルール名を入力します。<br>[アラートルールの作成] を選択します。<br>アクショングループのご利用手順につきましては、以下の公開情報でご確認頂けます。</li></ol><ul><li>参考ドキュメント : <a href="https://docs.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups">Azure Portal でのアクション グループの作成および管理</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps の送信 IP アドレスについて説明いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps の送信 IP アドレスについて説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Ip address" scheme="https://jpazinteg.github.io/blog/tags/Ip-address/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で AAD 認証する方法について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/AadAuthentication/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/AadAuthentication/</id>
    <published>2023-03-30T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.526Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>Standard Logic Apps （シングルテナント） をご利用のお客様も多いかと思いますが、App Service や Azure Functions と異なり、Standard Logic Apps では Azure Portal から AAD 認証の設定が出来ません。</p><p><img src="/blog/LogicApps/AadAuthentication/image000.png"></p><p>今回は、REST API を用いて Standard Logic Apps でも AAD 認証 (EasyAuth) を行う方法をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>事前準備・前提</li><li>Azure Active Directory へのアプリ登録</li><li>トークン取得</li><li>Resource Explorer にて authsettingsV2 の更新</li><li>AAD 認証による Standard Logic Apps の実行</li><li>まとめ</li></ul><h2 id="事前準備・前提"><a href="#事前準備・前提" class="headerlink" title="事前準備・前提"></a>事前準備・前提</h2><p>今回の記事については以下の情報を参考にしております。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/trigger-workflows-in-standard-logic-apps-with-easy-auth/ba-p/3207378">Trigger workflows in Standard logic apps with Easy Auth</a></li></ul><p>なお、本記事における REST API の実行方法については <a href="https://www.postman.com/downloads/">postman</a> を利用してリクエストを送信します。そのため、Postman のインストール設定を事前に実施いただくことが前提の記事となります。<br>authsettingsV2 の更新については、<a href="https://resources.azure.com/">Resource Explorer</a> を利用して更新いたします。</p><p>＜参考情報＞<br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/configure-authentication-file-based">Azure App Service 認証でのファイルベースの構成</a></p><p>途中でトークンのデコードを行う手順がございますが、 <a href="https://jwt.io/">jwt.io</a> （もしくは <a href="https://jwt.ms/">jwt.ms</a> ） というサイトで行います。</p><p>以上を基に、本記事では認証手順を記載いたします。</p><h2 id="Azure-Active-Directory-へのアプリ登録"><a href="#Azure-Active-Directory-へのアプリ登録" class="headerlink" title="Azure Active Directory へのアプリ登録"></a>Azure Active Directory へのアプリ登録</h2><p>始めに、トークンを取得する為にお客様がご利用いただいている Azure Active Directory に対して “アプリの登録” を行います。<br>なお、トークンの取得方法については複数ございますため、お客様にとって容易な方法でご対応いただければと存じます。</p><p>＜アプリの登録手順＞<br>１．Azure Portal より Azure Active Directory を選択し、[アプリの登録] を選択。<br><img src="/blog/LogicApps/AadAuthentication/image001.png"></p><p>２．以下の内容で登録。<br>・名前 = 任意の値<br>・サポートされているアカウントの種類 = “この組織ディレクトリのみに含まれるアカウント (Microsoft のみ - シングル テナント)</p><p>以降変更なし。<br><img src="/blog/LogicApps/AadAuthentication/image002.png"></p><p>アプリの登録が出来ましたら、[概要] より以下の内容を控えていただきます。</p><p><img src="/blog/LogicApps/AadAuthentication/image003.png"></p><p>＜控える項目＞<br>・アプリケーション (クライアント) ID<br>・オブジェクト ID<br>・ディレクトリ (テナント) ID</p><p>次に、[証明書とシークレット] のメニューより、[新しいクライアント シークレット] を作成いただきます。<br>こちらについては有効期限はお客様の要件によって任意の値を設定下さいますようお願いいたします。<br>ここで表示されるクライアントシークレットの値は一度しか表示されませんので、確実にこの作成したタイミングで控えていただきますようお願いいたします。</p><p><img src="/blog/LogicApps/AadAuthentication/image004.png"></p><p>＜控える項目＞<br>・値</p><p>次に、[管理] - [API の公開] のメニューより、[アプリケーション ID の URI] の 設定ボタンを選択します。</p><p><img src="/blog/LogicApps/AadAuthentication/image017.png"></p><p>“api://“ から始まるアプリケーション ID の URI が払い出されますので、保存ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image018.png"></p><p>このタイミングで、”アプリケーション ID の URI” の値を控えておきます。<br><img src="/blog/LogicApps/AadAuthentication/image01802.png"></p><p>＜控える項目＞<br>・アプリケーション ID の URI </p><p>最後に、[管理] - [マニフェスト] より、”accessTokenAcceptedVersion” の値を “2” に設定後、保存ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image01801.png"></p><p>Azure Active Directory へのアプリ登録の方法については以上となります。次の手順で、認証に利用するトークンの情報を取得致します。</p><h2 id="トークン取得"><a href="#トークン取得" class="headerlink" title="トークン取得"></a>トークン取得</h2><p>続いて、AAD 認証に必要な REST API を設定いたします。まず、先に記載しました Postman を起動し、トークンを取得します。<br><img src="/blog/LogicApps/AadAuthentication/image019.png"></p><p>・POSTメソッド<br><a href="https://login.microsoftonline.com/%7B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA(%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88)ID%7D/oauth2/v2.0/token">https://login.microsoftonline.com/{ディレクトリ(テナント)ID}/oauth2/v2.0/token</a><br><img src="/blog/LogicApps/AadAuthentication/image020.png"></p><p>Body には [x-www-from-urlencoded] を指定し、以下の内容を設定します。</p><p><img src="/blog/LogicApps/AadAuthentication/image021.png"><br>client_id = AAD に登録したアプリの [アプリケーション (クライアント) ID] を指定<br>scope = {アプリケーション ID の URI}/.default<br>client_secret = クライアントシークレットの [値]<br>grant_type = client_credentials</p><p>それ以外のパラメーターは特に設定不要でございます。</p><p>以上の設定が設定出来ましたら、画面右上の [Send] ボタンを選択し、リクエストを送信します。<br><img src="/blog/LogicApps/AadAuthentication/image022.png"></p><p>リクエストが成功すると、Body の中にトークンの値が表示されますので、 “access_token” を全て控えていただきます。</p><p>＜控える項目＞<br>・access_token<br><img src="/blog/LogicApps/AadAuthentication/image023.png"></p><p>続いて、取得した “access_token” をデコードし、oid を取得することと、aud の値と作成したアプリの client_id を比較いたします。</p><p><a href="https://jwt.io/">jwt.io</a></p><p><img src="/blog/LogicApps/AadAuthentication/image00701.png"></p><p>ブラウザで上記サイトを開いたら以下の [Encoded] に先ほどコピーした “access_token” を全て貼り付けます。<br><img src="/blog/LogicApps/AadAuthentication/image024.png"></p><p>画面右側の [Decoded] - [PAYLOAD] の以下の値を値を控えていただきます。<br><img src="/blog/LogicApps/AadAuthentication/image025.png"></p><p>＜控える項目＞<br>・oid</p><p>ここで、aud の値と作成したアプリの client_id (アプリケーション (クライアント) ID) が同じものであることを確認します。</p><p>トークン取得の作業としては以上となりますが、”access_token” , “aud” および “oid” については後続の手順で利用しますので、そのまま残していただきますようお願いいたします。<br>なお、こちらのトークンにつきましては、通常 1 ~ 1.5 h の有効期限がございます。そのため、トークン発行後、有効期限が切れるたびに再取得する必要があることをご留意願います。</p><h2 id="Resource-Explorer-にて-authsettingsV2-の更新"><a href="#Resource-Explorer-にて-authsettingsV2-の更新" class="headerlink" title="Resource Explorer にて authsettingsV2 の更新"></a>Resource Explorer にて authsettingsV2 の更新</h2><p>続いて、authsettingsV2 API を呼び出します。こちらは Standard Logic Apps に対して AAD 認証を行うための事前処理を行うものでございます。<br>こちらの手順では Resource Explorer を用いてリクエストを送信いたします。</p><p>初めに、以下の URL より Resource Explorer を起動いたします。<br><a href="https://resources.azure.com/">Resource Explorer</a>　</p><p>検索ボックスに今回 AAD 認証で起動したい Standard Logic Apps のリソース名を入力し、リソースプロバイダが “Microsoft.Web/sites” となっているものを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image026.png"></p><p>対象のリソースが確認出来ましたら、[config] - [authsettingsV2] を選択いたします。<br><img src="/blog/LogicApps/AadAuthentication/image027.png"></p><p>表示されている画面にて authsettingsV2 の REST API を実行することが可能ですので、画面上部の “Read/Write” より編集可能な状態に設定後、”Data (Get,PUT)” を選択し、[Edit] ボタンを選択いたします。<br><img src="/blog/LogicApps/AadAuthentication/image028.png"></p><p>PUT メソッドで設定する Body について、以下の記事を参考に設定いただきます。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/trigger-workflows-in-standard-logic-apps-with-easy-auth/ba-p/3207378">Trigger workflows in Standard logic apps with Easy Auth</a></li></ul><p>＜Body サンプル＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;/subscriptions/&#123;subscriptionId&#125;/resourcegroups/&#123;resourceGroupName&#125;/providers/Microsoft.Web/sites/&#123;logicAppName&#125;/config/authsettingsV2&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;authsettingsV2&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;Microsoft.Web/sites/config&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;&#123;locationOfLogicApp&#125;&quot;,</span><br><span class="line">    &quot;tags&quot;: &#123;&#125;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;platform&quot;: &#123;</span><br><span class="line">            &quot;enabled&quot;: true,</span><br><span class="line">            &quot;runtimeVersion&quot;: &quot;~1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;globalValidation&quot;: &#123;</span><br><span class="line">            &quot;requireAuthentication&quot;: true,</span><br><span class="line">            &quot;unauthenticatedClientAction&quot;: &quot;AllowAnonymous&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;identityProviders&quot;: &#123;</span><br><span class="line">            &quot;azureActiveDirectory&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: true,</span><br><span class="line">                &quot;registration&quot;: &#123;</span><br><span class="line">                    &quot;openIdIssuer&quot;: &quot;&#123;issuerId&#125;&quot;,</span><br><span class="line">                    &quot;clientId&quot;: &quot;&#123;clientId&#125;&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;login&quot;: &#123;</span><br><span class="line">                    &quot;disableWWWAuthenticate&quot;: false</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;</span><br><span class="line">                    &quot;jwtClaimChecks&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;allowedAudiences&quot;: [</span><br><span class="line">                        &quot;&#123;audience1&#125;&quot;,</span><br><span class="line">                        &quot;&#123;audience2&#125;&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;defaultAuthorizationPolicy&quot;: &#123;</span><br><span class="line">                        &quot;allowedPrincipals&quot;: &#123;</span><br><span class="line">                            &quot;identities&quot;: [</span><br><span class="line">                                &quot;&#123;ObjectId of AAD app&#125;&quot;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;facebook&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;gitHub&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;google&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;twitter&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;legacyMicrosoftAccount&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;apple&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;login&quot;: &#123;</span><br><span class="line">            &quot;routes&quot;: &#123;&#125;,</span><br><span class="line">            &quot;tokenStore&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;tokenRefreshExtensionHours&quot;: 72.0,</span><br><span class="line">                &quot;fileSystem&quot;: &#123;&#125;,</span><br><span class="line">                &quot;azureBlobStorage&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;preserveUrlFragmentsForLogins&quot;: false,</span><br><span class="line">            &quot;cookieExpiration&quot;: &#123;</span><br><span class="line">                &quot;convention&quot;: &quot;FixedTime&quot;,</span><br><span class="line">                &quot;timeToExpiration&quot;: &quot;08:00:00&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;nonce&quot;: &#123;</span><br><span class="line">                &quot;validateNonce&quot;: true,</span><br><span class="line">                &quot;nonceExpirationInterval&quot;: &quot;00:05:00&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;httpSettings&quot;: &#123;</span><br><span class="line">            &quot;requireHttps&quot;: true,</span><br><span class="line">            &quot;routes&quot;: &#123;</span><br><span class="line">                &quot;apiPrefix&quot;: &quot;/.auth&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;forwardProxy&quot;: &#123;</span><br><span class="line">                &quot;convention&quot;: &quot;NoProxy&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隅付き括弧で記載されているパラメーターについては以下の通り設定いたします。</p><p>・locationOfLogicApp = japaneast や japanwest 等 Standard Logicc Apps が存在するリージョン<br>・issuerId = “<a href="https://sts.windows.net/%7B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA(%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88)ID%7D/">https://sts.windows.net/{ディレクトリ(テナント)ID}/</a> “<br>・clientId = トークンから取得した aud<br>・audience1 = AAD に登録したアプリの {アプリケーション ID の URI}<br>・audience2 = トークンから取得した aud<br>・ObjectId of AAD app = トークンから取得した oid</p><p>上記の通り Body が設定出来ましたら、[PUT] ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image029.png"></p><p>画面中央に緑色のチェックマークが表示されれば完了です。<br><img src="/blog/LogicApps/AadAuthentication/image030.png"></p><h2 id="AAD-認証による-Standard-Logic-Apps-の実行"><a href="#AAD-認証による-Standard-Logic-Apps-の実行" class="headerlink" title="AAD 認証による Standard Logic Apps の実行"></a>AAD 認証による Standard Logic Apps の実行</h2><p>以上の事前準備が出来ましたら、以下の REST API を実行し、Standard Logic Apps を実行致します。<br>なお、AAD 認証で呼び出す Standard Logic Apps のトリガーについては “HTTP 要求の受信時” トリガーである必要がございますため、ご留意いただきますようお願い申し上げます。</p><p><img src="/blog/LogicApps/AadAuthentication/image01101.png"></p><p>・POST メソッド</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&#123;logicAppName&#125;.azurewebsites.net:443/api/&#123;workflowName&#125;/triggers/manual/invoke?api-version=2020-05-01-preview</span><br></pre></td></tr></table></figure><p>・logicAppName = Standard Logic Apps （ワークフロー名ではない）<br>・workflowName = Standard Logic Apps に構築しているワークフロー名<br><img src="/blog/LogicApps/AadAuthentication/image012.png"><br><img src="/blog/LogicApps/AadAuthentication/image013.png"></p><p>続いて、Postman の Headers に以下を追加いたします。</p><p>・KEY = Authorization<br>・VALUE = Bearer “access_token”<br><img src="/blog/LogicApps/AadAuthentication/image014.png"></p><p>以上の設定が出来ましたら、画面右上の [Send] ボタンを選択し、リクエストを送信します。</p><p>Status 202 が表示されましたら無事 Standard Logic Apps のワークフローが AAD 認証によって実行されます。<br><img src="/blog/LogicApps/AadAuthentication/image015.png"></p><p>Standard Logic Apps の実行結果に Postman から実行されたログが出力されます。<br><img src="/blog/LogicApps/AadAuthentication/image016.png"></p><p>以上の手順にて、AAD 認証を用いてStandard Logic Apps を実行することが可能でございます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>事前準備・前提</li><li>Azure ActiveDirectory へのアプリ登録</li><li>トークン取得</li><li>Resource Explorer にて authsettingsV2 の更新</li><li>AAD 認証による Standard Logic Apps の実行</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;Standard Logic Apps （シングルテナント） をご利用のお客様も多いかと思いますが、App Service や Azure Functions と異なり、Standard Logic Apps では Azure Portal から AAD 認証の設定が出来ません。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/AadAuthentication/image000.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今回は、REST API を用いて Standard Logic Apps でも AAD 認証 (EasyAuth) を行う方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Standard-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/azureMonitorLogsLimit/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/azureMonitorLogsLimit/</id>
    <published>2023-03-19T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.630Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約についてご説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約を確認されたい方</li><li>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約の回避方法を知りたい方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>「Azure Monitor Logs」コネクタについては、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/azuremonitorlogs/">Azure Monitor Logs</a></li></ul></li><li><p>「Azure Monitor Logs」コネクタを使った実装例については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logs-export-logic-app">Logic Apps を使用した Log Analytics ワークスペースからストレージ アカウントへのデータのエクスポート</a></li></ul></li></ul><h2 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h2><p>「Azure Monitor Logs」コネクタには、以下の制約事項がございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logicapp-flow-connector#connector-limits">Logic Apps および Power Automate の Azure Monitor Logs コネクタ # コネクタの制限</a></li></ul><p><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/azure-monitor/service-limits#log-analytics-workspaces">Azure Monitor サービスの制限 # Log Analytics ワークスペース # Azure Monitor Logs コネクタ</a></li></ul><p>※ Azure Monitor Logs コネクタはデータを圧縮した形式で通信いたします。<br>上記のデータ容量の制限は圧縮した状態でのデータ容量に関する制限となります。<br>そのため、ワークフローの実行履歴からダウンロードした場合や、ファイルとして出力した際の容量とは異なるものとなります。</p><h2 id="制約に抵触した場合の動作"><a href="#制約に抵触した場合の動作" class="headerlink" title="制約に抵触した場合の動作"></a>制約に抵触した場合の動作</h2><p>件数やサイズの制約を超える結果を取得した場合には、<strong>エラーは発生せずに</strong>結果が省かれて返却される動作となります。<br>また、「クエリ タイムアウトの最大値」を超えた場合には、「RequestTimeout (408)」エラーが発生いたします。</p><h2 id="回避策-1-クエリの工夫"><a href="#回避策-1-クエリの工夫" class="headerlink" title="回避策 1 - クエリの工夫"></a>回避策 1 - クエリの工夫</h2><p>以下の公開情報に記載がございますように、一度に取得されるログが制約に抵触しない範囲となるよう、クエリを工夫いただく方法になります。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logicapp-flow-connector#connector-limits">Logic Apps および Power Automate の Azure Monitor Logs コネクタ # コネクタの制限</a></li></ul><p>たとえば、時間範囲を狭めることや project 演算子を利用して、一度に取得されるデータを小さくする方法が考えられます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/data-explorer/kusto/query/projectoperator">project 演算子</a></li></ul><p>「クエリ」にて where 句を用いた時間範囲の指定を行いますと、「時間範囲」にて「クエリで設定」を選択することが可能でございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit03.jpg"></p><p>※ 「Set in query」と表示される場合もございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit04.jpg"></p><p>※ もし「クエリ」にて where 句を用いて時間範囲指定を行っているにも関わらず、「クエリで設定」や「Set in query」という選択肢が表示されない場合には、「カスタム値の入力」を選択して直接「Set in query」と入力してください。</p><p>「まで」アクションや「For each」アクション等のループ処理を利用して、繰り返しクエリを実行する方法が考えられます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#foreach-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Foreach” ループ</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#until-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Until” ループ</a></li></ul><h2 id="回避策-2-REST-API-の利用"><a href="#回避策-2-REST-API-の利用" class="headerlink" title="回避策 2 - REST API の利用"></a>回避策 2 - REST API の利用</h2><p>「クエリを実行して結果を一覧表示する」アクションの代わりとして、「HTTP」アクションにて以下の REST API を利用する方法もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP">Query - Execute</a></li></ul><p><strong>注意点</strong><br>当該 REST API にも別途制約がございますので、この点につきましてご留意ください。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/azure-monitor/service-limits#log-analytics-workspaces">Azure Monitor サービスの制限 # Log Analytics ワークスペース # クエリ API</a></li></ul><p>また、Logic Apps 自体の制約もございますので、こちらもご確認ください。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal">Azure Logic Apps の制約と構成の参考文献</a></li></ul><p>「クエリを実行して結果を一覧表示する」アクションから得られるデータの形式は「カラム名：値」ですが、<br>当該 REST API から得られるデータは形式が異なりますので、この点につきましてもご留意ください。<br>※ こちらにつきましては、後半に整形方法の一例をご案内しております。</p><p>「クエリを実行して結果を一覧表示する」アクションから得られるデータ<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit06.jpg"></p><p>REST API で得られるデータ<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit07.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP#cross-workspace">Query - Execute # Sample Response</a></li></ul><p><strong>REST API の実行方法</strong><br>以下に REST API の実行方法につきましてご案内いたします。<br>※ 従量課金タイプの Logic Apps を例としております。</p><ol><li><p>Logic Apps のマネージド ID を有効化する。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ID] と遷移し、「システム割り当て済み」タブにて「状態」を「オン」とし、「保存」を押下します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit08.jpg"></p></li><li><p>Log Analytics ワークスペースのロールを付与する。<br>1 で有効化されたマネージド ID に対して、ロールを付与します。<br>[Log Analytics ワークスペース] - [&lt;対象の Log Analytics ワークスペース&gt;] - [アクセス制御 (IAM)] と遷移し、「+ 追加」を押下して「ロールの割り当ての追加」を選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit09.jpg"><br>「ロール」タブにて「監視閲覧者」ロールを選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit10.jpg"></p></li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles#monitoring-reader">Azure 組み込みロール # Monitoring Reader</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/roles-permissions-security#built-in-monitoring-roles">Azure Monitor でのロール、アクセス許可、セキュリティ # 組み込みの監視の役割</a><br>「メンバー」タブにて「アクセスの割り当て先」に「ユーザー、グループ、またはサービス プリンシパル」を選択し、「+ メンバーを選択する」を押下します。<br>1 でマネージド ID を有効化した Logic Apps を検索・選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit11.jpg"><br>割り当てを完了します。<br>※ 割り当てに少しお時間がかかる場合がございます。</li></ul><ol start="3"><li>「HTTP」アクションを設定する。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - ロジック アプリ デザイナー] と遷移し、「HTTP」アクションを追加します。<br>以下の REST API を実行するために、各設定を行います。</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP">Query - Execute</a><br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit12.jpg"><br>・方法：POST<br>・URI：<a href="https://api.loganalytics.io/v1/workspaces/%7BworkspaceId%7D/query">https://api.loganalytics.io/v1/workspaces/{workspaceId}/query</a> … (※1)<br>・本文：クエリを設定します。 … (※2)<br>・認証 (「Add new parameter」を押下し、「認証」にチェックを入れます。)<br>　・認証の種類：マネージド ID<br>　・マネージド ID：システム割り当てマネージド ID<br>　・対象ユーザー：<a href="https://api.loganalytics.io/">https://api.loganalytics.io/</a><br>※1 workspaceId は、[Log Analytics ワークスペース] - [&lt;対象の Log Analytics ワークスペース&gt;] - [設定 - エージェント管理] にて、ご確認いただけます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit13.jpg"><br>※2 クエリをご設定いただく際、クエリ内にダブルクォーテーションを使用しますと、有効な JSON として認識されない場合がございますので、ダブルクォーテーションの前に「\」をご設定ください。</li></ul><p><strong>データの整形</strong><br>「選択」アクションを利用することで、「クエリを実行して結果を一覧表示する」アクションと同様のデータ形式に整形することが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations#select-action">Azure Logic Apps でデータの操作を実行する # 選択アクション</a></li></ul><p>※ 以下にてご案内いたしますのは、あくまでサンプルでございます。お客様のご要件に合わせまして適宜ご変更いただき、<br>実運用に向けましたテストやハンドリングにつきましては、お客様ご自身にてご実施いただきますようお願い申し上げます。</p><p>「選択」アクションは以下のように入力します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit14.jpg"></p><p>・開始 : 式「body(‘HTTP’)?[‘tables’][0]?[‘rows’]」<br>・マップ :<br>　・TimeGenerated：式「item()[0]」<br>　・Type：式「item()[1]」<br>　・test_s：式「item()[2]」</p><p>使用しております body 関数および item 関数につきましては、以下の公開情報もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#body">body</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#item">item</a></li></ul><p>※ 「動的なコンテンツの追加」を押下し、「式」タブにて各式をご設定いただき「OK」ボタン (以下のスクリーンショットの「更新」ボタンにあたります) を選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit15.jpg"></p><p>結果として、以下のデータを得ることができます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;TimeGenerated&quot;</span>: <span class="string">&quot;2022-12-22T01:18:36.023709Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;testCustom_CL&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test_s&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;TimeGenerated&quot;</span>: <span class="string">&quot;2022-12-22T01:19:51.6295168Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;testCustom_CL&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test_s&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>なお、大変申し訳ございませんが、columns の長さに応じて動的に「選択」アクションの「マップ」パラメーターの行を変更する機能はございません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、「Azure Monitor Logs」コネクタの制約と、その制約の回避策についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;「Azure Monitor Logs」コネクタのクエリ実行に関わる制約についてご説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Monitor Logs" scheme="https://jpazinteg.github.io/blog/tags/Azure-Monitor-Logs/"/>
    
  </entry>
  
  <entry>
    <title>Foreachアクションでインデックスを取得した処理の比較</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/GetIterationIndexInForeachAction/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/GetIterationIndexInForeachAction/</id>
    <published>2023-03-16T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.566Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>本記事は弊社海外ブログを日本語向けに解説した記事となります。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/get-iteration-index-in-foreach-action/ba-p/3730379">Get iteration index in Foreach action</a></li></ul><p>Logic Apps で配列内のデータを処理する際、For each アクションのループでインデックスを取得し（現在何番目の配列に対する処理かを判断）、処理を行いたい場合があるかと思います。<br>その際は、コンカレンシ―制御を以下のように 1 に設定し、各繰り返し回数ごとに常に 1 ずつ加算されるインデックスとして変数を使用する手法がございます。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image01.png"></p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image02.png"></p><p>しかし、この方法では For each 処理がシーケンシャルな処理であるため、並列実行が出来ずパフォーマンスに影響を及ぼすことがあります。</p><p>今回は、For each アクションを並列実行して、効率的にインデックスを利用する構成と、従来の処理との比較結果についてご案内いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1． 従来の手法</li><li>2． 本手法での処理の設定方法</li><li>3． 本手法での構成および処理時間の比較</li><li>まとめ</li></ul><h2 id="1．-従来の手法"><a href="#1．-従来の手法" class="headerlink" title="1． 従来の手法"></a>1． 従来の手法</h2><p>まず、今回の前提となる従来の構成がどのような場合を記載しているかについて説明いたします。<br>例えば、以下のようなフローがあるとします。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image03.png"></p><p>一つ目のアクションでは、テストで使用する配列のデータを用意いたします。<br>本記事では Azure Monitor ログ コネクタを基に以下の range 演算子で配列データを動的に作成しておりますが、配列形式のアクションであれば変数アクションで設定いただいても構いません。任意の構成で配列データを準備いただければと思います。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image04.png"></p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/connectors/azuremonitorlogs/">Azure Monitor Logs</a></p></li><li><p><a href="https://learn.microsoft.com/ja-JP/azure/data-explorer/kusto/query/rangeoperator">range 演算子</a></p></li></ul><p>参考までに、本アクションでは以下のような結果となります。</p><p>＜クエリ＞<br>range Steps from 1 to 12 step 1</p><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image05.png"></p><p>Steps と記載された配列要素が 12 個作成されます。</p><p>次に、以下の “変数を初期化する” アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image06.png"></p><p>こちらは For each 内で配列のインデックスとして利用いたします。</p><p>なお、元記事の構成では上記の通り Azure Monitor ログコネクタを利用しておりますが、以下の通り range 式関数でも配列を作成することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#range">range</a><br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image25.png"></li></ul><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image26.png"></p><p>こちらも参考までにご確認いただけますと幸いです。</p><p>次に、以下のような構成の For each アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image07.png"></p><p>詳細について以降で説明いたします。</p><p>まず、For each の “以前の手順から出力を選択” については、動的コンテンツの変数より “value” を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image08.png"></p><p>一つ目の作成アクションでは “変数を初期化する” で作成した変数を指定しましす。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image09.png"></p><p>二つ目の作成アクションでは以下のような式関数を指定しましす。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image10.png"></p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iteration index: @&#123;outputs(&#x27;作成_3&#x27;)&#125;, data:@&#123;body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;][outputs(&#x27;作成_3&#x27;)]&#125;</span><br></pre></td></tr></table></figure><p>こちらの処理で、インデックスを基に最初に設定した配列の要素を取得致します。</p><p>三つ目のアクションでは変数をインクリメント致します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image11.png"></p><p>ここまでの設定が出来ましたら、以下の通り For each のコンカレンシー制御を 1 に設定いたします。<br>（1 にせず並列実行にした場合、変数の値が正常に加算されない）</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image12.png"><br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image13.png"></p><p>出力結果については、以下の通り順次実行で配列の値を取得することが可能ではございますが、1 つずつ取得することとなるのでパフォーマンスに影響が発生します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image14.png"></p><p>以上が前提となる処理になります。こちらの内容について、以下の手順で処理速度を改善する方法を記載いたします。</p><h2 id="2．-処理の設定方法"><a href="#2．-処理の設定方法" class="headerlink" title="2． 処理の設定方法"></a>2． 処理の設定方法</h2><p>本記事の処理構成として、以下のような構成となります。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image15.png">　 </p><p>一つ目のアクションについては “1． 従来の手法での処理時間” で記載した内容と同様に配列の作成となるため説明を割愛いたします。</p><p>二つ目のアクションについて、処理する必要のあるすべてのインデックスを保存した新しい配列を生成する<br>処理となります。例えば、10 項目の配列があった場合、インデックス配列は [ 0, 1, 2 … 9 ] のように生成する必要があります（0 から始まり、[配列長 - 1]で終わります）。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image16.png">　 </p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range ID from 0 to @&#123;add(length(body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;]), -1)&#125; step 1</span><br></pre></td></tr></table></figure><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image17.png">　 </p><p>次に、以下のような構成の For each アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image18.png">　 </p><p>詳細について以降で説明いたします。</p><p>まず、For each の “以前の手順から出力を選択”　については、先ほど作成したインデックスの配列を指定いたします。本例では “クエリを実行して結果を一覧表示する” の “value” を指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image19.png"></p><p>一つ目の作成アクションでは以下の式関数を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image20.png"></p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#123;items(&#x27;For_each&#x27;)[&#x27;ID&#x27;]&#125;</span><br></pre></td></tr></table></figure><p>こちらのアクションについては現在 For each で参照しているアイテムのインデックスを取得している処理となります。</p><p>二つ目の作成アクションでは以下の式関数を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image21.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iteration index:@&#123;outputs(&#x27;作成&#x27;)&#125; , data:@&#123;body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;][outputs(&#x27;作成&#x27;)]&#125;</span><br></pre></td></tr></table></figure><p>こちらの処理で、インデックスを基に最初に設定した配列の要素を取得致します。</p><p>出力結果については、For each の外であらかじめ作成したインデックスと紐づけて配列のデータを取得することで、並列実行処理で配列の値を取得することが可能でございます。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image22.png"></p><h2 id="3．本手法での構成および処理時間"><a href="#3．本手法での構成および処理時間" class="headerlink" title="3．本手法での構成および処理時間"></a>3．本手法での構成および処理時間</h2><p>上記構成について配列要素数を 1000 にした状態でそれぞれ実行時間の比較検証を実施致しました。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image23.png"></p><p>本記事の元となっているブログにも 90 % 近く処理時間の削減が出来たと記載がございますが、<br>本ブログの執筆時の検証結果としましても同様の結果となりました。</p><p>予め作成したインデックスと紐づけた場合：22 秒<br>For each 内でインデックスと紐づけた場合：6 分<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image24.png"></p><p>以上、For each 処理におけるインデックスの取得方法についてご案内いたしました。<br>こちらの記事について、ご参考までにご一読いただければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下の 3 点について、海外ブログを基にご案内いたしました。</p><ul><li>1． 従来の手法</li><li>2． 処理の設定方法</li><li>3． 本手法での構成および処理時間の比較</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;本記事は弊社海外ブログを日本語向けに解説した記事となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/get-iteration-index-in-foreach-action/ba-p/3730379&quot;&gt;Get iteration index in Foreach action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logic Apps で配列内のデータを処理する際、For each アクションのループでインデックスを取得し（現在何番目の配列に対する処理かを判断）、処理を行いたい場合があるかと思います。&lt;br&gt;その際は、コンカレンシ―制御を以下のように 1 に設定し、各繰り返し回数ごとに常に 1 ずつ加算されるインデックスとして変数を使用する手法がございます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/GetIterationIndexInForeachAction/image01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/GetIterationIndexInForeachAction/image02.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;しかし、この方法では For each 処理がシーケンシャルな処理であるため、並列実行が出来ずパフォーマンスに影響を及ぼすことがあります。&lt;/p&gt;
&lt;p&gt;今回は、For each アクションを並列実行して、効率的にインデックスを利用する構成と、従来の処理との比較結果についてご案内いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="For each" scheme="https://jpazinteg.github.io/blog/tags/For-each/"/>
    
  </entry>
  
  <entry>
    <title>実行中の Logic Apps の状況を確認して制御する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/WorkflowRunsList/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/WorkflowRunsList/</id>
    <published>2023-03-15T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.626Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの山田です。</p><p>複数の Logic Apps を実行する際に、「<a href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/">トリガーのコンカレンシー制御</a>」がございますが、ここではもう少し汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><p>トリガーのコンカレンシー制御以外の手段で、他の実行中の Logic Apps の状況を任意にフィルターして制御する方法を実装されたい方。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>実行一覧 API</li><li>Logic Apps から HTTP コネクタによる API の実行</li><li>状況判定</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="実行一覧-API"><a href="#実行一覧-API" class="headerlink" title="実行一覧 API"></a>実行一覧 API</h2><p><a href="https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/list?tabs=HTTP">Workflow Runs - List</a></p><p>ワークフローの実行の一覧を取得します。</p><p><code>https://management.azure.com/subscriptions/&#123;subscriptionId&#125;/resourceGroups/&#123;resourceGroupName&#125;/providers/Microsoft.Logic/workflows/&#123;workflowName&#125;/runs?api-version=2016-06-01&amp;$filter=&#123;$filter&#125;</code></p><p>これにより、Filter で例として、実行中のフローを絞り込むことができます。実行中のものを絞り込むフィルタは <code>status eq &#39;running&#39;</code> などとなります。エンコードを掛けますと以下のような URL になります。</p><p><code>https://management.azure.com/subscriptions/&#123;subscriptionId&#125;/resourceGroups/&#123;resourceGroupName&#125;/providers/Microsoft.Logic/workflows/&#123;workflowName&#125;/runs?api-version=2016-06-01&amp;$filter=status%20eq%20%27running%27</code></p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-1.png"></p><h2 id="Logic-Apps-から-HTTP-コネクタによる-API-の実行"><a href="#Logic-Apps-から-HTTP-コネクタによる-API-の実行" class="headerlink" title="Logic Apps から HTTP コネクタによる API の実行"></a>Logic Apps から HTTP コネクタによる API の実行</h2><p>上の API を、Logic Apps の、HTTP コネクタから実行いただけます。ここでは認証にマネージド ID を利用しております。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-2.png"></p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-3.png"></p><p>この方法で当該の API を使用する際は Logic Apps のマネージド ID に対して、「Logic App Operator」ロールを割り当てます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles#logic-app-operator">Azure 組み込みロール # Logic App Operator</a></p><h2 id="状況判定"><a href="#状況判定" class="headerlink" title="状況判定"></a>状況判定</h2><p>この HTTP の結果に対して、Logic Apps 内で関数を用いますと以下のような判定が可能となります。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-4.png"> </p><p><code>Length(body(&#39;HTTP&#39;)?[&#39;value&#39;])</code></p><p>Length</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#length">式関数のリファレンス ガイド - Azure Logic Apps # Length</a></p><p>配列の項目の数を返します。</p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-5.png"> </p><p>この length 関数を用いて、実行中のジョブ一覧「body(‘HTTP’)?[‘value’]」の要素数をカウントします。</p><ul><li>カウントを条件ステートメントで判定する。</li><li>実行中のジョブが 1 以上である場合は終了アクションでジョブを終了する。</li><li>実行中のジョブがない場合は想定の処理に移行する。</li></ul><p>例として、上のような制御が可能となります。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-6.png"></p><p>以上となります。</p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>ほか、トリガーに設定可能なコンカレンシー制御と最大実行待機数に関する情報については、以下の記事がございます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/">トリガーのコンカレンシー制御と最大実行待機数について</a>  </li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、複数の Logic Apps を実行する際に、汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたしました。本記事が皆様のお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの山田です。&lt;/p&gt;
&lt;p&gt;複数の Logic Apps を実行する際に、「&lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/&quot;&gt;トリガーのコンカレンシー制御&lt;/a&gt;」がございますが、ここではもう少し汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps Standard と関連するストレージ アカウント</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/</id>
    <published>2023-03-01T02:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.614Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの山田です。<br>今回は、Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントについて、基礎知識からご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>初めて Logic Apps Standard での開発をされる方</li><li>Azure リソースの管理者</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割</li><li>Logic Apps Standard と関連するストレージ アカウント名</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Logic-Apps-Standard-を作成した際に一緒に作成されるストレージ-アカウントの役割"><a href="#Logic-Apps-Standard-を作成した際に一緒に作成されるストレージ-アカウントの役割" class="headerlink" title="Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割"></a>Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割</h2><p>端的に、Logic Apps Standard を作成した際に一緒に作成されるコンテナやファイルは、Logic Apps Standard をご利用の際のワークフロー情報や、実行履歴情報が格納されているものとなります。「flow*」などという名称のテーブルをご覧いただけます。</p><p><img src="/blog/LogicApps/StandardLogicApps-StorageAccount/StandardLogicApps-StorageAccount-1.png"></p><h2 id="Logic-Apps-Standard-と関連するストレージ-アカウント名"><a href="#Logic-Apps-Standard-と関連するストレージ-アカウント名" class="headerlink" title="Logic Apps Standard と関連するストレージ アカウント名"></a>Logic Apps Standard と関連するストレージ アカウント名</h2><p>ストレージ アカウントと Logic Apps Standard の結びつきは以下から参照いただけます。</p><ol><li>Azure Portal から該当の Logic Apps Standard に移動します。</li><li>左部 [設定] から [構成] の、[アプリケーション設定] タブを選択します。 </li></ol><p><img src="/blog/LogicApps/StandardLogicApps-StorageAccount/StandardLogicApps-StorageAccount-2.png"></p><ul><li>AzureWebJobsStorage</li><li>WEBSITE_CONTENTAZUREFILECONNECTIONSTRING</li></ul><p>上 2 つがストレージ アカウント名に関わるパラメーターとなります。</p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Logic Apps Standard とストレージ アカウントに言及したドキュメントには、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account">シングルテナントの Standard ロジック アプリをプライベート エンドポイントを使用してプライベート ストレージ アカウントにデプロイする</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/estimate-storage-costs">シングルテナント Azure Logic Apps の Standard ロジック アプリ ワークフローのストレージ コストを見積もる</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps Standard タイプを作成するにあたって理解しておくと安心な、ストレージ アカウントとの関係にまつわる基礎知識についてご紹介しました。ほか関連記事は以下を参照くださいませ。引き続き皆様のお役に立てる情報を発信してまいります。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/">Logic Apps Standard のワークフロー実行ログを削除する</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントについて、基礎知識からご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Storage Account" scheme="https://jpazinteg.github.io/blog/tags/Storage-Account/"/>
    
  </entry>
  
  <entry>
    <title>トリガーのコンカレンシー制御と最大実行待機数について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/</id>
    <published>2023-02-27T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.646Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>トリガーに設定可能なコンカレンシー制御と最大実行待機数について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>トリガーを順次実行とされたい方</li><li>トリガーの並列実行数を制御されたい方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>トリガーのコンカレンシー制御については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul></li><li><p>トリガーのコンカレンシーを変更する方法については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-trigger-concurrency">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # トリガーのコンカレンシーを変更する</a></li></ul></li><li><p>トリガーの最大実行待機数を設定する方法については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-waiting-runs-limit">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # 実行待機の制限を変更する</a></li></ul></li></ul><h2 id="トリガーのデフォルト設定"><a href="#トリガーのデフォルト設定" class="headerlink" title="トリガーのデフォルト設定"></a>トリガーのデフォルト設定</h2><p>従量課金タイプおよび Standard タイプの Logic Apps においては、デフォルトではコンカレンシー制御は「オフ」の状態であり、<br>トリガーが無制限に並列実行できる設定となっております。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency01.jpg"></p><h2 id="コンカレンシー制御の変更"><a href="#コンカレンシー制御の変更" class="headerlink" title="コンカレンシー制御の変更"></a>コンカレンシー制御の変更</h2><p>トリガーの設定にて、コンカレンシー制御を「オン」とし、並列実行する数を制御することが可能です。<br><strong>一度コンカレンシー制御を「オン」としますと、元に戻すことができかねますのでご注意ください。</strong></p><p>以下の例では「HTTP 要求の受信時」トリガーを利用しております。<br>右上の「…」を押下し、「設定」を選択します。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency02.jpg"></p><p>「コンカレンシー制御」にて「上限」を「オン」とします。<br>「並列処理の次数」にて並列して起動するトリガーの数を制御することが可能です。<br>以下の例では、順次実行とするために「並列処理の次数」を「1」としております。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency03.jpg"></p><p>以下の公開情報に記載がございますが、「並列処理の次数」には 1 ～ 100 をご設定いただけます。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency04.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><h2 id="最大実行待機数の設定"><a href="#最大実行待機数の設定" class="headerlink" title="最大実行待機数の設定"></a>最大実行待機数の設定</h2><p>トリガーのコンカレンシー制御にて「並列処理の次数」で設定した値の数だけ並列処理が既に行われていて、<br>さらに新しいリクエストがトリガーに送られた場合には、先の処理が終わるまで待機させることが可能です。<br>このときの待機させる数をご設定いただけます。<br>最小値と最大値につきましては、以下の公開情報に記載がございます。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - ロジック アプリ コード ビュー] と遷移します。<br>“triggers” &gt; トリガー名 &gt; “runtimeConfiguration” &gt; “concurrency” に、”maximumWaitingRuns” という項目を追加します。<br>値には、待機させる最大実行数 (今回の例では 2 ) を指定いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-waiting-runs-limit">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # 実行待機の制限を変更する</a></li></ul><p>上記の設定を行いますと、以下のような動作となります。<br>※ 以下の動作確認では、「並列処理の次数」を「1」最大実行待機数を「2」としており、従量課金タイプの Logic Apps にて手動でトリガーを起動しております。</p><p>まず一つ目の処理の実行を開始いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency07.jpg"></p><p>一つ目の処理が実行されている間に、新しくトリガーを起動しますと以下のように 2 件まで待機いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency08.jpg"></p><p>最大実行待機数を超えてトリガーを起動しようとしますと、以下のようにエラーが発生いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency09.jpg"></p><p>トリガーを外部から呼び出す場合、呼び出し元には 429 (Too Many Requests) が返却され、呼び出しに失敗いたします。<br>この場合、Logic Apps 側の「トリガーの履歴」にも残りませんので、クライアント側にて時間を空けて再試行する等のご対応が必要となります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;WorkflowMaximumWaitingRunCountExceeded&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;The number of waiting workflow runs &#x27;2&#x27; has exceeded the maximum allowed limit of &#x27;2&#x27;. Try increasing the value of &#x27;maximumWaitingRuns&#x27; in trigger concurrency configuration.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、最大実行待機数を上記のように明示的に設定しない場合には、以下の公開情報の通り「10 回の実行 + 同時実行の数」となります。(最大は 100 でございます。)<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><p>たとえば「並列処理の次数」が「1」の場合には、「10 回の実行 + 1」となり、11 件まで待機させることが可能です。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency10.jpg"><br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency11.jpg"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、トリガーのコンカレンシー制御の設定方法、最大実行待機数についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;トリガーに設定可能なコンカレンシー制御と最大実行待機数について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps で各ファイルフォーマットを変換する Tips</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FileFormatConversion/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FileFormatConversion/</id>
    <published>2023-02-12T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.562Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Azure Logic Apps でファイルを操作する際、CSV から JSON、JSON から XML 等ファイルフォーマットを変換されたい場合があるかと思います。<br>今回は、Azure Logic Apps でいくつかのファイルフォーマットを変換する Tips をお届けします！</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1． JSON → XML</li><li>2． XML → JSON</li><li>3． JSON → CSV</li><li>4． CSV → JSON</li><li>5． CSV → XML</li><li>6． XML → CSV</li><li>7． HTML → TXT</li><li>まとめ</li></ul><h2 id="1．JSON-→-XML"><a href="#1．JSON-→-XML" class="headerlink" title="1．JSON → XML"></a>1．JSON → XML</h2><p>JSON から XML へのフォーマット変換につきましては、以下の xml 関数をご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#xml">xml</a></li></ul><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image01.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(outputs(&#x27;Test_JSON&#x27;))</span><br></pre></td></tr></table></figure><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image02.png"></p><p>1 つ目の Tips については以上となります。</p><h2 id="2．XML-→-JSON"><a href="#2．XML-→-JSON" class="headerlink" title="2．XML → JSON"></a>2．XML → JSON</h2><p>XML から JSON へのフォーマット変換につきましては、以下の JSON 関数をご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#json">json</a></li></ul><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image03.png"></p><p>xml についてはサンプルとして以下のように設定しております。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(&#x27;&lt;?xml version=&quot;1.0&quot;?&gt; &lt;root&gt; &lt;person id=&quot;1&quot;&gt; &lt;name&gt;Sophia Owen&lt;/name&gt; &lt;occupation&gt;Engineer&lt;/occupation&gt; &lt;/person&gt; &lt;/root&gt;&#x27;)</span><br></pre></td></tr></table></figure><p>また、JSON 関数には以下の値を指定しております。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json(outputs(&#x27;Test_XML&#x27;))</span><br></pre></td></tr></table></figure><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image04.png"></p><p>2 つ目の Tips については以上となります。</p><h2 id="3．JSON-→-CSV"><a href="#3．JSON-→-CSV" class="headerlink" title="3．JSON → CSV"></a>3．JSON → CSV</h2><p>JSON から CSV へのフォーマット変換につきましては、CSV テーブルの作成アクションにて設定可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations#create-csv-table-action">Azure Logic Apps でデータの操作を実行する # CSV テーブルの作成アクション</a><br><img src="/blog/LogicApps/FileFormatConversion/image05.png"></li></ul><p>ただし、こちらのアクションにつきましては配列形式のインプットが必要となりますので、JSON プロパティを含む配列形式に設定いただく必要がございます。<br>例えば、以下図の例ですと、作成 2 アクション内で JSON オブジェクトを作成しておりますが、CSV テーブルの作成 アクションへ引き渡す値については array 関数にて配列形式に変換しております。</p><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image06.png"><br>array(outputs(‘Test_JSON’))</p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image07.png"></p><p>3 つ目の Tips については以上となります。</p><h2 id="4．CSV-→-JSON"><a href="#4．CSV-→-JSON" class="headerlink" title="4．CSV → JSON"></a>4．CSV → JSON</h2><p>まず、CSV 形式を基にしたファイルフォーマットに関する関数やアクションはございません。その為、別途作り込みが必要になります。<br>参考までに、以下のように式関数とアクションを組み合わせて変換するサンプルフローをご案内いたします。<br>こちらはあくまでも参考情報ですので、商用環境でご利用になられる場合はお客様の責任のもと、お客様にて設計、試験等を実施頂き、お客様の判断にて採用要否の判断をお願い申し上げます。<br>※本テクニカルサポートとしましては本サンプルに関する構築支援は実施致しません。</p><p>例</p><ol><li><p>CSV フォーマットのデータを取得する。本例では BLOB 上の CSV を取得します。<br><img src="/blog/LogicApps/FileFormatConversion/image08.png"></p></li><li><p>“変数を初期化する” アクションで “アレイ” を選択します。<br><img src="/blog/LogicApps/FileFormatConversion/image09.png"></p></li><li><p>“変数を初期化する” アクションで “文字列” を選択し、動的コンテンツで “BLOB コンテンツを取得する (V2) ” のファイルコンテンツを指定します。<br><img src="/blog/LogicApps/FileFormatConversion/image10.png"></p></li><li><p>“選択” アクションを設定し、開始に以下の式関数を設定します。<br><img src="/blog/LogicApps/FileFormatConversion/image11.png"></p></li></ol><p>・skip(split(variables(‘csv’),base64ToString(‘Cg==’)),1)</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#skip">skip</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#split">split</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#variables">variables</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#base64tostring">base64ToString</a></p></li></ul><p>※ base64ToString(‘Cg==’) は改行文字 「/n」と同じ値であるため<br>利用中の CSV の改行文字が「\r\n」の場合は base64ToString(‘DQo=’) に置き換える。</p><ol start="5"><li>上記図のマップの左側に CSV のカラム名を手動設定し、右側に以下のように式関数を設定します。(配列は0始まり)<br>・split(item(),’,’)[0]<br>・split(item(),’,’)[1]<br>・split(item(),’,’)[2]<br>・split(item(),’,’)[3]<br>・split(item(),’,’)[4]</li></ol><p>※ [] 内の数字についてはカラム位置を指定します。</p><p>以上の通り実施いただくことで、以下のような JSON 形式の結果を取得することが可能でございます。</p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image12.png"></p><p>なお、カラムの順番につきましてはマップに指定している文字列に依存しますのでご留意ください。<br>必要に応じてカラム名に数字を付与する等の対応が必要になります。</p><p>4 つ目の Tips については以上となります。</p><h2 id="5．CSV-→-XML"><a href="#5．CSV-→-XML" class="headerlink" title="5．CSV → XML"></a>5．CSV → XML</h2><p>CSV 形式から XML 形式への変換につきましては、上記で作成した JSON 形式の値に対して、以下の通り For each ステートメントおよび “配列変数に追加” アクションを設定し、＜2. “変数を初期化する” アクションで “アレイ” を選択。＞で作成した配列に対して値を設定することで変換可能でございます。<br>こちらも以下に設定例を記載いたします。</p><p>例</p><ol><li>For each ステートメントを手動で設定し、“配列変数に追加” アクションを追加後以下の値を設定します。<br><img src="/blog/LogicApps/FileFormatConversion/image13.png"></li></ol><p>＜For each アクション＞<br>・以前の手順から出力を選択： 動的コンテンツ -  選択 - 出力</p><p>＜配列変数に追加＞<br>・名前：array ( “4．CSV → JSON” の手順 2. “変数を初期化する” アクションで指定した名前)<br>・値：xml(setProperty(json(‘{}’),’sample’,items(‘For_each’)))</p><ol start="2"><li>“作成” アクション等、XML を出力したいアクションを利用し、以下の関数を設定します。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(concat(&#x27;&lt;test&gt;&#x27;,join(variables(&#x27;array&#x27;),&#x27;&#x27;),&#x27;&lt;/test&gt;&#x27;))</span><br></pre></td></tr></table></figure></li></ol><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image14.png"></p><p>以上のように、作り込みをいただくことで、CSV からのファイルフォーマットの変換が可能でございます。</p><p>5 つ目の Tips については以上となります。</p><h2 id="6．XML-→-CSV"><a href="#6．XML-→-CSV" class="headerlink" title="6．XML → CSV"></a>6．XML → CSV</h2><p>XML から CSV につきましては、先にご案内申し上げました、XML から JSON にフォーマット変換いただいた後で、JSON からCSV へのフォーマット変換を実施いただくことで設定可能でございます。</p><h2 id="7．HTML-→-TXT"><a href="#7．HTML-→-TXT" class="headerlink" title="7．HTML → TXT"></a>7．HTML → TXT</h2><p>最後に、HTML から TXT へのフォーマット変換につきましては、プレビュー機能ではございますが、以下の Content Conversion (プレビュー) コネクタをご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/conversionservice/">Content Conversion (プレビュー)</a></li></ul><p><img src="/blog/LogicApps/FileFormatConversion/image15.png"></p><p>こちらにつきましては、直接 HTML の内容を入力するのではなく、以下のようにコネクタから取得できるような HTML コンテンツを指定いただく必要がございます。<br>例<br><img src="/blog/LogicApps/FileFormatConversion/image16.png"></p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image17.png"></p><p>直接 HTML の内容をテキスト入力すると以下のような結果となります。</p><p><img src="/blog/LogicApps/FileFormatConversion/image18.png"><br><img src="/blog/LogicApps/FileFormatConversion/image19.png"></p><p>こちらのコネクタにつきましては、2023年 2 月現在プレビュー機能となっておりますため、今後予告なく仕様の変更が発生する可能性がございますのでご留意下さい。</p><p>なお、よくあるお問い合わせとして YAML 形式の変換は出来ないのかとご質問をいただくのですが、誠に申し訳なくも YAML 形式については 2023 年 2 月現在で対応しておりませんのでご了承いただきたく存じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下のファイルフォーマット変換についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>1． JSON → XML</li><li>2． XML → JSON</li><li>3． CSV → JSON</li><li>4． CSV → XML</li><li>5． JSON → CSV</li><li>6． XML → CSV</li><li>7． HTML → TXT</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Azure Logic Apps でファイルを操作する際、CSV から JSON、JSON から XML 等ファイルフォーマットを変換されたい場合があるかと思います。&lt;br&gt;今回は、Azure Logic Apps でいくつかのファイルフォーマットを変換する Tips をお届けします！&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FailedToFetch/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FailedToFetch/</id>
    <published>2023-01-22T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.558Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示され、実行履歴が確認できずにお困りの方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>Standard Logic Apps についての公開情報は以下になります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare">Azure Logic Apps でのシングルテナント、マルチテナント、統合サービス環境の比較</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/designer-overview">シングルテナント Azure Logic Apps の Standard ロジック アプリ ワークフロー デザイナーについて</a></li></ul></li><li><p>プライベート エンドポイントの設定についての公開情報は以下になります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint">プライベート エンドポイントを使って Standard ロジック アプリと Azure 仮想ネットワーク間のトラフィックをセキュリティで保護する</a></li></ul></li><li><p>英語表記となりますが、当該事象につきましては以下のブログにも記載がございます。</p><ul><li>参考ドキュメント : <a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/common-errors-in-azure-logic-apps-standard-unexpected-error/ba-p/3293197">Common errors in Azure Logic Apps (Standard) - Unexpected error. Failed to fetch</a></li></ul></li></ul><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示されることがございます。</p><p>以下のようにエラーが表示され、実行履歴の詳細が確認できません。<br><img src="/blog/LogicApps/FailedToFetch/runHistory.jpg"></p><p>また、「トリガーの履歴」タブにて識別子を選択し、「入力のリンク」または「出力のリンク」を選択します。<br><img src="/blog/LogicApps/FailedToFetch/triggerHistory01.jpg"></p><p><img src="/blog/LogicApps/FailedToFetch/triggerHistory02.jpg"></p><p>以下のように「MsPortalFx.Errors.AjaxError」とエラー表示され、トリガーの履歴につきましても詳細が確認できません。<br><img src="/blog/LogicApps/FailedToFetch/triggerHistory03.jpg"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>通常原因としては、以下 2 点が挙げられます。</p><ol><li>プライベート エンドポイントが有効化されている場合</li></ol><p>Standard Logic Apps の「受信トラフィック」にて「プライベート エンドポイント」が有効化されている場合、<br>実行履歴に「予期しないエラー. Failed to fetch」と表示されますのは、想定動作となります。</p><p>※ [ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」にて設定状況をご確認いただけます。<br><img src="/blog/LogicApps/FailedToFetch/networkSetting01.jpg"></p><p>プライベート エンドポイントを有効化したことにより、当該 Logic Apps に対しては、同一仮想ネットワークからのみのアクセスを許可している状態となります。<br>そのため、同一仮想ネットワーク外からのアクセスでは、「Failed to fetch」というエラーが表示され、実行履歴をご確認いただけません。<br>(実際のワークフローの「成功」、「失敗」に関わらず、こちらのエラーが表示されます。)</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-access-restrictions">Azure App Service のアクセス制限</a></li></ul><ol start="2"><li>アクセス制限の設定を行っている場合</li></ol><p>Standard Logic Apps の「受信トラフィック」にて「アクセス制限」を設定されている場合、「許可」に設定されているパブリック IP アドレス以外からのアクセスを拒否いたしますので、想定動作となります。<br>※ [ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」にて設定状況をご確認いただけます。<br><img src="/blog/LogicApps/FailedToFetch/networkSetting02.jpg"></p><h2 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h2><ol><li>プライベート エンドポイントが有効化されている場合</li></ol><p>Standard Logic Apps のプライベート エンドポイントが配置されている仮想ネットワークと、同一の仮想ネットワークに仮想マシンを作成します。<br>作成した仮想マシンにリモート デスクトップ接続を行い、Azure ポータルへアクセスしますと、実行履歴をご確認いただけます。</p><ol start="2"><li>アクセス制限の設定を行っている場合</li></ol><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「アクセス制限」にて当該 Logic Apps へアクセスしている端末のパブリック IP アドレスを許可します。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps Standard のワークフロー実行ログを削除する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/</id>
    <published>2023-01-20T01:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.566Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。 Azure Integration サポート チームの山田です。<br>本記事では、Standard Logic Apps のワークフロー実行ログを削除する便利ツールについて、ご紹介いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>Standard 版の Logic Apps で利用いただけるツールです。</li><li>ログの保存期間に関しまして、正式なドキュメントは以下にございます。<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#run-duration-and-history-retention-limits">制約と構成の参考ガイド#実行継続時間および履歴保有の制限 - Azure Logic Apps | Microsoft Learn</a></li></ul></li><li>制限増減の設定箇所に関しても案内がございます。<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=standard,azure-portal#change-run-duration-and-history-retention-in-storage">制約と構成の参考ガイド#実行継続時間とストレージでの履歴の保持期間を変更する - Azure Logic Apps | Microsoft Learn</a></li></ul></li></ul><h2 id="Standard-Logic-Apps-のワークフロー実行ログを削除する「Flow-History-Clearner」"><a href="#Standard-Logic-Apps-のワークフロー実行ログを削除する「Flow-History-Clearner」" class="headerlink" title="Standard Logic Apps のワークフロー実行ログを削除する「Flow History Clearner」"></a>Standard Logic Apps のワークフロー実行ログを削除する「Flow History Clearner」</h2><ul><li>前提条件を踏まえた「削除」手段としての「便利ツール」をご紹介いたします。</li><li>手動でも削除が可能なことがご確認いただけます。</li></ul><h3 id="Flow-History-Cleaner-について"><a href="#Flow-History-Cleaner-について" class="headerlink" title="Flow History Cleaner について"></a>Flow History Cleaner について</h3><p><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/logic-app-standard-flow-history-cleaner/ba-p/3582258">Logic App Standard Flow History Cleaner - Microsoft Community Hub</a></p><blockquote><p>Application that deletes the Tables and the Queues in the Logic app Standard storage account.<br>it will help you in the development process, especially if there are stuck flows in the running state </p><p>How to download the application<br>Open the Kudo <a href="https://docs.microsoft.com/en-us/azure/app-service/resources-kudu">https://docs.microsoft.com/en-us/azure/app-service/resources-kudu</a> from Logic app site</p></blockquote><blockquote><p>&lt;日本語訳&gt;</p><p>「フロー履歴クリーナー」<br>Logic Apps Standard のストレージアカウントにあるテーブルとキューを削除するアプリケーションです。<br>実行中のフローを停止させている場合において、開発工程に役立ちます。</p><p>アプリケーションのダウンロード方法<br>Logic Apps のサイトから Kudu を開きます。</p></blockquote><h3 id="Kudu-から-Flow-History-Cleaner-を利用する"><a href="#Kudu-から-Flow-History-Cleaner-を利用する" class="headerlink" title="Kudu から Flow History Cleaner を利用する"></a>Kudu から Flow History Cleaner を利用する</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/app-service/resources-kudu">Kudu サービスの概要 - Azure App Service | Microsoft Learn</a></p><p>Kudu は、以下のようにアクセスいたします。<br><code>https://&lt;Logic Apps Standard名&gt;.scm.azurewebsites.net</code></p><p>Kudu 上部から [Debug console] - [CMD] に遷移いたします。</p><p><img src="https://techcommunity.microsoft.com/t5/image/serverpage/image-id/390797iA3695041CA6B8D9A/image-dimensions/2500?v=v2&px=-1"></p><p>下部 CLI 上にて、以下コマンドを用います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mbarqawi/FlowHistoryCleaner.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cd FlowHistoryCleaner</span><br><span class="line">dotnet publish</span><br><span class="line">Cd FlowHistoryCleaner\bin\Debug\netcoreapp3.1\publish</span><br><span class="line">FlowHistoryCleaner.exe</span><br></pre></td></tr></table></figure><p>上のコマンドにて clone した FlowHistoryCleaner フォルダ内で、<code>dotnet publish</code> を行いますと、<code>FlowHistoryCleaner.exe</code> が利用いただけるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\home\FlowHistoryCleaner\FlowHistoryCleaner\bin\Debug\netcoreapp3.1\publish&gt;FlowHistoryCleaner.exe</span><br><span class="line">will use the connection string DefaultEndpointsProtocol=https;AccountName=playgroundeastjapan9aea;AccountKey=uwx+LUhDpdjeqVf5riH0MMUwaDF4a1eJIx+0Yc2CRnZ49O09abVvpYobK3iWf4I/65CQumhq7GrD+ASt2DJaSg==;EndpointSuffix=core.windows.net </span><br><span class="line">Are you sure you want to clean all  Tables and Queues ? [y/n] : y</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/FlowHistoryClearner/kudu.png"></p><p>当方の手元では、例として、以下のようなワークフロー履歴につきまして確認しております。</p><p><img src="/blog/LogicApps/FlowHistoryClearner/history1.png"></p><p>実行後、以下のようにクリアされることをご覧いただけます。</p><p><img src="/blog/LogicApps/FlowHistoryClearner/history2.png"></p><p>あくまで「便利ツール」としてのご案内ではございますが、当記事がお力になれれば幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では Logic Apps Standard でワークフロー実行ログを削除する方法について説明いたしました。本記事がお客様のシステム保守の一助になりますと幸いです。</p><h2 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h2><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/logic-app-standard-flow-history-cleaner/ba-p/3582258">Logic App Standard Flow History Cleaner - Microsoft Community Hub</a></li><li><a href="https://github.com/mbarqawi/FlowHistoryCleaner">mbarqawi/FlowHistoryCleaner</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。 Azure Integration サポート チームの山田です。&lt;br&gt;本記事では、Standard Logic Apps のワークフロー実行ログを削除する便利ツールについて、ご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard" scheme="https://jpazinteg.github.io/blog/tags/Standard/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps と Azure Automation でファイルの文字コードを変更する小技</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/Utf82SJIS/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/Utf82SJIS/</id>
    <published>2023-01-17T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.626Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Azure Logic Apps でファイル コンテンツを取り扱う場合に文字コードを任意の文字コードに設定されたい場合があるかと思います。<br>しかしながら、Azure Logic Apps では文字コードを変更することが出来かねる仕様となっております。</p><p>例えば、以下のように Azure Portal のデザイナーからファイルを新規作成した場合はデザイナーの仕様上、ファイルは UTF-8 として作成されます。<br><img src="/blog/LogicApps/Utf82SJIS/image01.png"></p><p>作成されたファイル<br><img src="/blog/LogicApps/Utf82SJIS/image02.png"></p><p>一方、以下の “BLOB コンテンツを取得する (V2)” ように既に作成されているファイルをコンテンツとして取得した場合、元の文字コードが維持されます。例えば、”test.csv” の文字コードが SJIS だった場合、SJIS のコンテンツとして扱われ、Azure Logic Apps では文字コードを変更することが出来ません。<br><img src="/blog/LogicApps/Utf82SJIS/image03.png"></p><p>今回は Azure Logic Apps と Azure Automation を用いて、ファイルの文字コードを変更する小技をご案内しようと思います。<br>なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>Azure Automation の設定方法とサンプルコード</li><li>Azure Logic Apps の設定方法</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回ご案内させていただく小技では、ファイルの格納先をストレージ アカウント (Blob コンテナー)とします。<br>また、Azure Automation ではストレージ アカウントのモジュールを有効にし、Runbook の種類として PowerShell (ランタイム バージョン 5.1) を利用します。<br>Azure Logic Apps については従量課金タイプを利用致します。</p><h2 id="Azure-Automation-の設定方法とサンプルコード"><a href="#Azure-Automation-の設定方法とサンプルコード" class="headerlink" title="Azure Automation の設定方法とサンプルコード"></a>Azure Automation の設定方法とサンプルコード</h2><p>まず、Azure Automation で Automation アカウントを構築いただき、[アカウント設定] - [ID] より “システム割り当て済み” のマネージド ID の状態を オンにします。<br><img src="/blog/LogicApps/Utf82SJIS/image04.png"></p><p>その後、”ストレージ アカウント共同作成者” 等のストレージ アカウントを操作可能な権限を付与いたします。本構成では “共同作成者” の権限を付与しております。<br><img src="/blog/LogicApps/Utf82SJIS/image05.png"></p><p>次に、任意の名前で Runbook を作成いただきます。<br><img src="/blog/LogicApps/Utf82SJIS/image06.png"></p><p>＜設定値＞<br>・名前 : 任意<br>・Runbook の種類 : PowerShell<br>・ランタイム バージョン : 5.1 (2023/01/17 現在で 7.1 がプレビューであるため)<br>・説明 : 任意</p><p>作成できましたら、以下のサンプルコードを基にスクリプトを構築いたします。</p><p>・RunBook のサンプル（※こちらはあくまでもサンプルでございます。お客様の責任にて採用判断をお願いいたします。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Param</span><br><span class="line">(</span><br><span class="line">  [Parameter (Mandatory= $true)]</span><br><span class="line">  [String] $Blob,</span><br><span class="line">  [Parameter (Mandatory= $true)]</span><br><span class="line">  [String] $Container</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disable-AzContextAutosave -Scope Process</span><br><span class="line">$AzureContext = (Connect-AzAccount -Identity).context</span><br><span class="line">Set-AzContext -SubscriptionName $AzureContext.Subscription -DefaultProfile $AzureContext</span><br><span class="line"></span><br><span class="line"># Storage Acount information (任意のものに変更)</span><br><span class="line">$resourceGroup = &quot;●●●●&quot; #ストレージアカウントのリソースグループ名 </span><br><span class="line">$storageaccountName = &quot;●●●●&quot; #ストレージアカウント名</span><br><span class="line"></span><br><span class="line"># ファイル変換設定</span><br><span class="line">$CurrentPath = (pwd).path</span><br><span class="line">$EncodeTo = &quot;Shift-JIS&quot;</span><br><span class="line">$EncodingFrom = &quot;UTF-8&quot;</span><br><span class="line">$inputFileName = &quot;$&#123;CurrentPath&#125;\$&#123;Blob&#125;&quot;</span><br><span class="line">$outputFileName = &quot;$&#123;CurrentPath&#125;\SJIS_$&#123;Blob&#125;&quot;</span><br><span class="line"># Get csv from Storage Account</span><br><span class="line">$storageAccount = Get-AzStorageAccount -ResourceGroupName $resourceGroup -Name $storageaccountName</span><br><span class="line">$ctx = $storageAccount.Context</span><br><span class="line">Get-AzStorageBlobContent -Context $ctx -Blob $Blob -Container $Container -Path $CurrentPath</span><br><span class="line"></span><br><span class="line"># Transform</span><br><span class="line">$enc_t = [Text.Encoding]::GetEncoding($EncodeTo)</span><br><span class="line">$enc_f = [Text.Encoding]::GetEncoding($EncodingFrom)</span><br><span class="line"></span><br><span class="line"># 変換元ファイルをStreamReaderオブジェクトで読み込み</span><br><span class="line">$reader = New-Object IO.StreamReader($inputFileName, $enc_f)</span><br><span class="line"></span><br><span class="line"># 保存先ファイルをStreamWriterオブジェクトでオープン</span><br><span class="line">$writer = New-Object IO.StreamWriter($outputFileName, $false, $enc_t)</span><br><span class="line"></span><br><span class="line"># 変換元ファイルを順に読み込み、保存先ファイルに書き込み</span><br><span class="line">while(!$reader.EndOfStream)&#123;$writer.WriteLine($reader.ReadLine())&#125;</span><br><span class="line"></span><br><span class="line"># ファイルをすべてクローズ</span><br><span class="line">$reader.Close()</span><br><span class="line">$writer.Close()</span><br><span class="line"></span><br><span class="line"># Upload file</span><br><span class="line">Set-AzStorageBlobContent -File &quot;.\SJIS_$&#123;Blob&#125;&quot; -Container $Container -Blob &quot;SJIS_$&#123;Blob&#125;&quot; -Context $ctx</span><br></pre></td></tr></table></figure><p>以上のスクリプトをご利用いただくことで、ストレージ アカウントからファイルを取得し、文字コードを変更後にリネームして再度ストレージ アカウントへアップロードすることが可能でございます。</p><p>Azure Automation の設定としましては以上となります。</p><h2 id="Azure-Logic-Apps-の設定方法"><a href="#Azure-Logic-Apps-の設定方法" class="headerlink" title="Azure Logic Apps の設定方法"></a>Azure Logic Apps の設定方法</h2><p>次に、Azure Logic Apps 側の設定となります。<br>本記事では従量課金タイプの Azure Logic Apps にて、以下のアクションを利用いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/azureautomation/#%E3%82%B8%E3%83%A7%E3%83%96%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B">Azure Automation # ジョブを作成する</a></li></ul><p>こちらの設定につきましては以下の通りの設定を実施いただきます。<br><img src="/blog/LogicApps/Utf82SJIS/image07.png"></p><p>＜設定値＞<br>・サブスクリプション : Azure Automation の Automation アカウントが存在するサブスクリプション。<br>・リソース グループ :  Azure Automation の Automation アカウントが存在するリソース グループ。<br>・Automation アカウント : 先ほど Runbook を作成した Automation アカウント<br>・ジョブの待機 : 任意<br>・Runbook 名 : 先ほど作成した Runbook<br>– Runbook Parameter<br>・BLOB : 文字コードを変更したいファイル名。必要に応じて動的コンテンツでファイル名を指定願います。<br>・CONTAINER : Blob コンテナ名</p><p>以上より、先ほど作成した Runbook を Azure Logic Apps から呼び出すことが可能でございます。<br>こちらの ワークフローを実行することで、PowerShell で作り込める範囲には限りますが、既存のファイルに対して文字コードを変更することが可能でございます。</p><p>設定内容としては以上となります。<br>こちらを参考に、お客様の環境におきましても検証および設計試験等実施いただいたうえで採用要否についてご検討いただければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>前提条件</li><li>Azure Automation の設定方法とサンプルコード</li><li>Azure Logic Apps の設定方法</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Azure Logic Apps でファイル コンテンツを取り扱う場合に文字コードを任意の文字コードに設定されたい場合があるかと思います。&lt;br&gt;しかしながら、Azure Logic Apps では文字コードを変更することが出来かねる仕様となっております。&lt;/p&gt;
&lt;p&gt;例えば、以下のように Azure Portal のデザイナーからファイルを新規作成した場合はデザイナーの仕様上、ファイルは UTF-8 として作成されます。&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/Utf82SJIS/image01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;作成されたファイル&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/Utf82SJIS/image02.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;一方、以下の “BLOB コンテンツを取得する (V2)” ように既に作成されているファイルをコンテンツとして取得した場合、元の文字コードが維持されます。例えば、”test.csv” の文字コードが SJIS だった場合、SJIS のコンテンツとして扱われ、Azure Logic Apps では文字コードを変更することが出来ません。&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/Utf82SJIS/image03.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今回は Azure Logic Apps と Azure Automation を用いて、ファイルの文字コードを変更する小技をご案内しようと思います。&lt;br&gt;なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Automation" scheme="https://jpazinteg.github.io/blog/tags/Azure-Automation/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps の 条件アクションに関するTips</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/ConditionsTips/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/ConditionsTips/</id>
    <published>2022-12-21T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.550Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Azure Logic Apps には以下の条件アクションを利用することでプログラミングでいう If 文の様な処理を構築することが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/logic-apps/logic-apps-control-flow-conditional-statement">Azure Logic Apps のワークフロー アクションを制御する条件を追加する</a></li></ul><p>今回は上記の条件アクションを利用する際に、公開情報に記載がない上限値に関する Tips をお届けします！</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1． 設定可能な条件の最大数</li><li>2． 設定可能なグループの最大数</li><li>3． 1 つのグループの中で設定可能な条件の最大数</li><li>4． 1 つのグループの中で入れ子設定可能なグループの階層</li><li>5． ワークフロー定義の制限</li><li>まとめ</li></ul><h2 id="1．設定可能な条件の最大数"><a href="#1．設定可能な条件の最大数" class="headerlink" title="1．設定可能な条件の最大数"></a>1．設定可能な条件の最大数</h2><p>一つの条件アクションに指定可能な条件の最大値につきましては、以下の通り 10 個が上限値となり、それ以上は指定できない挙動となっております。</p><p><img src="/blog/LogicApps/ConditionsTips/image01.png"></p><p>1 つ目の Tips については以上となります。</p><h2 id="2．設定可能なグループの最大数"><a href="#2．設定可能なグループの最大数" class="headerlink" title="2．設定可能なグループの最大数"></a>2．設定可能なグループの最大数</h2><p>条件アクションには各条件をグループ化する機能がございます。</p><p><img src="/blog/LogicApps/ConditionsTips/image02001.png"></p><p>こちらの設定可能なグループの最大値につきましても同様に 10 個が上限値となり、それ以上は指定できない挙動となります。<br><img src="/blog/LogicApps/ConditionsTips/image02.png"></p><p>2 つ目の Tips については以上となります。</p><h2 id="3．1-つのグループの中で設定可能な条件の最大数"><a href="#3．1-つのグループの中で設定可能な条件の最大数" class="headerlink" title="3．1 つのグループの中で設定可能な条件の最大数"></a>3．1 つのグループの中で設定可能な条件の最大数</h2><p>条件とグループに関する上限値が分かったところで、これらを組み合わせた際の上限値について検証致しました。<br>こちらの結果につきましては、1 つのグループに対して最大 10 個の条件を指定することが可能でございました。</p><p><img src="/blog/LogicApps/ConditionsTips/image03.png"></p><p>その為、グループが 10 個、条件が各グループ内に 10 個と、合計 100 個まで条件を設定することが可能でございます。<br>3 つ目の Tips については以上となります。</p><h2 id="4．1-つのグループの中で入れ子設定可能なグループの階層"><a href="#4．1-つのグループの中で入れ子設定可能なグループの階層" class="headerlink" title="4．1 つのグループの中で入れ子設定可能なグループの階層"></a>4．1 つのグループの中で入れ子設定可能なグループの階層</h2><p>それでは、1 つのグループ内にいくつまでグループを入れ子に出来るか検証致しました。<br>結果としましては、以下の通り 5 階層までグループを入れ子に設定することが可能でございました。</p><p><img src="/blog/LogicApps/ConditionsTips/image04.png"></p><p>4 つ目の Tips については以上となります。</p><h2 id="5．ワークフロー定義の制限"><a href="#5．ワークフロー定義の制限" class="headerlink" title="5．ワークフロー定義の制限"></a>5．ワークフロー定義の制限</h2><p>本 Tips は条件アクションではなく以下の Logic Apps 自体のワークフロー定義の制限となりますが、<br>参考までに記載致します。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#workflow-definition-limits">Azure Logic Apps の制約と構成の参考文献 # ワークフロー定義の制限</a></li></ul><p>条件アクションの “True” もしくは “False” 内にさらに条件アクションを設定し、さらに入れ子に設定していく場合、8 個目の条件までは設定可能ですが、9　個目の条件については追加でのアクションが設定出来なくなります。<br><img src="/blog/LogicApps/ConditionsTips/image05.png"></p><p>5 つ目の Tips については以上となります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>1． 設定可能な条件の最大数</li><li>2． 設定可能なグループの最大数</li><li>3． 1 つのグループの中で設定可能な条件の最大数</li><li>4． 1 つのグループの中で入れ子設定可能なグループの階層</li><li>5． ワークフロー定義の制限</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Azure Logic Apps には以下の条件アクションを利用することでプログラミングでいう If 文の様な処理を構築することが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-JP/azure/logic-apps/logic-apps-control-flow-conditional-statement&quot;&gt;Azure Logic Apps のワークフロー アクションを制御する条件を追加する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は上記の条件アクションを利用する際に、公開情報に記載がない上限値に関する Tips をお届けします！&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps のバックアップ</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Backup/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-Backup/</id>
    <published>2022-11-17T07:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.610Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの山田です。<br>今回は、Logic Apps のワークフローにおけるバックアップについていくつかご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Logic Apps (Standard) でのバックアップ取得<ul><li>アプリ コンテンツのダウンロード</li><li>関数アプリ ファイルのダウンロード</li></ul></li><li>Logic Apps (従量課金) では</li><li>まとめ</li></ul><h2 id="Logic-Apps-Standard-でのバックアップ取得"><a href="#Logic-Apps-Standard-でのバックアップ取得" class="headerlink" title="Logic Apps (Standard) でのバックアップ取得"></a>Logic Apps (Standard) でのバックアップ取得</h2><h3 id="アプリ-コンテンツのダウンロード"><a href="#アプリ-コンテンツのダウンロード" class="headerlink" title="アプリ コンテンツのダウンロード"></a>アプリ コンテンツのダウンロード</h3><ol><li>Azure Portal から該当のLogic Apps (Standard) に移動します。</li><li>概要 をご覧いただきます。</li></ol><p><img src="/blog/LogicApps/LogicApps-Backup/image01.png"></p><p>上部に [アプリ コンテンツのダウンロード] というメニューがございます。<br>こちらから zip ファイル形式でダウンロードいただけます。</p><h3 id="関数アプリ-ファイルのダウンロード"><a href="#関数アプリ-ファイルのダウンロード" class="headerlink" title="関数アプリ ファイルのダウンロード"></a>関数アプリ ファイルのダウンロード</h3><p>Azure Functions のドキュメント内、「関数アプリ ファイルをダウンロードする」という説明があり、こちらをご利用可能でございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/deployment-zip-push#download-your-function-app-files">Azure Functions の zip プッシュ デプロイ | Microsoft Learn</a></p><blockquote><p>REST API の使用:</p><p><function_app> プロジェクトからファイルをダウンロードするには、以下の展開の GET API を使用します。<br>https://<function_app>.scm.azurewebsites.net/api/zip/site/wwwroot/</p></blockquote><p>したがいまして、この URL を Curl コマンドなどでご利用いただく場合は以下となります。</p><p><code>curl -X GET -H &quot;Authorization: Bearer &lt;Token&gt;&quot; https://&lt;function_app&gt;.azurewebsites.net/api/zip/site/wwwroot/ -o download.zip</code></p><p><code>&lt;Token&gt;</code> は取得した Bearer Token を入力いただきます。</p><p>Token の扱いには例として Azure CLI など、以下ドキュメントなどを参照いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/cli/azure/account?view=azure-cli-latest#az-account-get-access-token">az account | Microsoft Learn</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">az account get-access-token [--name]</span><br><span class="line">                            [--resource]</span><br><span class="line">                            [--resource-type &#123;aad-graph, arm, batch, data-lake, media, ms-graph, oss-rdbms&#125;]</span><br><span class="line">                            [--scope]</span><br><span class="line">                            [--tenant]</span><br></pre></td></tr></table></figure><p>またこのダウンロードした zip ファイルは zip デプロイでも使用できます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-cli#deploy-logic-app">Standard ロジック アプリの DevOps を設定する - Azure Logic Apps | Microsoft Learn</a></p><h2 id="Logic-Apps-従量課金-では"><a href="#Logic-Apps-従量課金-では" class="headerlink" title="Logic Apps (従量課金) では"></a>Logic Apps (従量課金) では</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/manage-logic-apps-with-azure-portal#manage-logic-app-versions">Azure portal でロジック アプリを管理する - Azure Logic Apps | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-Backup/image02.png"></p><p>ロジック アプリのメニューで、 [開発ツール] の下にある [バージョン] を選択します。こちらから履歴ごとにコードを確認可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps のワークフローにおけるバックアップについてご紹介しました。バージョン管理の必要場面において、参考になれば幸いです。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/deployment-zip-push#download-your-function-app-files">Azure Functions の zip プッシュ デプロイ | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-cli#deploy-logic-app">Standard ロジック アプリの DevOps を設定する - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/manage-logic-apps-with-azure-portal#manage-logic-app-versions">Azure portal でロジック アプリを管理する - Azure Logic Apps | Microsoft Learn</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Logic Apps のワークフローにおけるバックアップについていくつかご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>「繰り返し (Recurrence)」トリガーの起動時刻の差異について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/</id>
    <published>2022-11-06T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.614Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。<br>「繰り返し (Recurrence)」トリガーの想定される起動時刻と、実際の起動時刻に差異が生じる仕様の動作について説明します。</p><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>「繰り返し (Recurrence)」トリガーの想定される起動時刻と、実際の起動時刻に差異が生じる原因を知りたい方</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>「繰り返し (Recurrence)」トリガーに関連する公開情報は以下になります。<ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows">Azure Logic Apps ワークフローで繰り返し実行されるトリガーのスケジュール</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption">Azure Logic Apps で Recurrence トリガーを使用して繰り返しワークフローをスケジュール設定および実行する</a></li></ul></li></ul><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>「繰り返し (Recurrence)」トリガーでは、想定される起動時刻よりも、稀に 0.5 秒 ～ 1 秒程度前後して起動することがございます。</p><h2 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h2><p>「実行の履歴」タブでご確認いただける履歴では、分単位までの表示のため、1 分の差異が生じているように見受けられることがございます。<br>※ 以下の例ですと、想定起動時刻は 13:10 ですが、「実行の履歴」タブのログでは 13:09 に起動しております。<br><img src="/blog/LogicApps/ScheduleTriggerStrattime/runHistory.jpg"></p><p>「トリガーの履歴」タブにて該当履歴の詳細をご確認いただきますと、1 秒程度の差となっております。<br>こちらは当該トリガーの仕様の動作となります。<br><img src="/blog/LogicApps/ScheduleTriggerStrattime/triggerHistory1.jpg"></p><p><img src="/blog/LogicApps/ScheduleTriggerStrattime/triggerHistory2.jpg"></p><p>Logic Apps では、定刻に処理を開始できるよう、トリガー起動時刻の約 1 秒前にストレージの読み込みを開始いたしますが、<br>その読み込み処理が想定より早く終わった、または遅く終わったことにより、このような差異が生じることがございます。</p><h2 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h2><p>たとえば Logic Apps で現在時刻を取得し、日付によってその後の処理を分岐させるような処理の場合には、後続処理に影響が出る可能性がございます。</p><p>例) 本来 10/1 0:00 に起動するところを、9/30 23:59:59 に起動したことにより、現在の日付が 9/30 と取得され、後続処理に影響が出る等</p><p>そのため、たとえば当該トリガーの開始時刻を「10/1 0:00:00」ではなく、5 秒程度加算した「10/1 0:00:05」とする方法が考えられます。</p><p>または、分岐処理にて現在時刻に 5 秒程度加算し、その上で日付を取得するような方法も考えられます。<br>現在時刻に 5 秒加算するには、addSeconds 関数もご用意もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#addSeconds">addSeconds</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;br&gt;「繰り返し (Recurrence)」トリガーの想定される起動時刻と、実際の起動時刻に差異が生じる仕様の動作について説明します。&lt;/p&gt;
&lt;h2 id=&quot;こんな方におすすめです&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で簡単に日付や時刻を用いる</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-DateTime/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-DateTime/</id>
    <published>2022-11-04T07:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.614Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの山田です。<br>今回は、 Logic Apps における日付や時刻の取り扱いについて、特に日本国内での利用に便利な Tips をご紹介いたします！</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Logic Apps で日付や時刻を用いる</li><li>タイム ゾーンの変換を行う</li><li>フォーマットを指定して日時を表示する</li><li>期間計算を行う</li></ul><h2 id="Logic-Apps-で日付や時刻を用いる"><a href="#Logic-Apps-で日付や時刻を用いる" class="headerlink" title="Logic Apps で日付や時刻を用いる"></a>Logic Apps で日付や時刻を用いる</h2><p>大きく以下の操作方法がございます。</p><ul><li>日付/時刻 コネクタ: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#manage-or-manipulate-data">組み込みコネクタの概要 - Azure Logic Apps | Microsoft Learn</a></li><li>関数: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#date-and-time-functions">式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn</a></li></ul><h2 id="タイム-ゾーンの変換を行う"><a href="#タイム-ゾーンの変換を行う" class="headerlink" title="タイム ゾーンの変換を行う"></a>タイム ゾーンの変換を行う</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#manage-or-manipulate-data">日付/時刻 コネクタ</a> から「タイム ゾーンの変換」が行えます。</p><p><img src="/blog/LogicApps/LogicApps-DateTime/image000.png"> </p><p>ほか、<a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#converttimezone">convertTimeZone</a>、<a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#convertFromUtc">convertFromUtc</a>、<a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#converttoutc">converttoUtc</a> という関数を利用できます。</p><h2 id="フォーマットを指定して日時を表示する"><a href="#フォーマットを指定して日時を表示する" class="headerlink" title="フォーマットを指定して日時を表示する"></a>フォーマットを指定して日時を表示する</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#convertFromUtc">convertFromUtc</a> という関数を利用できます。</p><ul><li>例: <code>convertFromUtc(utcNow(),&#39;Tokyo Standard Time&#39;,&#39;yyyy/MM/dd HH:mm:ss&#39;)</code></li></ul><p><img src="/blog/LogicApps/LogicApps-DateTime/image004.png"> </p><h2 id="期間計算を行う"><a href="#期間計算を行う" class="headerlink" title="期間計算を行う"></a>期間計算を行う</h2><p>対象日時同士の比較を行える <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#datedifference">dateDifference</a> という関数を利用できます。</p><ul><li>例: <code>int(split(dateDifference(formatDateTime(&#39;10/01/2022&#39;),utcNow()),&#39;.&#39;)[0])</code></li></ul><p><img src="/blog/LogicApps/LogicApps-DateTime/image001.png"> </p><p><img src="/blog/LogicApps/LogicApps-DateTime/image002.png"> </p><p><img src="/blog/LogicApps/LogicApps-DateTime/image003.png"> </p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上、簡単にご案内いたしました。</p><ul><li>日付/時刻 コネクタ: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#manage-or-manipulate-data">組み込みコネクタの概要 - Azure Logic Apps | Microsoft Learn</a></li><li>関数: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#date-and-time-functions">式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn</a></li></ul><p>本記事が少しでも理解の足がかりになりましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの山田です。&lt;br&gt;今回は、 Logic Apps における日付や時刻の取り扱いについて、特に日本国内での利用に便利な Tips をご紹介いたします！&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps の式関数で Unix Time を取得する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/UnixTime/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/UnixTime/</id>
    <published>2022-11-02T01:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.626Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。 Azure Integration サポート チームの大田です。<br>本記事では、Logic Apps の式関数を組み合わせて Unix Time を取得する方法について説明いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>今回の記事では従量課金版ロジック アプリを利用しますが、スタンダード版のロジック アプリでも問題ありません。</li></ul><h2 id="Unix-Time-の取得サンプル"><a href="#Unix-Time-の取得サンプル" class="headerlink" title="Unix Time の取得サンプル"></a>Unix Time の取得サンプル</h2><p>Logic Apps が備える Unix Time と類似の機能として ticks 関数がございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#ticks">ticks 関数に関する公開情報</a></li></ul><p>1 tick はグレゴリオ暦の 0001 年 1 月 1 日午前 12 時 00 分 00 分からの 100 ナノ秒単位の経過時間を表します。<br>ticks 関数は指定のタイムスタンプの tick 数を返す関数でございます。</p><p>また、Unix Time は UTC 時間の 1970 年 1 月 1 日午前 12 時 00 分 00 分からの経過秒数を表します。<br>そのため、1970 年 1 月 1 日午前 12 時 00 分 00 分の tick 数と対象日時の tick 数に関する差分を 100 ナノ秒単位から秒単位に変換する事で対象日時の Unix Time を取得する事が可能です。<br>100 ナノ秒単位から秒単位への変換は 10^7 で割る事により行えます。</p><p>下記が現在日時（UTC 時間）の Unix Time を取得するサンプルとなります。<br><img src="/blog/LogicApps/UnixTime/unixTime_CurrentTime.png"></p><ul><li>名前：unixTime</li><li>種類：整数</li><li>値：@div(sub(ticks(utcnow()),ticks(‘1970-01-01’)), 10000000)</li></ul><p>また下記のように値を設定する事で、指定日付の Unix Time の取得を行えます。<br>本サンプルでは UTC 時間の 2022 年 10 月 31 日午前 12 時 00 分 00 分の Unix Time を取得しております。<br><img src="/blog/LogicApps/UnixTime/unixTime_SpecificTime.png"></p><ul><li>名前：unixTime</li><li>種類：整数</li><li>値：@div(sub(ticks(formatDateTime(‘2022-10-31’)),ticks(‘1970-01-01’)), 10000000)</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では Logic Apps の式関数で Unix Time を取得する方法について説明いたしました。 Unix Time は Rest API で多く活用されているため、本記事がお客様のシステム構築の一助になりますと幸いです。</p><h2 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h2><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#ticks">ticks 関数に関する公開情報</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#sub">sub 関数に関する公開情報</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#div">div 関数に関する公開情報</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#formatdatetime">formatDateTime 関数に関する公開情報</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。 Azure Integration サポート チームの大田です。&lt;br&gt;本記事では、Logic Apps の式関数を組み合わせて Unix Time を取得する方法について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Unix Time" scheme="https://jpazinteg.github.io/blog/tags/Unix-Time/"/>
    
  </entry>
  
  <entry>
    <title>ワークフロー式関数 xml() を用いて 10 進数の値を変換するときの動作について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/XmlBehaviorWithNumbers/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/XmlBehaviorWithNumbers/</id>
    <published>2022-10-27T06:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.626Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの継松です。<br>Azure Logic Apps では式関数を使用し、ワークフローの実行中にアクションから取得した値の参照や処理を行うことができます。<br>今回は、式関数の 1 つである xml() の動作についてご紹介します。<br>特に、 10 進数の値が含まれる場合に生じる事象および事象の回避策についてご案内します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>xml() 関数について</li><li>10 進数の値を変換するときの動作について</li><li>事象の回避策について</li><li>まとめ</li></ul><h2 id="xml-関数について"><a href="#xml-関数について" class="headerlink" title="xml() 関数について"></a>xml() 関数について</h2><p>xml(‘<value>‘) では、JSON オブジェクトを含む文字列の XML バージョンを返します。</p><p>例<br>xml(‘<name>Sophia Owen</name>‘)</p><p>結果 : </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Sophia Owen<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn #xml<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#xml">https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#xml</a></p><h2 id="10-進数の値を変換するときの動作について"><a href="#10-進数の値を変換するときの動作について" class="headerlink" title="10 進数の値を変換するときの動作について"></a>10 進数の値を変換するときの動作について</h2><p>以下に示す通り、この xml() 関数を使用して 10 進数の  JSON オブジェクトを含む値を変換すると、浮動小数点の精度に問題が生じる場合がございます。</p><p><img src="/blog/LogicApps/XmlBehaviorWithNumbers/issuewithxml.png"></p><p>こちらはこの xml() 関数で使用される以下のサード パーティの NewtonSoft パッケージによる既知の問題です。</p><p>JToken.ToObject(T) Method (JsonSerializer)<br><a href="https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Linq_JToken_ToObject__1_1.htm">https://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Linq_JToken_ToObject__1_1.htm</a></p><p>NewtonSoft は浮動小数点数を .NET double 型にロードします。これにより、浮動小数点を文字列に変換する際に精度の損失が生じます。</p><p>JsonSerializerSettings.FloatParseHandling Property<br><a href="https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonSerializerSettings_FloatParseHandling.htm">https://www.newtonsoft.com/json/help/html/P_Newtonsoft_Json_JsonSerializerSettings_FloatParseHandling.htm</a></p><h2 id="事象の回避策について"><a href="#事象の回避策について" class="headerlink" title="事象の回避策について"></a>事象の回避策について</h2><p>現時点では、以下に示す通り、値を文字列として指定することで、事象を回避いただけます。</p><p><img src="/blog/LogicApps/XmlBehaviorWithNumbers/issuewithxml_workaround.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では xml() 関数の動作および 10 進数の値を変換する場合の事象回避策についてご紹介いたしました。<br>他にも、便利な式関数が複数ご用意ございますので、下記の公開資料からご参照いただけますと幸いでございます。</p><p>式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference">https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの継松です。&lt;br&gt;Azure Logic Apps では式関数を使用し、ワークフローの実行中にアクションから取得した値の参照や処理を行うことができます。&lt;br&gt;今回は、式関数の 1 つである xml() の動作についてご紹介します。&lt;br&gt;特に、 10 進数の値が含まれる場合に生じる事象および事象の回避策についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Issues" scheme="https://jpazinteg.github.io/blog/tags/Issues/"/>
    
  </entry>
  
  <entry>
    <title>Excel Onlne コネクタでテーブルが一覧表示されない場合の回避策</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/ExcelOnlineGetaRow/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/ExcelOnlineGetaRow/</id>
    <published>2022-10-17T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.554Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>Logic Apps で利用できる Excel Online  (Business) コネクタにて、Excel の行の情報を取得する際にアクションの設定で対象のテーブルが表示されない場合がございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/excelonlinebusiness/#%E8%A1%8C%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B">Excel Online (Business) - 行を取得する</a><br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image001.png"></li></ul><p>今回は、その事象が発生した際の対処法についてご案内いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>事象の詳細について</li><li>事象が発生した際の回避策について</li><li>まとめ</li></ul><h2 id="事象の詳細について"><a href="#事象の詳細について" class="headerlink" title="事象の詳細について"></a>事象の詳細について</h2><p>本記事の事象につきましては、以下の操作を行った際に発生する事象となります。</p><p>１．コネクタを選択する。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image002.png"></p><p>２．対象の Excel ファイルが存在する “場所” “ドキュメントライブラリ” “ファイル” を選択する。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image003.png"></p><p>３．プルダウンより “テーブル” を選択するが、表示されない。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image001.png"></p><p>以上が本記事の事象となります。<br>なお、こちらにつきましては Logic Apps のみで発生する既知の事象でございます。Power Automate では事象は発生いたしません。<br>また、お客様にはご不便をおかけしますが、上記の振る舞いについてはプログラムの変更等の予定はございません。<br>その為、事象が発生した際の回避策につきまして、以下に記載いたします。</p><h2 id="事象が発生した際の回避策について"><a href="#事象が発生した際の回避策について" class="headerlink" title="事象が発生した際の回避策について"></a>事象が発生した際の回避策について</h2><p>上記事象が発生した際の回避策につきましては、”テーブル” の項目に直接 Excel ファイルに設定いただいておりますテーブルの値をカスタム値として入力いただくことで、テーブルの設定および後続の項目について設定することが可能でございます。<br>具体的な操作方法につきましては以下の通りでございます。</p><p>＜操作方法＞<br>１．Excel ファイルに設定しているテーブルの値を控える。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image004.png"></p><p>２．コネクタを選択し、対象の Excel ファイルが存在する “場所” “ドキュメントライブラリ” “ファイル” を選択する。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image003.png"></p><p>３．”テーブル” のプルダウンより、行を取得したいテーブルの値をカスタム値入力する。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image005.png"></p><p><img src="/blog/LogicApps/ExcelOnlineGetaRow/image006.png"></p><p>４．上記の通り設定し、対象の “キー列” が表示されることを確認する。<br><img src="/blog/LogicApps/ExcelOnlineGetaRow/image007.png"></p><p>以上より、行の取得アクションにてテーブルの値を設定することが可能となります。<br>お手数をおかけして誠に申し訳ございませんが、本事象が発生しました際には、当ブログの手順にて回避策をお試しいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>事象の詳細について</li><li>事象が発生した際の回避策について</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://docs.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://docs.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;Logic Apps で利用できる Excel Online  (Business) コネクタにて、Excel の行の情報を取得する際にアクションの設定で対象のテーブルが表示されない場合がございます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/connectors/excelonlinebusiness/#%E8%A1%8C%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B&quot;&gt;Excel Online (Business) - 行を取得する&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/ExcelOnlineGetaRow/image001.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は、その事象が発生した際の対処法についてご案内いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Excel Onlne" scheme="https://jpazinteg.github.io/blog/tags/Excel-Onlne/"/>
    
  </entry>
  
  <entry>
    <title>ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/</id>
    <published>2022-10-13T15:00:00.000Z</published>
    <updated>2023-05-11T07:23:23.614Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>Standard Logic Apps （シングルテナント） を作成するにはストレージ アカウントを利用する必要がございます。<br>しかし、ファイアウォールで通信制御を行ったストレージ アカウント配下には Azure Portal から Standard Logic Apps を構築することが出来ません。<br>今回は ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提</li><li>ARM テンプレートの編集</li><li>まとめ</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>今回の記事については以下の情報を参考にしております。</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account#deploy-using-azure-portal-or-visual-studio-code">Azure portal または Visual Studio Code を使用してデプロイする</a></p></li><li><p><a href="https://github.com/VeeraMS/LogicApp-deployment-with-Secure-Storage">Deploy Logic App with Secured storage account having Private Endpoints</a></p></li></ul><p>なお、今回の手順では ARM テンプレートを Azure PowerShell にてデプロイ致します。</p><p>また、予めストレージ アカウントおよび Standard Logic Apps を構築する VNet を作成いただく必要がございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-account-create?tabs=azure-portal">ストレージ アカウントを作成する</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/virtual-network/manage-virtual-network">仮想ネットワークの作成、変更、削除</a></li></ul><p>上記の環境が構築されており、かつストレージ アカウントがプライベート エンドポイントに接続されていることを前提に本手順を実施いただきます。<br>テーブル、キュー、BLOB、ファイル ストレージ サービスごとに異なるプライベート エンドポイントを作成することで、プライベートな環境から接続することが可能となります。</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account#deploy-using-azure-portal-or-visual-studio-code">Azure portal または Visual Studio Code を使用してデプロイする</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-private-endpoints">Azure Storage のプライベート エンドポイントを使用する</a></p></li></ul><h2 id="ARM-テンプレートの編集"><a href="#ARM-テンプレートの編集" class="headerlink" title="ARM テンプレートの編集"></a>ARM テンプレートの編集</h2><p>本手順では、以下の通り ARM テンプレートを作成いたします。<br>・Parameters.json<br>・DeployResources.json</p><p>Parameters.json についてはお客様環境に併せて変更を加えていただく必要がございますが、DeployResources.json については特に変更は不要でございます。</p><p>＜Parameters.json＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#&quot;,</span><br><span class="line">    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,</span><br><span class="line">    &quot;parameters&quot;: &#123;</span><br><span class="line">        &quot;logicAppFEname&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;Standard-LogicAppsTest&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appInsightName&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;TestAppInsight&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;fileShareName&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;Standard-LogicAppsTest-Share&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;location&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;Central US&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;use32BitWorkerProcess&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;serverFarmId&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;/subscriptions/（お客様のサブスクリプション ID）/resourceGroups/（お客様のリソースグループ）/providers/Microsoft.Web/serverfarms/（お客様の App Service プラン）&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;contentStorageAccountName&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;teststorageaccount&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;vnetName&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;StandardLogicAppsNW&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;subnetName&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;LogicAppsSubnet&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>＜Parameters.json の各設定値＞<br>・logicAppFEname : 作成する Standard Logic Apps 名<br>・appInsightName : Standard Logic Apps が接続する既存の Application Insights 名<br>・fileShareName : 既存のファイル共有名<br>・location : Standard Logic Apps を構築するリージョン<br>・use32BitWorkerProcess : そのままで問題ありません<br>・serverFarmId: 利用する既存の App service プランのリソース ID<br>・contentStorageAccountName : 利用する既存のストレージアカウント名<br>・vnetName : ストレージアカウントおよび Standard Logic Apps が接続する既存の Vnet 名<br>・subnetName : Logic Apps が接続する既存のサブネット名 </p><p>＜DeployResources.json（こちらは変更を加えなくても結構です）＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$schema&quot;: &quot;https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#&quot;,</span><br><span class="line">    &quot;contentVersion&quot;: &quot;1.0.0.0&quot;,</span><br><span class="line">    &quot;parameters&quot;: &#123;</span><br><span class="line">        &quot;logicAppFEname&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;fileShareName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;appInsightName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;use32BitWorkerProcess&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;Bool&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;location&quot;: &#123;</span><br><span class="line">            &quot;defaultValue&quot;: &quot;[resourceGroup().location]&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;,</span><br><span class="line">            &quot;metadata&quot;: &#123;</span><br><span class="line">                &quot;description&quot;: &quot;Location to deploy resources to.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;serverFarmId&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;contentStorageAccountName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;vnetName&quot;: &#123;</span><br><span class="line">            &quot;defaultValue&quot;: &quot;VirtualNetwork&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;,</span><br><span class="line">            &quot;metadata&quot;: &#123;</span><br><span class="line">                &quot;description&quot;: &quot;Name of the VNET that the Function App and Storage account will communicate over.&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;subnetName&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;String&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;resources&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;type&quot;: &quot;Microsoft.Web/sites&quot;,</span><br><span class="line">            &quot;apiVersion&quot;: &quot;2018-11-01&quot;,</span><br><span class="line">            &quot;name&quot;: &quot;[parameters(&#x27;logicAppFEname&#x27;)]&quot;,</span><br><span class="line">            &quot;location&quot;: &quot;[parameters(&#x27;location&#x27;)]&quot;,</span><br><span class="line">            &quot;tags&quot;: &#123;&#125;,</span><br><span class="line">            &quot;kind&quot;: &quot;functionapp,workflowapp&quot;,</span><br><span class="line">            &quot;identity&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;SystemAssigned&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;properties&quot;: &#123;</span><br><span class="line">                &quot;name&quot;: &quot;[parameters(&#x27;logicAppFEname&#x27;)]&quot;,</span><br><span class="line">                &quot;siteConfig&quot;: &#123;</span><br><span class="line">                    &quot;appSettings&quot;: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;FUNCTIONS_EXTENSION_VERSION&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;~3&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;FUNCTIONS_WORKER_RUNTIME&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;node&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;APPINSIGHTS_INSTRUMENTATIONKEY&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[reference(resourceId(&#x27;Microsoft.Insights/components&#x27;, parameters(&#x27;appInsightName&#x27;)), &#x27;2015-05-01&#x27;).InstrumentationKey]&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;APPLICATIONINSIGHTS_CONNECTION_STRING&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[reference(resourceId(&#x27;Microsoft.Insights/components&#x27;, parameters(&#x27;appInsightName&#x27;)), &#x27;2015-05-01&#x27;).ConnectionString]&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;AzureWebJobsStorage&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[concat(&#x27;DefaultEndpointsProtocol=https;AccountName=&#x27;,parameters(&#x27;contentStorageAccountName&#x27;),&#x27;;AccountKey=&#x27;,listKeys(resourceId(&#x27;Microsoft.Storage/storageAccounts&#x27;, parameters(&#x27;contentStorageAccountName&#x27;)), &#x27;2019-06-01&#x27;).keys[0].value,&#x27;;EndpointSuffix=&#x27;,&#x27;core.windows.net&#x27;)]&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;WEBSITE_CONTENTAZUREFILECONNECTIONSTRING&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[concat(&#x27;DefaultEndpointsProtocol=https;AccountName=&#x27;,parameters(&#x27;contentStorageAccountName&#x27;),&#x27;;AccountKey=&#x27;,listKeys(resourceId(&#x27;Microsoft.Storage/storageAccounts&#x27;, parameters(&#x27;contentStorageAccountName&#x27;)), &#x27;2019-06-01&#x27;).keys[0].value,&#x27;;EndpointSuffix=&#x27;,&#x27;core.windows.net&#x27;)]&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;WEBSITE_CONTENTSHARE&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[toLower(parameters(&#x27;fileShareName&#x27;))]&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;APP_KIND&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;workflowApp&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;WEBSITE_VNET_ROUTE_ALL&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;1&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;AzureFunctionsJobHost__extensionBundle__id&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;Microsoft.Azure.Functions.ExtensionBundle.Workflows&quot;,</span><br><span class="line">                            &quot;slotSetting&quot;: false</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;AzureFunctionsJobHost__extensionBundle__version&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;[1.*, 2.0.0)&quot;,</span><br><span class="line">                            &quot;slotSetting&quot;: false</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;name&quot;: &quot;WEBSITE_CONTENTOVERVNET&quot;,</span><br><span class="line">                            &quot;value&quot;: &quot;1&quot;,</span><br><span class="line">                            &quot;slotSetting&quot;: false</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;use32BitWorkerProcess&quot;: &quot;[parameters(&#x27;use32BitWorkerProcess&#x27;)]&quot;,</span><br><span class="line">                    &quot;cors&quot;: &#123;</span><br><span class="line">                        &quot;allowedOrigins&quot;: [</span><br><span class="line">                            &quot;https://afd.hosting.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://afd.hosting-ms.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://hosting.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://ms.hosting.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://ema-ms.hosting.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://ema.hosting.portal.azure.net&quot;,</span><br><span class="line">                            &quot;https://ema.hosting.portal.azure.net&quot;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;serverFarmId&quot;: &quot;[parameters(&#x27;serverFarmId&#x27;)]&quot;,</span><br><span class="line">                &quot;clientAffinityEnabled&quot;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;resources&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;networkconfig&quot;,</span><br><span class="line">                    &quot;apiVersion&quot;: &quot;2018-11-01&quot;,</span><br><span class="line">                    &quot;name&quot;: &quot;virtualNetwork&quot;,</span><br><span class="line">                    &quot;location&quot;: &quot;[parameters(&#x27;location&#x27;)]&quot;,</span><br><span class="line">                    &quot;dependsOn&quot;: [</span><br><span class="line">                        &quot;[parameters(&#x27;logicAppFEname&#x27;)]&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;properties&quot;: &#123;</span><br><span class="line">                        &quot;subnetResourceId&quot;: &quot;[resourceId(&#x27;Microsoft.Network/virtualNetworks/subnets&#x27;,parameters(&#x27;vnetName&#x27;), parameters(&#x27;subnetName&#x27;))]&quot;,</span><br><span class="line">                        &quot;swiftSupported&quot;: true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CORS の設定につきましては、特に必須の設定ではございませんので、変更しなくてもデプロイ可能です。お客様のご要件に合わせまして適宜ご変更ください。</p><p>上記ファイルを作成いただきましたら、任意のフォルダにファイルを格納し、以下のようにコマンドを実行いただきます。</p><p>・ARM テンプレート デプロイ サンプルコマンド</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New-AzResourceGroupDeployment -Name DeployTest01 -ResourceGroupName kymiwaTestLogicApps2 -TemplateFile .\DeployResources.json -TemplateParameterFile .\Parameters.json</span><br></pre></td></tr></table></figure><p>New-AzResourceGroupDeployment コマンドの詳細については以下の公開情報に記載がございますので、併せてご確認いただければと存じます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/powershell/module/az.resources/new-azresourcegroupdeployment?view=azps-8.3.0">New-AzResourceGroupDeployment</a></li></ul><p>コマンド実行後、以下のように ProvisioningState が “Succeeded” になっていることが確認できれば成功となります。<br><img src="/blog/LogicApps/SecBlobStandardLA/image000.png"> </p><p>Azure Portal でも Standard Logic Apps が作成されていることを確認いただけます。<br><img src="/blog/LogicApps/SecBlobStandardLA/image001.png"> </p><p>以上の手順にて、ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成することが可能でございます。<br>なお、上記のテンプレートについてはあくまでも本記事におけるサンプルとなります。<br>商用環境でご利用いただく場合につきましては、お客様の責任において十分に設計および検証をいただいたうえで採用要否について判断をいただければと存じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>事前準備</li><li>ARM テンプレートの編集</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://docs.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://docs.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;Standard Logic Apps （シングルテナント） を作成するにはストレージ アカウントを利用する必要がございます。&lt;br&gt;しかし、ファイアウォールで通信制御を行ったストレージ アカウント配下には Azure Portal から Standard Logic Apps を構築することが出来ません。&lt;br&gt;今回は ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Standard-Logic-Apps/"/>
    
  </entry>
  
</feed>
