<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Japan Azure Integration Support Blog</title>
  
  <subtitle>日本マイクロソフトの Azure Integration に関するサポート情報のブログです。</subtitle>
  <link href="https://jpazinteg.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jpazinteg.github.io/blog/"/>
  <updated>2024-10-31T07:20:24.392Z</updated>
  <id>https://jpazinteg.github.io/blog/</id>
  
  <author>
    <name>Japan Azure Integration Support Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>従量課金版 Azure Logic Apps の料金体系を理解するポイント</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/</id>
    <published>2024-11-01T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.392Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は 従量課金版 について記載しております。今回は、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>従量課金版 Azure Logic Apps の料金体系を理解するポイント<ul><li>Logic Apps の価格表 (2024 年 10 月の例) </li><li>アクション と コネクタ について</li><li>データ保持 について</li><li>メトリック について</li><li>Azure Logic Apps の使用量の計測、課金、価格のしくみ</li><li>料金計算ツール について</li></ul></li><li>まとめ</li></ul><h2 id="従量課金版-Azure-Logic-Apps-の料金体系を理解するポイント"><a href="#従量課金版-Azure-Logic-Apps-の料金体系を理解するポイント" class="headerlink" title="従量課金版 Azure Logic Apps の料金体系を理解するポイント"></a>従量課金版 Azure Logic Apps の料金体系を理解するポイント</h2><h3 id="Logic-Apps-の価格表-2024-年-10-月の例"><a href="#Logic-Apps-の価格表-2024-年-10-月の例" class="headerlink" title="Logic Apps の価格表 (2024 年 10 月の例)"></a>Logic Apps の価格表 (2024 年 10 月の例)</h3><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a></p><p>以下例では 2024 年 10 月の料金に基づいて記載しております。主要なところを (1)～(4) に分けてお考えいただけます。</p><ol><li>アクション = ¥0.004055 × 実行回数 (ただし、組み込みアクションの最初の 4000 回は毎月無料です。)</li><li>Standard コネクタ = ¥0.018825 × 通話 (呼び出し) 回数</li><li>エンタープライズ コネクタ = ¥0.144805 × 通話 (呼び出し) 回数</li><li>データ保持 = ¥17.38 GB/月</li></ol><p>通話 とはチャンクなどにより 1 つのアクションで複数回呼び出し (Call、通信) される場合があるための単位とお考えください。</p><p>価格表:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-1.png"></p><h3 id="アクション-と-コネクタ-について"><a href="#アクション-と-コネクタ-について" class="headerlink" title="アクション と コネクタ について"></a>アクション と コネクタ について</h3><p>前提といたしまして、Logic Apps のコネクタには、組み込みコネクタとマネージド コネクタがあります。<br>従量課金版における価格記載の「アクション」(価格表の (1)) とは、組み込みコネクタの実行数を意味した記述となります。一方の「Standard コネクタ」、「エンタープライズ コネクタ」はマネージド コネクタとなります。<br>組み込みコネクタとマネージド コネクタの機能的な比較は以下にございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/connectors/introduction#built-in-connectors-versus-managed-connectors">コネクタとは - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>組み込みコネクタは、直接 Azure Logic Apps 内でネイティブで動作するよう作られています。<br>マネージド コネクタは、Microsoft によって Azure でデプロイ、ホスト、管理されます。<br>マネージド コネクタはほとんどが、基になるサービスまたはシステムが Azure Logic Apps と通信するために使用する API のプロキシまたはラッパーを提供します。</p></blockquote><p>マネージド コネクタのうち、コネクタの種類が Standard コネクタ (価格表の (2)) であるか、エンタープライズ コネクタ (価格表の (3)) であるかにつきましては、コネクタの公開情報から確認いただけます。</p><p>Standard コネクタ 例: <a href="https://learn.microsoft.com/ja-jp/connectors/azureblob/">Azure Blob Storage - Connectors | Microsoft Learn</a><br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-2.png"></p><p>エンタープライズ コネクタ 例: <a href="https://learn.microsoft.com/ja-jp/connectors/mq/">MQ - Connectors | Microsoft Learn</a><br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-3.png"></p><p>これを トリガー と アクション に分けておまとめしますと以下となります。</p><p><strong>&lt;トリガー&gt;</strong></p><ul><li>組み込みコネクタのトリガー：無課金</li><li>Standard コネクタのトリガー：<strong>価格表の (2)</strong> に該当</li><li>エンタープライズ コネクタのトリガー： <strong>価格表の (3)</strong> に該当</li></ul><p><strong>&lt;アクション&gt;</strong></p><ul><li>組み込みコネクタのアクション： <strong>価格表の (1)</strong> に該当</li><li>Standard コネクタのアクション： <strong>価格表の (2)</strong> に該当</li><li>エンタープライズ コネクタのアクション： <strong>価格表の (3)</strong> に該当</li></ul><h3 id="データ保持-について"><a href="#データ保持-について" class="headerlink" title="データ保持 について"></a>データ保持 について</h3><p><strong>価格表の(4)</strong> 、データ保持 については以下となります。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/plan-manage-costs#storage-operations-and-costs">Azure Logic Apps のコストの管理を計画する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps では、すべてのストレージ操作に Azure Storage を使用します。 マルチテナントの Azure Logic Apps では、すべてのストレージの使用およびコストがロジック アプリに関連付けられます。 データ保持とストレージ消費によって固定価格モデルを使用するコストが発生します。 たとえば、実行履歴からの入力と出力はバックグラウンド ストレージに保持されます。これは、ロジック アプリから独立して作成、管理、アクセスするストレージ リソースとは異なります。</p></blockquote><p>メトリックの Billing Usage for Storage Consumption Executions が、課金対象のデータを保持した際のデータ サイズとなります。<br>またこのデータ サイズは、Logic Apps 実行履歴のアクションの入力と出力のテキスト サイズからも計算いただけます。</p><p>以上 (1)～(4) が、従量課金版 Azure Logic Apps の料金体系の主要なところとなります。</p><h3 id="メトリック-について"><a href="#メトリック-について" class="headerlink" title="メトリック について"></a>メトリック について</h3><p>ここまでの内容を踏まえメトリックにて、以下を確認いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/reference/supported-metrics/microsoft-logic-workflows-metrics">サポートされているメトリック - Microsoft.Logic/Workflows - Azure Monitor | Microsoft Learn</a></p><ul><li>課金対象のアクションの実行 … Billable Action Executions</li><li>課金対象のトリガーの実行 … Billable Trigger Executions</li><li>ネイティブ操作実行の利用状況に応じた課金 … Billing Usage for Native Operation</li><li>標準コネクタ実行の利用状況に応じた課金 … Billing Usage for Standard Connector</li><li>ストレージ消費の利用状況に応じた課金 … Billing Usage for Storage Consumption</li><li>課金対象の実行の合計数 … Total Billable Executions</li></ul><p>例:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-4.png"></p><h3 id="Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ"><a href="#Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ" class="headerlink" title="Azure Logic Apps の使用量の計測、課金、価格のしくみ"></a>Azure Logic Apps の使用量の計測、課金、価格のしくみ</h3><p>また Azure Logic Apps および関連リソースにおける、測定、課金、および各価格モデルのしくみについて、以下ドキュメントにて網羅的にご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing">使用量の測定、課金、価格 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps を使用して、スケーリング可能な自動化された統合ワークフローをクラウドに作成して実行できます。この記事では、Azure Logic Apps および関連リソースにおける、測定、課金、および各価格モデルのしくみについて説明します。具体的な価格、コスト計画、さまざまなホスティング環境などの情報については、次のコンテンツを確認してください。</p></blockquote><h3 id="料金計算ツール-について"><a href="#料金計算ツール-について" class="headerlink" title="料金計算ツール について"></a>料金計算ツール について</h3><p>ほか 料金計算ツール にて概算を確認いただけます。</p><p><a href="https://azure.microsoft.com/ja-jp/pricing/calculator/?service=logic-apps">料金計算ツール | Microsoft Azure</a></p><p>例:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-5.png"></p><p>最後にはなりますが、ツールに基づくお見積りは概算となり、具体的なリソースのご利用状況によって増減する可能性もございます。Logic Apps の調査をご依頼の際は以下記事もご参考に、本テクニカル サポートへお問合せいただければ大変うれしく思います。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/">Logic Apps の調査時にサポート エンジニアへ連携するログの取得方法について | Japan Azure Integration Support Blog</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a> のドキュメントを基に、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介しました。Logic Apps のご利用検討時、皆様のご参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は 従量課金版 について記載しております。今回は、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ のトランザクション メッセージ</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqTransaction/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqTransaction/</id>
    <published>2024-07-09T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.492Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスのメッセージの種類についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ のトランザクション メッセージ</li><li>MSMQ のトランザクション メッセージ送信</li><li>MSMQ のトランザクション メッセージ再試行</li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><ul><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> </li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/">MSMQ で End2End ログを取得する手順 | Japan Azure Integration Support Blog</a></li></ul><p>上記にも関連記事がございます。</p><h2 id="MSMQ-のトランザクション-メッセージ"><a href="#MSMQ-のトランザクション-メッセージ" class="headerlink" title="MSMQ のトランザクション メッセージ"></a>MSMQ のトランザクション メッセージ</h2><p>トランザクション キューで扱われるメッセージと、非トランザクション キューで扱われるメッセージの違いについてご説明します。端的にトランザクション キューでは、「順序を保証する」点が特徴になります。</p><p>以下のようなドキュメントをご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/dotnet/framework/wcf/feature-details/queuing-in-wcf#msmq">WCF でのキュー - WCF | Microsoft Learn</a></p><blockquote><p>MSMQ では、キューをトランザクションまたは非トランザクションとして設定できます。<br>トランザクション キューの場合、トランザクションによるメッセージの取り込みと配信が可能です。<br>メッセージは、キューに永続的に格納されます。トランザクション キューに送信されたメッセージは、正確に 1 回だけ、順序どおりに転送されます。 </p></blockquote><blockquote><p>非トランザクション キューを使用すると、揮発性メッセージと非揮発性メッセージの両方を送信できます。非トランザクション キューに送信されたメッセージには、信頼できる転送保証がありません。したがって、メッセージが失われる可能性があります。</p></blockquote><p>それぞれ以下から確認いただけます。</p><h3 id="トランザクション-キュー"><a href="#トランザクション-キュー" class="headerlink" title="トランザクション キュー"></a>トランザクション キュー</h3><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-1.png"></p><h3 id="非トランザクション-キュー"><a href="#非トランザクション-キュー" class="headerlink" title="非トランザクション キュー"></a>非トランザクション キュー</h3><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-2.png"></p><h2 id="MSMQ-のトランザクション-メッセージ送信"><a href="#MSMQ-のトランザクション-メッセージ送信" class="headerlink" title="MSMQ のトランザクション メッセージ送信"></a>MSMQ のトランザクション メッセージ送信</h2><p>以下は、トランザクション キューに PowerShell にてメッセージを送信するサンプルです。</p><h3 id="トランザクション-メッセージ送信コマンド例"><a href="#トランザクション-メッセージ送信コマンド例" class="headerlink" title="トランザクション メッセージ送信コマンド例"></a>トランザクション メッセージ送信コマンド例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=OS:&lt;送信先 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$tran = new-object System.Messaging.MessageQueueTransaction;</span><br><span class="line">$tran.Begin()</span><br><span class="line">$mq.Send(&quot;Hello transaction 1&quot;, $tran)</span><br><span class="line">$mq.Send(&quot;Hello transaction 2&quot;, $tran)</span><br><span class="line">$tran.Commit()</span><br></pre></td></tr></table></figure><h3 id="非トランザクション-メッセージ送信コマンド例"><a href="#非トランザクション-メッセージ送信コマンド例" class="headerlink" title="非トランザクション メッセージ送信コマンド例"></a>非トランザクション メッセージ送信コマンド例</h3><p>以下記事で非トランザクション キューに PowerShell にてメッセージを送信するサンプルを紹介しています。合わせてご覧ください。</p><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></p><h2 id="MSMQ-のトランザクション-メッセージ再試行"><a href="#MSMQ-のトランザクション-メッセージ再試行" class="headerlink" title="MSMQ のトランザクション メッセージ再試行"></a>MSMQ のトランザクション メッセージ再試行</h2><p>コマンドの違いとしては上の通り、メッセージの送信処理の前後でトランザクションの開始、コミットを記述することで「順序通りに送る」ことを保証できる点にありますが、内部的にも、トランザクション メッセージは以下のような振る舞いをいたします。</p><p>MSMQのトランザクション メッセージは、トランザクションの完了を確認するために内部の order_queue$ というキューを使用します。通常、トランザクションの order_queue$ への ack は、MSMQ クライアントが確立したのと同じ TCP セッションで送り返されます。</p><p>トランザクション メッセージを送信すると、受信したサーバーから送信元の order_queue$ へ返答を送り返していることが分かります。</p><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-3.png"></p><p>一方、一般的なネットワーク・通信エラーやその他の問題が発生した場合、TCP セッションが切断される状況もあります。その場合、送信された返答は送信キューに入れられますが、MSMQ 送信メッセージの送信再試行ポリシーで再試行されます。</p><p><a href="https://learn.microsoft.com/ja-jp/previous-versions/windows/it-pro/windows-2000-server/cc957504(v=technet.10)?redirectedfrom=MSDN">SeqResend13Time | Microsoft Learn</a></p><blockquote><p>Determines how often outgoing, transacted messages are resent because they are unacknowledged.<br>The value of this entry specifies the interval between resends for the first three times the message is resent. If, after the third resend, the sender still does not receive an acknowledgement from the intended recipient, the message is resent at intervals determined by the values of the following entries: SeqResend46Time , SeqResend79Time , SeqResend10Time</p></blockquote><blockquote><p>(翻訳) 送信されたトランザクション・メッセージが再送される頻度を指定します。このエントリの値は、メッセージが再送される最初の3回の再送間隔を指定します。3回目の再送の後、送信者がまだ意図した受信者から確認応答を受け取らない場合、メッセージは以下のエントリの値で決まる間隔で再送されます： SeqResend46Time , SeqResend79Time , SeqResend10Time</p></blockquote><p>既定では、MSMQ は以下の間隔でメッセージの再送信を試みます。</p><ul><li>SeqResend13Time:試行1-3 回:30秒:<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957504(v=technet.10)?redirectedfrom=MSDN">SeqResend13Time | Microsoft Learn</a></li><li>SeqResend46Time:試行4-6 回:300秒(5分):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957505(v=technet.10)?redirectedfrom=MSDN">SeqResend46Time | Microsoft Learn</a></li><li>SeqResend79Time:試行7-9 回:1800秒(30分):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957506(v=technet.10)?redirectedfrom=MSDN">SeqResend79Time | Microsoft Learn</a></li><li>SeqResend10Time:試行10+ 回:21600秒(6時間):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957503(v=technet.10)?redirectedfrom=MSDN">SeqResend10Time | Microsoft Learn</a></li></ul><p>関連: <a href="https://learn.microsoft.com/en-us/previous-versions/windows/desktop/msmq/ms699870(v=vs.85)">Message Queuing Transactions | Microsoft Learn</a></p><p>以上、トランザクション メッセージの特徴として、参考になりましたら幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ のトランザクション メッセージ</li><li>MSMQ のトランザクション メッセージ送信</li><li>MSMQ のトランザクション メッセージ再試行</li></ul><p>トランザクション メッセージの活用と、オンプレミス製品 MSMQ についてご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスのメッセージの種類についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-AOAI/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-AOAI/</id>
    <published>2024-04-05T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.388Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>今回は、Azure Logic Apps でパブリック プレビューとなっている Azure OpenAI コネクタを利用する方法を、英語記事を引用する形でご紹介いたします。</p><p>参考: <a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> </p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー<ul><li>紹介</li><li>ワークフロー</li><li>認証</li><li>その他のリソース</li></ul></li><li>まとめ</li></ul><h2 id="Standard-Logic-Apps-で-Azure-OpenAI-アプリ内コネクタがパブリック-プレビュー"><a href="#Standard-Logic-Apps-で-Azure-OpenAI-アプリ内コネクタがパブリック-プレビュー" class="headerlink" title="Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー"></a>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー</h2><h3 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h3><p>「<a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a>」</p><p>この記事は、Azure OpenAI と Azure AI Search の2つの新しい組み込みコネクタの紹介記事です。</p><blockquote><p>Azure OpenAI と AI Search を使用することで、Logic Apps 内で Azure Open-AI と AI Search サービスによって提供されるジェネレーティブ AI 機能とエンタープライズ データとサービスを統合し、強力な自動化を構築できるようになります。</p></blockquote><blockquote><p>これらの新しいコネクタは、接続キー、AAD、マネージド ID など複数の認証タイプをサポートしているほか、ファイアウォール内で Azure OpenAI および Azure Search エンドポイントへの接続もサポートしています。</p></blockquote><h3 id="ワークフロー"><a href="#ワークフロー" class="headerlink" title="ワークフロー"></a>ワークフロー</h3><blockquote><p>Azure OpenAI Service は、GPT-4、GPT-4 Turbo with Vision、GPT-3.5-Turbo、Embeddings モデルシリーズを含む OpenAI の強力な言語モデルへのアクセスを提供します。</p></blockquote><p>以下のようなアクションが用意されています。</p><ul><li>Gets multiple embeddings</li><li>Gets a single embedding</li><li>Gets the chat completions</li></ul><p>ここでは 「Gets the chat completions」 でチャット メッセージをやり取りしてみます。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-1.png"></p><p>パラメーター The Deployment Identifier は Azure OpenAI の「デプロイ名」と対応します。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-4.png"></p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-5.png"></p><p>Message Item には以下形式でチャット メッセージを入力します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;こんにちは！Logic Apps はどんなところが便利ですか？&quot;,</span><br><span class="line">    &quot;role&quot;: &quot;user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のようにメッセージが返ってきました。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-3.png"></p><h3 id="認証"><a href="#認証" class="headerlink" title="認証"></a>認証</h3><p>以下認証をご利用いただけます。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-2.png"></p><ul><li>キーベース: キーベースの認証として Azure OpenAI サービスで生成されたキーを用います。</li><li>Azure Active Directory OAuth: テナント、クライアント識別子、パスワードなどの Active Directory パラメータを使用して、コネクタを認証できます。</li><li>マネージドID: AI サービス用にマネージド ID を作成し、その ID を使用してコネクタを認証できます。</li></ul><h3 id="その他のリソース"><a href="#その他のリソース" class="headerlink" title="その他のリソース"></a>その他のリソース</h3><p><a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> に紹介されておりますとおり、GitHub、Youtube に関連リソースがございます。</p><ul><li><a href="https://github.com/Azure/logicapps/tree/master/ai-sample">logicapps/ai-sample at master · Azure/logicapps</a></li><li><a href="https://www.youtube.com/watch?v=tiU5yCvMW9o">(240) Learn how to build AI applications using logic apps - YouTube</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> の記事を基に、Standard Logic Apps でパブリック プレビューとなった Azure OpenAI アプリ内コネクタのごくシンプルなご利用方法をご紹介しました。Logic Apps のワークフローと皆様の Azure OpenAI テクノロジーの活用に、ご参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Azure Logic Apps でパブリック プレビューとなっている Azure OpenAI コネクタを利用する方法を、英語記事を引用する形でご紹介いたします。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584&quot;&gt;Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure OpenAI" scheme="https://jpazinteg.github.io/blog/tags/Azure-OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>Start/Stop VMs v2 で Logic Apps が即時起動してしまう事象について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/startStopVmsV2ScheduleTrigger/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/startStopVmsV2ScheduleTrigger/</id>
    <published>2023-12-12T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.476Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Start/Stop VMs v2 機能利用時に、Logic Apps が即時起動することを避けたい方</li><li>「繰り返し (Recurrence)」トリガーを利用している場合に、即時起動を避けたい方</li></ul><h2 id="Start-Stop-VMs-v2"><a href="#Start-Stop-VMs-v2" class="headerlink" title="Start/Stop VMs v2"></a>Start/Stop VMs v2</h2><p>Start/Stop VMs v2 につきましては、以下の公開情報やブログがあります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/overview">Start/Stop VMs v2 の概要</a></li><li>参考ドキュメント : <a href="https://jpazpaas.github.io/blog/2021/11/29/introduce-Start-Stop-VMs-v2.html">Start/Stop VMs v2 のご紹介</a></li></ul><p>Start/Stop VMs v2 は、以下よりデプロイすることが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2 を Azure サブスクリプションにデプロイする</a></li><li>参考ドキュメント : <a href="/blog/main/README/">Start/Stop VMs during off-hours overview (V2)</a></li></ul><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Start/Stop VMs v2 をデプロイしますと、以下のリソースが作成されます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger01.jpg"></p><p>Logic Apps は無効化された状態でデプロイされておりますが、この状態で有効化しますとトリガーが即時に起動いたします。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger02.jpg"></p><h2 id="「繰り返し-Recurrence-」トリガーが即時起動してしまう原因"><a href="#「繰り返し-Recurrence-」トリガーが即時起動してしまう原因" class="headerlink" title="「繰り返し (Recurrence)」トリガーが即時起動してしまう原因"></a>「繰り返し (Recurrence)」トリガーが即時起動してしまう原因</h2><p>本事象は、仕様の動作になります。</p><p>Logic Apps がデプロイされた時点では、「繰り返し (Recurrence)」トリガーの [開始時刻] パラメーターが設定されていないため、<br>有効化されたタイミングで即座に実行するよう、予約済みの初回実行のジョブが既に作成されていることに起因いたします。</p><p>※ デプロイ後かつ有効化前に [開始時刻] をご設定いただいた場合でも、既にジョブが作成されておりますので、有効化後に即時起動いたします。<br>当該ツールのデプロイ方法およびトリガーの仕様に起因した事象でございます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger03.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption#add-the-recurrence-trigger">Azure Logic Apps で Recurrence トリガーを使用して繰り返しワークフローをスケジュール設定および実行する # 繰り返しトリガーを追加する</a></li></ul><p>なお、Start/Stop VMs v2 機能ではなく、Logic Apps を Azure ポータル上で手動で作成し、初めて「繰り返し (Recurrence)」トリガーを設定した場合におきましても、<br>[開始時刻] が設定されていない場合には Logic Apps 保存後に即時に起動いたします。<br>即時起動後には、設定された値に基づいてトリガーが起動いたします。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger04.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows#patterns-for-start-date-and-time">Azure Logic Apps ワークフローで繰り返し実行されるトリガーのスケジュール # 開始日時のパターン</a></li></ul><h2 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h2><p>以下の例では、Start/Stop VMs v2 における即時起動の回避策についてご案内いたします。<br>考え方といたしましては、デプロイ時に予約されたジョブをリセットする方法になります。</p><p>有効化する前に、トリガー名を一時的に変更し、[開始時刻] パラメーターの設定をご実施ください。<br>トリガー名を変更することにより、予約済みのジョブがリセットされ、[開始時刻] に従ってトリガーを起動するよう新しくジョブを設定することが可能です。</p><ol><li>[Start/Stop VMs during off hours - V2] をデプロイ</li><li>ロジック アプリ [ststv2_vms_Scheduled_start] を開き、ロジック アプリ デザイナーを開く</li><li>[Recurrence] トリガーにて、トリガー名を変更 (Reccurence1)</li><li>[Recurrence] トリガーにて、以下のパラメーターを変更 (開始時刻は変更必須ですが、「設定時刻 (時間)」および「設定時刻 (分)」は必要に応じて変更ください。)<br>・タイム ゾーン : (UTC+09:00) 大阪、札幌、東京<br>・設定時刻<br>・開始時刻: 2022-11-06T14:00:00 (過去、未来いずれも設定いただくことが可能です。詳細については、下記の資料をご参考ください)</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows#patterns-for-start-date-and-time">Azure Logic Apps ワークフローで繰り返し実行されるトリガーのスケジュール # 開始日時のパターン</a><br>※ 開始時刻の項目は [Add new parameter] より追加いただけます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger05.jpg"></li></ul><p><strong>タイムゾーンを指定した場合、[開始時刻] の最後に「Z」は不要です。</strong><br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption#add-the-recurrence-trigger">Azure Logic Apps で Recurrence トリガーを使用して繰り返しワークフローをスケジュール設定および実行する # 繰り返しトリガーを追加する</a></li></ul><ol start="5"><li>ワークフローを保存<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger07.jpg"></li><li>[Recurrence] トリガーのトリガー名を戻し、改めてワークフローを保存 (動作上、戻す必要はありません)</li><li>VM 指定のコードを編集し、ワークフローを保存</li><li>有効化</li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>以下、「繰り返し (Recurrence)」トリガーに関連した記事になります。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/">Logic Apps で日付や時刻を判定してワークフローを制御する</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Azure Portal からファイアウォール設定配下のストレージ アカウントに Standard Logic Apps を作成する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLAPortal/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLAPortal/</id>
    <published>2023-12-05T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.404Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>以前、ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内いたしました。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/">ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成</a></p><p>今回は、Azure Portal から手動で Standard タイプの Logic Apps をファイアウォール配下のストレージ アカウント配下に接続する方法についてご案内します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>Standard Logic Apps のデプロイ</li><li>ストレージ アカウントの設定</li><li>VNet 統合の設定</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>本ブログ記事の前提として、予め VNet を作成し、サブネットを二つ用意いたします。これは、ストレージ アカウント側のプライベート エンドポイントと Standard Logic Apps 側の VNet 統合で利用するものになります。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/virtual-network/manage-virtual-network">仮想ネットワークの作成、変更、削除</a><br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image001.png"> </li></ul><p>ストレージ アカウントについては汎用 V2 アカウントを利用します。その為、ストレージ アカウントが汎用 V1 の場合は以下のようにストレージ アカウントの種類を変更いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-account-upgrade?tabs=azure-portal">汎用 v2 ストレージ アカウントにアップグレードする</a><br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image002.png"> </li></ul><p>また、Standard Logic Apps をデプロイするまでは、対象のストレージ アカウントについてはパブリック アクセスを許可しておく必要がございます。<br>プライベート エンドポイントの作成や VNet 統合の設定については本記事の中で説明します。</p><h2 id="Standard-Logic-Apps-のデプロイ"><a href="#Standard-Logic-Apps-のデプロイ" class="headerlink" title="Standard Logic Apps のデプロイ"></a>Standard Logic Apps のデプロイ</h2><p>始めに、Azure Portal の [ロジック アプリ] のメニューより、Standard Logic Apps のリソースをデプロイします。リージョンや 価格プランなどは任意ですが、[プラン] - [プランの種類] は 消費ではなく Standard を選択してください。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image003.png"> </p><p>ホスティング タブではストレージ アカウントを指定する画面になりますが、こちらはお客様の任意のストレージ アカウントを選択してください。<br>本例では新規作成し、作成後にストレージ アカウントの種類を汎用 V2 に変更します。（Standard Logic Apps のリソース作成画面で構築するストレージ アカウントについては、2023 年 12 月現在で汎用 V1 で作成されるため。）<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image004.png"> </p><p>ネットワーク、監視、タグについては本例ではデフォルトのまま設定し、[確認および作成] 画面にてリソースを作成します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image005.png"> </p><p>以下のように Standard Logic Apps のリソースが構築できていれば完了です。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image006.png"> </p><h2 id="ストレージ-アカウントの設定"><a href="#ストレージ-アカウントの設定" class="headerlink" title="ストレージ アカウントの設定"></a>ストレージ アカウントの設定</h2><p>次に、ストレージ アカウントの種類を汎用 V2 に変更した後、ファイアウォール設定およびプライベート エンドポイントの設定を実施します。今回は、パブリック ネットワーク アクセスを [無効] に設定します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image007.png"> </p><p>このタイミングで少し時間を置き、Standard Logic Apps を再起動すると、以下のように概要画面で接続エラーが発生するかと思います。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image008.png"> </p><p><code>System.Private.CoreLib: Access to the path &#39;C:\home\data\Functions\secrets\Sentinels&#39; is denied.</code></p><p>このメッセージは、Standard Logic Apps がネットワークのルーティングやアプリケーション設定など、何らかの原因でストレージ アカウントに正しく接続できていない為に発生するエラーとなります。<br>その為、当該エラーメッセージが確認された際には、Standard Logic Apps が正しくストレージ アカウントに疎通できるようなネットワーク設定になっているかを確認いただく必要がございますので、参考までに言及いたします。<br>今回の記事ではこれからプライベート エンドポイントを設定してまいりますのでこちらは想定される通りのエラー メッセージとなります。</p><p>次に、ストレージ アカウントにプライベート エンドポイントを設定します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image009.png"> </p><p>プライベート エンドポイントについては、前回の記事でもご案内しました通り、[blob] [table] [queue] [file] の四つが必須になります。GUI ではこれらを一度に作成することが出来ませんので、お手数ですが、それぞれに対してのリソース作成操作をお願いします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-private-endpoints">Azure Storage のプライベート エンドポイントを使用する</a></li></ul><p>＜設定例＞<br>・対象サブリソースを選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image010.png"></p><p>・サブネットを選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image011.png"></p><p>・プライベート DNS 統合を実施するか選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image012.png"></p><p>全てのプライベート エンドポイントが設定できると以下のように四つリソースが表示されます（プライベート エンドポイント名は任意）。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image013.png"></p><p>以上でストレージ アカウント側の設定は完了です。なお、環境変数の “WEBSITE_CONTENTSHARE” に指定しているファイル共有がストレージ アカウントのファイル共有に存在している必要が有りますのでご留意ください。</p><h2 id="VNet-統合の設定"><a href="#VNet-統合の設定" class="headerlink" title="VNet 統合の設定"></a>VNet 統合の設定</h2><p>次に、Standard Logic Apps のリソースの画面に遷移し、[設定] - [ネットワーク] より、[送信トラフィックの構成] の [仮想ネットワーク統合] のリンク (未構成) を選択します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image014.png"></p><p>その後、[仮想ネットワーク統合の追加] ボタンを選択し、任意のサブネットを選択し、[接続] ボタンを選択します。その際、空のサブネットを選択する必要がございますのでご留意ください。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image015.png"></p><p>以下のような画面が表示されましたら設定は完了です。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image016.png"></p><p>最後に、VNet 統合にかかる環境変数の設定を行い、画面下部の [適用] ボタンを選択して保存します。<br>Standard Logic Apps の [設定] - [環境変数] より、[アプリ設定] を選択し、以下の値を設定します。<br><strong>・設定値：WEBSITE_CONTENTOVERVNET</strong><br><strong>・値：1</strong></p><p><img src="/blog/LogicApps/SecBlobStandardLAPortal/image017.png"></p><p>こちらは Standard Logic Apps が接続するストレージ アカウントが VNet に制限されている場合に設定する値となります。詳しくは以下の App Service の環境変数に関する公開情報をご覧ください。<br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/reference-app-settings?tabs=kudu,dotnet#networking">Azure App Service の環境変数とアプリ設定</a></p><p>環境変数を保存し、少し時間を置いて概要画面より [最新の情報に更新] ボタンにて画面を更新すると、最初に表示されていたエラーメッセージ (System.Private.CoreLib: Access to the path ‘C:\home\data\Functions\secrets\Sentinels’ is denied.) が表示されなくなり、Standard Logic Apps のワークフローの作成や実行が可能となります。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image018.png"></p><p>ワークフローも問題なく作成できることを確認。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image019.png"></p><p><img src="/blog/LogicApps/SecBlobStandardLAPortal/image020.png"></p><p>以上の手順にて、ファイアウォール設定配下のストレージ アカウントに Standard Logic Apps を作成することが可能でございます。<br>ただし、前回との違いについては、Standard Logic Apps を作成する際に、事前にストレージ アカウントのパブリック アクセスを許可しておく必要が有ります。<br>前回は既にファイアウォール設定を有効化しているストレージ アカウントに対してデプロイを実施しておりましたが、Azure Portal より新規で Standard Logic Apps を構築する際は、ストレージ アカウントを予めパブリック アクセスが可能な状態とし、Standard Logic Apps をデプロイしてから、ファイアウォール設定やプライベート エンドポイントの設定、VNet 統合の設定を有効化する必要がございますので予めご留意ください。</p><p>なお、上記の手順についてはあくまでも本記事におけるサンプルとなります。<br>商用環境でご利用いただく場合につきましては、お客様の責任において十分に設計および検証をいただいたうえで採用要否について判断をいただければと存じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>前提条件</li><li>Standard Logic Apps のデプロイ</li><li>ストレージ アカウントの設定</li><li>VNet 統合の設定</li><li>まとめ</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;以前、ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内いたしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/&quot;&gt;ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は、Azure Portal から手動で Standard タイプの Logic Apps をファイアウォール配下のストレージ アカウント配下に接続する方法についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Standard-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps の調査時にサポート エンジニアへ連携するログの取得方法について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/</id>
    <published>2023-11-30T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.444Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>お客様環境の Logic Apps にて障害や何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。<br>今回は、取得いただきたいログの内容と、その取得方法についてご案内申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>従量課金タイプの場合</li><li>Standard タイプの場合</li><li>その他関連ログ</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>まず、本 Logic Apps 製品のお問合せをいただく場合、Azure Portal にログインいただいたうえで、事象の発生しているサブスクリプションからお問合せいただきますようお願いいたします。<br>Unified 契約や Azure 製品のサポート受けられる適切なサポート契約をお持ちの場合でも、M365 管理ポータルや直接電話でのお問合せなど Azure Portal 以外からお問合せいただくと詳細な調査が出来ませんので、その際は別途 Azure Portal からお問合せいただくようお願いさせていただく場合がございます。<br>また、弊社にて詳細ログを調査するためには事象発生から 28 日以内にログを提供いただきますようお願いいたします。28 日を経過すると詳細な調査が出来ない場合がございますので予めご留意ください。</p><h2 id="従量課金タイプの場合"><a href="#従量課金タイプの場合" class="headerlink" title="従量課金タイプの場合"></a>従量課金タイプの場合</h2><p>従量課金タイプの場合、以下の情報についてご提供をお願いいたします。</p><ol><li>当該 Azure のサブスクリプション ID</li><li>当該ロジック アプリのリソース情報</li><li>当該ロジック アプリの識別子</li><li>当該ロジック アプリの実行時間</li><li>当該ロジック アプリの入出力のスクリーンショット</li><li>当該ロジック アプリの未加工入出力</li><li>当該ロジック アプリのコードビュー</li></ol><p>それでは取得方法についてご案内申し上げます。</p><h3 id="1．当該-Azure-のサブスクリプション-ID"><a href="#1．当該-Azure-のサブスクリプション-ID" class="headerlink" title="1．当該 Azure のサブスクリプション ID"></a>1．当該 Azure のサブスクリプション ID</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該 Azure のサブスクリプション ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] より、概要欄のサブスクリプション ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image001.png"></p><h3 id="2．当該ロジック-アプリのリソース情報"><a href="#2．当該ロジック-アプリのリソース情報" class="headerlink" title="2．当該ロジック アプリのリソース情報"></a>2．当該ロジック アプリのリソース情報</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該のリソース ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [設定 - プロパティ] に遷移いただき「リソース ID」に設定されているリソース ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image002.png"></p><h3 id="3-当該ロジック-アプリの識別子"><a href="#3-当該ロジック-アプリの識別子" class="headerlink" title="3. 当該ロジック アプリの識別子"></a>3. 当該ロジック アプリの識別子</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの識別子については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴の [識別子] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image003.png"></p><h3 id="4-当該ロジック-アプリの実行時間"><a href="#4-当該ロジック-アプリの実行時間" class="headerlink" title="4. 当該ロジック アプリの実行時間"></a>4. 当該ロジック アプリの実行時間</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの実行時間については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴の [開始時間] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image004.png"></p><h3 id="5-当該ロジック-アプリの入出力のスクリーンショット"><a href="#5-当該ロジック-アプリの入出力のスクリーンショット" class="headerlink" title="5. 当該ロジック アプリの入出力のスクリーンショット"></a>5. 当該ロジック アプリの入出力のスクリーンショット</h3><p><u><strong>提供方法：イメージ形式</strong></u><br>当該ロジック アプリの入出力のスクリーンショットについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴を選択し、[ロジック アプリの実行] にて対象のアクションを展開いただき、対象アクションの入力と出力が表示されているスクリーンショットを取得します。アクションの全体が分かるように取得いただきますようお願いします。</p><p>例 1<br><img src="/blog/LogicApps/TroubleLogCollection/image005.png"></p><p>例 2<br><img src="/blog/LogicApps/TroubleLogCollection/image006.png"></p><p>例 3<br><img src="/blog/LogicApps/TroubleLogCollection/image006-1.png"></p><h3 id="6-当該ロジック-アプリの未加工入出力"><a href="#6-当該ロジック-アプリの未加工入出力" class="headerlink" title="6. 当該ロジック アプリの未加工入出力"></a>6. 当該ロジック アプリの未加工入出力</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの未加工入出力については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴を選択し、[ロジック アプリの実行] にて対象のアクションを展開いただき、対象アクションの入力及び出力にて [未加工入力の表示]、[未加工出力の表示] を押下いただき出力されるテキストの内容をご確認下さい。未加工出力が存在していない場合、その旨をご連絡ください。</p><p>・未加工入力の表示（未加工出力の表示がある場合はそちらも）のリンクを選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image007.png"></p><p>・表示されているテキストの情報を全てコピーしてテキストファイルなどに貼り付けます。<br><img src="/blog/LogicApps/TroubleLogCollection/image008.png"></p><h3 id="7-当該ロジック-アプリのコードビュー"><a href="#7-当該ロジック-アプリのコードビュー" class="headerlink" title="7. 当該ロジック アプリのコードビュー"></a>7. 当該ロジック アプリのコードビュー</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリのコードビューについて、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [開発ツール - ロジック アプリ コード ビュー] にて表示されますコード全文をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image009.png"></p><p>以上を取得できましたら、弊社サポート エンジニアより連携させていただきます ファイル アップロード サイトにログをアップロード頂きますようお願いいたします。<br>従量課金タイプのログ取得については以上となります。</p><p>続いて、Standard タイプの Logic Apps に関するログの提供依頼についてご案内申し上げます。</p><h2 id="Standard-タイプの場合"><a href="#Standard-タイプの場合" class="headerlink" title="Standard タイプの場合"></a>Standard タイプの場合</h2><p>Standard タイプの場合、以下の情報についてご提供をお願いいたします。<br>ただし、Standard タイプの場合はステートフルのワークフローを利用しているとログが出力されませんので予めご留意ください。</p><ol><li>当該 Azure のサブスクリプション ID</li><li>当該ロジック アプリのリソース情報</li><li>当該ロジック アプリの識別子</li><li>当該ロジック アプリの実行時間</li><li>当該ロジック アプリの入出力のスクリーンショット</li><li>当該ロジック アプリの未加工入出力</li><li>当該ロジック アプリのコンテンツ</li></ol><p>それでは取得方法についてご案内申し上げます。</p><h3 id="1．当該-Azure-のサブスクリプション-ID-1"><a href="#1．当該-Azure-のサブスクリプション-ID-1" class="headerlink" title="1．当該 Azure のサブスクリプション ID"></a>1．当該 Azure のサブスクリプション ID</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該 Azure のサブスクリプション ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] より、概要欄のサブスクリプション ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image013.png"></p><h3 id="2．当該ロジック-アプリのリソース情報-1"><a href="#2．当該ロジック-アプリのリソース情報-1" class="headerlink" title="2．当該ロジック アプリのリソース情報"></a>2．当該ロジック アプリのリソース情報</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該のリソース ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [設定 - プロパティ] に遷移いただき「リソース ID」に設定されているリソース ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image014.png"></p><h3 id="3-当該ロジック-アプリの識別子-1"><a href="#3-当該ロジック-アプリの識別子-1" class="headerlink" title="3. 当該ロジック アプリの識別子"></a>3. 当該ロジック アプリの識別子</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの識別子については、 [Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴の [識別子] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image015.png"></p><h3 id="4-当該ロジック-アプリの実行時間-1"><a href="#4-当該ロジック-アプリの実行時間-1" class="headerlink" title="4. 当該ロジック アプリの実行時間"></a>4. 当該ロジック アプリの実行時間</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの実行時間については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴の [開始時間] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image016.png"></p><h3 id="5-当該ロジック-アプリの入出力のスクリーンショット-1"><a href="#5-当該ロジック-アプリの入出力のスクリーンショット-1" class="headerlink" title="5. 当該ロジック アプリの入出力のスクリーンショット"></a>5. 当該ロジック アプリの入出力のスクリーンショット</h3><p><u><strong>提供方法：イメージ形式</strong></u><br>当該ロジック アプリの入出力のスクリーンショットについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴を選択し、対象のアクションを展開いただき、対象アクションの入力と出力が表示されているスクリーンショットを取得します。画面の下部に見切れている部分も含めて、アクションの全体が分かるように取得いただきますようお願いします。</p><p>例 1<br><img src="/blog/LogicApps/TroubleLogCollection/image018.png"></p><p>例 2<br><img src="/blog/LogicApps/TroubleLogCollection/image019.png"></p><h3 id="6-当該ロジック-アプリの未加工入出力-1"><a href="#6-当該ロジック-アプリの未加工入出力-1" class="headerlink" title="6. 当該ロジック アプリの未加工入出力"></a>6. 当該ロジック アプリの未加工入出力</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの未加工入出力については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴を選択し、対象のアクションを展開いただき、対象アクションの入力及び出力にて [未加工入力の表示]、[未加工出力の表示] を押下いただき出力されるテキストの内容をご確認下さい。未加工出力が存在していない場合、その旨をご連絡ください。</p><p>・未加工入力の表示（未加工出力の表示がある場合はそちらも）のリンクを選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image026.png"></p><p>・表示されているテキストの情報を全てコピーしてテキスト ファイルなどに貼り付けます。<br><img src="/blog/LogicApps/TroubleLogCollection/image027.png"></p><h3 id="7-当該ロジック-アプリのコンテンツ"><a href="#7-当該ロジック-アプリのコンテンツ" class="headerlink" title="7. 当該ロジック アプリのコンテンツ"></a>7. 当該ロジック アプリのコンテンツ</h3><p><u><strong>提供方法：圧縮ファイル形式</strong></u><br>当該ロジック アプリのコンテンツについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] - [アプリ コンテンツのダウンロード]より、アプリ設定を含めたコンテンツ一式の圧縮ファイルを提供下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image028.png"></p><p><img src="/blog/LogicApps/TroubleLogCollection/image029.png"></p><h2 id="その他関連ログ"><a href="#その他関連ログ" class="headerlink" title="その他関連ログ"></a>その他関連ログ</h2><p>必要に応じて、お客様のブラウザの操作における HAR ファイルや Standard Logic Apps のネットワーク キャプチャを取得いただく場合がございます。<br>その際の取得方法について、以下に記載いたしますので参考までにご確認下さい。</p><h3 id="HAR-ファイルの取得依頼"><a href="#HAR-ファイルの取得依頼" class="headerlink" title="HAR ファイルの取得依頼"></a>HAR ファイルの取得依頼</h3><p><u><strong>提供方法：har 拡張子の形式</strong></u></p><ol><li><p>Microsoft Edge を起動します。</p></li><li><p>[F12] キーを押下し、表示されるペイン内にて、[Network] タブに移動して、データをキャプチャーしていることを確認します。<br>※ 以下のように、赤い丸が表示されておりましたら、キャプチャーが開始されております。<br><img src="/blog/LogicApps/TroubleLogCollection/image010.png"></p></li><li><p>[ログの保持 (もしくは Preserve log) ] にチェックを入れます。その後、以下のボタンをクリックして、現在のログを削除します。<br><img src="/blog/LogicApps/TroubleLogCollection/image011.png"></p></li><li><p>今回事象の発生している動作や、弊社サポートより連携させていただいた操作を実施し、結果を確認します。</p></li><li><p>[Network] タブに戻り、[Export HAR] をクリックします。<br><img src="/blog/LogicApps/TroubleLogCollection/image012.png"></p></li></ol><p>エクスポートした HAR ファイルを弊社までお寄せください。</p><h3 id="Standard-Logic-Apps-のパケットキャプチャ"><a href="#Standard-Logic-Apps-のパケットキャプチャ" class="headerlink" title="Standard Logic Apps のパケットキャプチャ"></a>Standard Logic Apps のパケットキャプチャ</h3><p><u><strong>提供方法：圧縮ファイル形式</strong></u></p><ol><li><p>以下のサイトより、「使ってみる」ボタンを押下し、事象の発生している Standard Logic Apps を参照可能なユーザーでサインインします。<br><a href="https://learn.microsoft.com/ja-jp/rest/api/appservice/web-apps/start-network-trace?tabs=HTTP">Web Apps - Start Network Trace</a><br><img src="/blog/LogicApps/TroubleLogCollection/image020.png"></p></li><li><p>ネットワーク キャプチャの採取を開始します。設定項目については公開情報にも記載がございますが以下の通りとなります。<br>設定できましたら、画面下部の「実行」ボタンを押下します。</p></li></ol><p>・name : Standard Logic Apps の名前<br>・resourceGroupName : Standard Logic Apps が存在するリソース グループ名<br>・subscriptionId : Standard Logic Apps が存在するサブスクリプション ID<br>・api-version : 変更なし<br><img src="/blog/LogicApps/TroubleLogCollection/image021.png"></p><ol start="3"><li><p>対象の Standard Logic Apps を開き、ワークフローを実行して事象を再現します。</p></li><li><p>ワークフローの実行が完了しましたら、以下のサイトより、「使ってみる」ボタンを押下し、ネットワーク キャプチャの採取を終了します。こちらも設定項目は同様でございます。<br><a href="https://learn.microsoft.com/ja-JP/rest/api/appservice/web-apps/stop-network-trace?tabs=HTTP">Web Apps - Stop Network Trace</a></p></li><li><p>ネットワーク キャプチャを取得します。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - 高度なツール] と遷移し、「移動」ボタンを押下して Kudu を開きます。<br><img src="/blog/LogicApps/TroubleLogCollection/image022.png"></p></li><li><p>Kudu にログインできましたら、画面上部より「Debug console &gt; CMD」を選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image023.png"></p></li><li><p>停止いただくと、以下の通り / LogFiles / networktrace 内に Zip ファイルが生成されますので、出力されたファイル全てダウンロードします。<br><img src="/blog/LogicApps/TroubleLogCollection/image024.png"></p></li><li><p>ファイルのダウンロードは以下の通り画面左のダウンロード アイコンからお願いいたします。<br><img src="/blog/LogicApps/TroubleLogCollection/image025.png"></p></li></ol><p>ダウンロードした圧縮ファイルを弊社までお寄せください。</p><p>なお、上記でご案内いたしましたログについては、テキスト ファイルに個別に分割いただいても構いませんし、Excel ファイルにまとめていただいても結構でございますが、Word ファイルにまとめられると容量の都合上内容を確認出来ない場合がございますので、可能な限り Word での提供は避けていただけると幸いでございます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。Logic Apps の調査をご依頼の際はこちらの内容を基に本テクニカルサポートへお問合せいただければと思います。</p><ul><li>前提条件</li><li>従量課金タイプの場合</li><li>Standard タイプの場合</li><li>その他関連ログ</li><li>まとめ</li></ul><p>最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;お客様環境の Logic Apps にて障害や何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。&lt;br&gt;今回は、取得いただきたいログの内容と、その取得方法についてご案内申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trouble" scheme="https://jpazinteg.github.io/blog/tags/Trouble/"/>
    
    <category term="Log" scheme="https://jpazinteg.github.io/blog/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ で End2End ログを取得する手順</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/</id>
    <published>2023-11-26T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.492Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスにて、調査時に有用な End2End ログを有効化する手順、取得する手順についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ の End2End ログを有効化する</li><li>MSMQ の End2End ログを取得する</li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><ul><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> </li></ul><p>上記にもご案内がございます。</p><h2 id="MSMQ-の-End2End-ログを有効化する"><a href="#MSMQ-の-End2End-ログを有効化する" class="headerlink" title="MSMQ の End2End ログを有効化する"></a>MSMQ の End2End ログを有効化する</h2><p>End2End ログは [コンピューターの管理]-[システム ツール]-[アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から ご確認いただけます。</p><ol><li>対象の端末でイベント ビューアーを開きます。ショートカット キー「Windows + X」を押下後に「V」を押下しますと、「イベント ビューアー」が開きます。</li><li>左側のメニューから [アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から End2End に移動します。</li><li>画面右側の [操作] から [プロパティ] を選択します。</li><li>[ログを有効にする] にチェックを入れ、最大ログ サイズに 100MB 程度を入力し、[必要に応じてイベントを上書きする (最も古いイベントから)] にチェックを入れます。</li><li>[OK] を選択します。</li></ol><p><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-1.png"></p><p>以上にて End2End ログが有効化されます。</p><h2 id="MSMQ-の-End2End-ログを取得する"><a href="#MSMQ-の-End2End-ログを取得する" class="headerlink" title="MSMQ の End2End ログを取得する"></a>MSMQ の End2End ログを取得する</h2><p>続いて End2End ログ取得手順です。</p><ol><li>対象の端末でイベント ビューアーを開きます。ショートカット キー「Windows + X」を押下後に「V」を押下しますと、「イベント ビューアー」が開きます。</li><li>左側のメニューから [アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から End2End に移動します。</li><li>画面右側の [操作] から [すべてのイベントを名前を付けて保存] を選択します。</li><li>[ファイルの種類] が [*.evtx] であることを確認し、ファイルの出力先を指定し、任意のファイル名を入力し、[保存] を選択します。</li><li>[これらの言語についての表示情報] にチェックを入れ、表示情報に 日本語 または 英語 にチェックが入っていることを確認し、[OK] を選択します。</li></ol><p><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-2.png"><br><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-3.png"></p><p>以上にて End2End ログを取得いただけます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ の End2End ログを有効化する</li><li>MSMQ の End2End ログを取得する</li></ul><p>End2End ログは既定で無効化状態となり、調査対象の事象発生時に End2End ログが有効でない場合、ログが収集できていない状況と想定されます。</p><p>オンプレミス製品 MSMQ についてもしもの時のご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスにて、調査時に有用な End2End ログを有効化する手順、取得する手順についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Google Sheets コネクタで行 ID を取得する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/HowToGetRowIdGS/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/HowToGetRowIdGS/</id>
    <published>2023-11-19T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.356Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Logic Apps から Google Sheets に対して行の取得や更新等をされたい場合、以下の Google Sheets コネクタを利用することで実現可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/">Google Sheets</a></li></ul><p>しかしながら、こちらのアクションで利用する行 ID については、本日現在（2023 年 11 月現在）でプルダウンのようにシステム上で動的に指定が出来ない仕様でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image001.png"></p><p>今回は、こちらのアクションを利用するにあたり、行 ID を取得する小技についてご案内申し上げます。<br>なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>Google Sheets コネクタの設定</li><li>アレイのフィルター処理</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の手順を実施する前に、Google Sheets 上に “__PowerAppsId__“ という行 ID を格納する列が必要となります。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image003.png"></p><p>こちらの列については手動で作成いただかなくても、行の挿入アクションで行を挿入した際に自動的に挿入される列となります。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/#%E8%A1%8C%E3%81%AE%E6%8C%BF%E5%85%A5">Google Sheets # 行の挿入</a></li></ul><p>また、こちらの値についてはランダムに設定される値となります。<br>以上の前提条件が整いましたら、後続のアクションの設定に移ります。</p><h2 id="Google-Sheets-コネクタの設定"><a href="#Google-Sheets-コネクタの設定" class="headerlink" title="Google Sheets コネクタの設定"></a>Google Sheets コネクタの設定</h2><p>こちらの ID についてですが、先に記載いたしました通り、行の取得アクションなどでシステムで動的な取得が出来ません。<br>その為、Google スプレッドシートの画面から値を確認し、ワークフローのアクションに手動で当該の ID を設定頂く必要がございますが、複数行を取得アクションを利用すると行 ID を取得することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/#%E8%A4%87%E6%95%B0%E8%A1%8C%E3%82%92%E5%8F%96%E5%BE%97">Google Sheets # 複数行を取得</a></li></ul><p>・コネクタの実行結果<br><img src="/blog/LogicApps/HowToGetRowIdGS/image004.png"></p><p>上記の実行結果からも分かる通り、”__PowerAppsId__“ の値がそのまま取得されるわけではなく、カンマ区切りで行番号が設定されていることが確認できます。<br>以上より、当該の行 ID が取得できますが、このままでは全ての行に対して “__PowerAppsId__“ が取得されてしまいます。<br>その為、次に記載いたします通り アレイのフィルター処理 アクションにて取得したい行の値のみを取得致します。</p><h2 id="アレイのフィルター処理"><a href="#アレイのフィルター処理" class="headerlink" title="アレイのフィルター処理"></a>アレイのフィルター処理</h2><p>Google Sheets コネクタの後続処理に “アレイのフィルター処理” アクションを設定いたします。</p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image002.png"></p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption#filter-array-action">Azure Logic Apps でデータの操作を実行する # 配列のフィルター処理アクション</a><br>上記の公開情報については比較的良く使うデータ操作のコネクタやテクニックがございますので、先頭から読み進めていただくことを推奨いたします。</li></ul><p>次に、アレイのフィルター処理アクションに以下の値を設定いたします。</p><p>＜設定値＞<br>・差出人：”動的なコンテンツ” より “レコード value” を選択<br><img src="/blog/LogicApps/HowToGetRowIdGS/image005.png"></p><p>・左辺：行の主キーになる列の値。本例では No 列を指定します。<br>・条件：特定の一行を取得する任意の条件（お客様のデータに依存）<br>・右辺：特定の一行を取得する任意の値（お客様のデータに依存）<br><img src="/blog/LogicApps/HowToGetRowIdGS/image006.png"></p><p>こちらで、一意の値のみを取得する条件を設定いただくことで、当該行の ID を取得することが可能でございます。<br>ただし、ここで注意が必要な点がございます。本例では No が数字となっておりますが、こちら “アレイのフィルター処理” アクションの右辺に直接数字を指定した場合、正常に取得できない場合がございます。<br>その場合、以下のようにコードビューにて直接 JSON の内容を修正し、シングル クォーテーションで文字を囲う必要がございますのでご留意ください。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image007.png"></p><p>また、上記のままですと行 ID のみを利用することが出来ませんので、以下のように作成アクションなど、一時的に値を格納する変数のようなアクションを利用し、JSON プロパティから値を抜き出します。<br>式関数に、以下のような値を設定することで、データの取得が可能でございます。</p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image008.png"></p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image009.png"></p><p>＜式関数＞<br>body(‘アレイのフィルター処理’)?[0][‘__PowerAppsId__‘]<br>※上記式関数をブラウザ上でコピー＆ペーストした際に、文字コードの都合上そのまま利用できない場合があります。必要に応じてシングル クォーテーションを入力し直して下さい。</p><p>こちらは、body 関数でアレイのフィルター処理から Body を指定し、[0] にて 0 番目の配列を指定いたします。（アレイのフィルター処理にて配列が1つのみ取得できる前提）<br>最後に、”__PowerAppsId__“ のプロパティを指定します。</p><p>最後に、ワークフローを保存して実行すると、以下のように行 ID を取得することが可能でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image010.png"></p><p>上記の出力を基に、Google Sheets コネクタにて特定行の更新や削除など、行 ID を利用する処理を行うことが可能でございます。<br>例えば、以下図のように出力に値を設定することで特定行の取得が可能でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image011.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>前提条件</li><li>Google Sheets コネクタの設定</li><li>アレイのフィルター処理</li><li>まとめ</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Logic Apps から Google Sheets に対して行の取得や更新等をされたい場合、以下の Google Sheets コネクタを利用することで実現可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-JP/connectors/googlesheet/&quot;&gt;Google Sheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、こちらのアクションで利用する行 ID については、本日現在（2023 年 11 月現在）でプルダウンのようにシステム上で動的に指定が出来ない仕様でございます。&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/HowToGetRowIdGS/image001.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今回は、こちらのアクションを利用するにあたり、行 ID を取得する小技についてご案内申し上げます。&lt;br&gt;なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Google Sheets" scheme="https://jpazinteg.github.io/blog/tags/Google-Sheets/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps をこれから使い始めようという方へ</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-HeadFirst/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-HeadFirst/</id>
    <published>2023-11-10T02:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.396Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。<br>今回は Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを厳選し、引用しながら、リンク集としてご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><p>従量課金版 Logic Apps、Standard 版 Logic Apps 合わせて、これから Azure Logic Apps を使い始めたいという方。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Azure Logic Apps とは</li><li>コネクタとは</li><li>ワークフローとは</li><li>Standard 版 (シングルテナント) Logic Apps とは</li><li>その他</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Azure-Logic-Apps-とは"><a href="#Azure-Logic-Apps-とは" class="headerlink" title="Azure Logic Apps とは"></a>Azure Logic Apps とは</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">概要 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps はクラウド プラットフォームであり、コードをほとんど、またはまったく使用せずに、自動化されたワークフローを作成して実行できます。 ビジュアル デザイナーを使用し、事前構築済みの操作から選択することで、アプリ、データ、サービス、システムを統合および管理するワークフローをすばやく構築できます。</p></blockquote><blockquote><p>Azure Logic Apps を使用すると、クラウド、オンプレミス、ハイブリッド環境の間でレガシ、最新、最先端のシステムを接続する方法が簡素化され、企業のシナリオと企業間 (B2B) シナリオ向けに高度にスケーラブルな統合ソリューションを開発するための、コードの記述がほとんど必要ない手段が提供されます。</p></blockquote><p>引用: <a href="https://learn.microsoft.com/ja-jp/azure/architecture/reference-architectures/enterprise-integration/basic-enterprise-integration">Azure での基本的なエンタープライズ統合 - Azure Architecture Center | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-1.png"></p><p>引用: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview#create-and-deploy-to-different-environments">概要 # さまざまな環境を作成してデプロイする - Azure Logic Apps | Microsoft Learn</a></p><h3 id="従量課金版-Consumption、消費、マルチテナント-Logic-Apps"><a href="#従量課金版-Consumption、消費、マルチテナント-Logic-Apps" class="headerlink" title="従量課金版 (Consumption、消費、マルチテナント) Logic Apps"></a>従量課金版 (Consumption、消費、マルチテナント) Logic Apps</h3><blockquote><p>1 つのロジック アプリではワークフローを 1 つだけ 使用できます。<br>“複数の Azure Active Directory テナントにわたる” ロジック アプリで、同じ処理 (コンピューティング)、ストレージ、ネットワークなどが共有されます。<br>冗長性のために、データはペア リージョンにレプリケートされます。 高可用性を実現するために、geo 冗長ストレージ (GRS) が有効になっています。</p></blockquote><p>メリットについて以下となります。</p><blockquote><ul><li>最も簡単に開始できる</li><li>従量課金制</li><li>フル マネージド</li></ul></blockquote><h3 id="Standard-版-シングルテナント-Logic-Apps"><a href="#Standard-版-シングルテナント-Logic-Apps" class="headerlink" title="Standard 版 (シングルテナント) Logic Apps"></a>Standard 版 (シングルテナント) Logic Apps</h3><blockquote><p>1 つのロジック アプリに、複数の “ステートフル” と “ステートレス” のワークフローを含めることができます。<br>“1 つのロジック アプリとテナント” のワークフローでは、同じ処理 (コンピューティング)、ストレージ、ネットワークなどが共有されます。<br>データはロジック アプリをデプロイしたのと同じリージョンに残ります。</p></blockquote><p>メリットについて以下となります。</p><blockquote><ul><li>シングルテナント Azure Logic Apps ランタイムを使用して実行します。 デプロイ スロットは現在サポートされていません。</li><li>大規模なスループット向上とコスト削減を実現するための追加の組み込みコネクタ</li><li>ランタイムとパフォーマンスの設定に関する制御と微調整機能の強化</li><li>仮想ネットワークとプライベート エンドポイントに対する統合サポート。</li><li>独自の組み込みコネクタの作成。</li></ul></blockquote><h2 id="コネクタとは"><a href="#コネクタとは" class="headerlink" title="コネクタとは"></a>コネクタとは</h2><p><a href="https://learn.microsoft.com/ja-jp/connectors/connectors#connector-components">コネクタの概要 | Microsoft Learn</a></p><blockquote><p>各コネクタは、アクションとトリガーに分類される一連の操作を提供します。 基盤となるサービスに接続すると、アプリやワークフロー内でこれらの操作を簡単に活用することができます。</p></blockquote><blockquote><p>アクションを使用して SQL データベース内のデータを検索、書き込み、更新、削除します。 </p></blockquote><blockquote><p>いくつかのコネクタは、特定のイベントが発生したときにアプリに通知できるトリガーを提供しています。 </p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/create-workflow-with-trigger-or-action?tabs=consumption">トリガーまたはアクションを使用してワークフローを作成する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>トリガーは、どのワークフローでも常に最初のステップであり、ワークフローが実行を開始できるようになる前に満たす条件を指定します。 トリガーの後に、ワークフローが必要なタスクを実行するには、後続のアクションを 1 つ以上追加する必要があります。 トリガーとアクションは連携して、ワークフローのロジックと構造を定義します。</p></blockquote><p>以下は 「繰り返し」 トリガー と 「パスを使用して BLOB コンテンツを取得する (V2)」 アクション の例です。</p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-azureblobstorage?tabs=consumption#add-a-blob-action">ワークフローから Azure Blob Storage に接続する - Azure Logic Apps | Microsoft Learn</a></p><p>以下からコネクタの一覧をご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/connectors/">Azure Logic Apps コネクタのドキュメント - Connectors | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/connectors/connector-reference/connector-reference-logicapps-connectors">すべての Logic Apps コネクタの一覧 | Microsoft Learn</a></p><h2 id="ワークフローとは"><a href="#ワークフローとは" class="headerlink" title="ワークフローとは"></a>ワークフローとは</h2><p>ワークフロー内にて、アクションを条件に基づいて制御したり、繰り返し処理したりできます。また、式関数を用いて出力結果から値を加工して利用できます。</p><h3 id="制御"><a href="#制御" class="headerlink" title="制御"></a>制御</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-conditional-statement?tabs=consumption">ワークフローに条件を追加する - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-switch-statement">スイッチ アクションをワークフローに追加する - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops?tabs=consumption">アクションを繰り返すループを追加する - Azure Logic Apps | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-3.png"></p><h3 id="式関数"><a href="#式関数" class="headerlink" title="式関数"></a>式関数</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference">式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://jpazinteg.github.io/blog/LogicApps/how-to-treat-json-in-logicApps/">Azure Logic Apps で JSON オブジェクトから特定のプロパティの値を取得する方法 | Japan Azure Integration Support Blog</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption">データの操作の実行 - Azure Logic Apps | Microsoft Learn</a></p><h2 id="Standard-版-シングルテナント-Logic-Apps-とは"><a href="#Standard-版-シングルテナント-Logic-Apps-とは" class="headerlink" title="Standard 版 (シングルテナント) Logic Apps とは"></a>Standard 版 (シングルテナント) Logic Apps とは</h2><p>ここまでの内容に加えて、Standard 版 Logic Apps には以下のような特長がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare#standard-logic-app-and-workflow">Azure Logic Apps でのシングルテナントとマルチテナントの比較 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Standard ロジック アプリとワークフローには、再設計されたシングルテナント Azure Logic Apps ランタイムが使用されています。 このランタイムには Azure Functions 機能拡張モデルが使用されており、Azure Functions ランタイムの拡張機能としてホストされます。 この設計により、ロジック アプリ ワークフローの移植性、柔軟性、パフォーマンス向上に加え、Azure Functions プラットフォームと Azure App Service エコシステムから継承されたその他の機能と利点が提供されます。 </p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare#stateful-stateless">ステートフルおよびステートレス ワークフロー</a></p><blockquote><p>ステートフル ワークフローでは、サービス停止が発生した場合に高い回復性を実現できます。 サービスとシステムが復元された後に、中断された実行を保存済みの状態から再構築し、ワークフローを再実行して完了することができます。 ステートフル ワークフローは、ステートレス ワークフローよりもはるかに長い間実行を継続できます。</p></blockquote><blockquote><p>各実行が完了した後に外部ストレージに前のイベントのデータを保持、確認、参照する必要がない場合は、ステートレス ワークフローを作成します。 これらのワークフローでは、各アクションとその状態の入出力を外部ストレージにではなく、”メモリ内にのみ” 保存します。 その結果、ステートレス ワークフローでは、実行時間が短縮され (通常は 5 分未満)、パフォーマンスが高速化されて応答時間が短くなり、スループットが向上し、実行コストが削減されます。</p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint">Standard ワークフローと仮想ネットワーク間のトラフィックをセキュリティで保護する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Standard ロジック アプリのワークフローと Azure 仮想ネットワーク間で安全かつプライベートに通信するために、受信トラフィック用に “プライベート エンドポイント” を設定し、送信トラフィック用に仮想ネットワーク統合を使用できます。</p></blockquote><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>ほか、多くお問い合わせをいただくトピックです。</p><h3 id="制約と構成"><a href="#制約と構成" class="headerlink" title="制約と構成"></a>制約と構成</h3><p>Logic Apps を利用するうえで知っておきたい制約事項です。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal">制約と構成の参考ガイド - Azure Logic Apps | Microsoft Learn</a></p><h3 id="価格"><a href="#価格" class="headerlink" title="価格"></a>価格</h3><p>Logic Apps の利用価格です。</p><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing">使用量の測定、課金、価格 - Azure Logic Apps | Microsoft Learn</a></p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Logic Apps を学べるリソースには、以下のようなものがございます。</p><ul><li>チュートリアル<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow">スケジュールに基づいた自動化ワークフローを作成する - Azure Logic Apps | Microsoft Learn</a></li></ul></li><li>Training<ul><li><a href="https://learn.microsoft.com/ja-jp/training/paths/build-workflows-with-logic-apps/">Azure Logic Apps でデータとアプリを統合するための自動化されたワークフローを構築する - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/intro-to-logic-apps/">Azure Logic Apps の概要 - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/route-and-process-data-logic-apps/">Azure Logic Apps を使用してデータを自動的にルートし、処理する - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/logic-apps-and-custom-connectors/">カスタム コネクタを使用して Azure Logic Apps ワークフローから API を呼び出す - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/create-deploy-logic-apps-using-arm-templates/">Azure Resource Manager テンプレートを使用して Azure Logic Apps ワークフローを作成し、デプロイする - Training | Microsoft Learn</a></li></ul></li><li>Blog<ul><li><a href="https://jpazinteg.github.io/blog/index.html">Japan Azure Integration Support Blog</a></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを一挙にご紹介いたしました。引き続き、皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;br&gt;今回は Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを厳選し、引用しながら、リンク集としてご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で日付や時刻を判定してワークフローを制御する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/</id>
    <published>2023-10-06T02:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.396Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2</a> をご利用いただく際に、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。</p><p>今回はそうしたときに便利な、 Logic Apps における日付や時刻の判定に使えるシナリオをご紹介いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の記事では従量課金版 Logic Apps を利用しますが、Standard 版 Logic Apps でも問題ありません。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい</li><li>シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="シナリオ-1-平日-8-時に-VM-を起動したい。ただし-特定の日-祝日など-を除外したい"><a href="#シナリオ-1-平日-8-時に-VM-を起動したい。ただし-特定の日-祝日など-を除外したい" class="headerlink" title="シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい"></a>シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい</h2><p>「平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい」。例としてこの場合、以下のように毎週 月曜日 ～ 金曜日 の 8:00 にワークフローを動作させるよう、繰り返しトリガーを設定しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions8.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption">繰り返しワークフローをスケジュール設定および実行する - Azure Logic Apps | Microsoft Learn</a></p><h3 id="トリガーの条件"><a href="#トリガーの条件" class="headerlink" title="トリガーの条件"></a>トリガーの条件</h3><p>一方トリガーには条件式というものを設定できます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions9.png"></p><p>こちらに「月曜日 ～ 金曜日、ただし 特定の日 (祝日など) を除外する」を満たす式を記述します。以下フォーラムとドキュメントを引用いたします。</p><p>参考: <a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/what-you-need-to-know-about-trigger-conditions/ba-p/2320757">What you need to know about trigger conditions?</a></p><blockquote><p>Trigger conditions is a trigger setting used to specify one or more conditional expressions which must be true for the trigger to fire.<br>Trigger conditions can be set using logic app designer or manually using code view; for schema reference for trigger conditions</p><ol><li>Go to your logic app.</li><li>On the trigger, click on the three dots (…) at the top right corner.</li><li>Select Settings.</li><li>Scroll down to Trigger Conditions.</li><li>Specify your conditional expression.</li><li>Click Done.</li></ol></blockquote><blockquote><p>&lt;翻訳&gt;<br>トリガーの条件は、トリガーが起動するために true でなければならない 1 つ以上の条件式を指定します。<br>トリガーの条件は、ロジック アプリ デザイナーを使用して設定することも、コード ビューを使用して手動で設定することもできます。</p><ol><li>ロジック アプリに移動します。</li><li>トリガーで、右上隅にある3つのドット(…)をクリックします。</li><li>[設定]を選択します。</li><li>[トリガー条件]まで下にスクロールします。</li><li>条件式を指定します。</li><li>[完了]をクリックします。</li></ol></blockquote><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#trigger-conditions">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # トリガーの条件</a></p><blockquote><p>どのトリガーにも、ワークフローを実行するかどうかを決める条件を表した 1 つまたは複数の式を含む配列を追加できます。</p></blockquote><p>フォーラムにありますとおり、トリガーの条件を用いることで以下メリットがあります。</p><ul><li>Logic Apps のフロー自体をシンプルにできる。</li><li>条件により実行が判断されることで、不要な実行を排除でき、運用上の負担を軽減できる。</li><li>実行数を減らすことでコストを削減できる。</li></ul><h3 id="条件式"><a href="#条件式" class="headerlink" title="条件式"></a>条件式</h3><p>上記を踏まえ、「今日が 2023 年の日本の祝日ではない」という条件式を設定してみることにします。まず日本時間の「月日」 (MMdd) は以下となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;MMdd&#x27;)</span><br></pre></td></tr></table></figure><p>また例として 2023 年の日本の祝日 (MMdd) を示すアレイを作成いたしますと、以下となります。</p><p>参考: <a href="https://www8.cao.go.jp/chosei/shukujitsu/gaiyou.html">国民の祝日について - 内閣府</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">createArray(&#x27;0101&#x27;,</span><br><span class="line">            &#x27;0102&#x27;,</span><br><span class="line">            &#x27;0109&#x27;,</span><br><span class="line">            &#x27;0211&#x27;,</span><br><span class="line">            &#x27;0223&#x27;,</span><br><span class="line">            &#x27;0321&#x27;,</span><br><span class="line">            &#x27;0429&#x27;,</span><br><span class="line">            &#x27;0503&#x27;,</span><br><span class="line">            &#x27;0504&#x27;,</span><br><span class="line">            &#x27;0505&#x27;,</span><br><span class="line">            &#x27;0717&#x27;,</span><br><span class="line">            &#x27;0811&#x27;,</span><br><span class="line">            &#x27;0918&#x27;,</span><br><span class="line">            &#x27;0923&#x27;,</span><br><span class="line">            &#x27;1009&#x27;,</span><br><span class="line">            &#x27;1103&#x27;,</span><br><span class="line">            &#x27;1123&#x27;</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><p>以上を用いると、「今日が 2023 年の祝日ではない」ことを表す判定式は以下となります。こちらを「トリガーの条件」欄に記載致します。「トリガーの条件」欄では式の先頭に ＠ を記載します点をご注意ください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">not(contains( </span><br><span class="line">    createArray(&#x27;0101&#x27;,</span><br><span class="line">                &#x27;0102&#x27;,</span><br><span class="line">                &#x27;0109&#x27;,</span><br><span class="line">                &#x27;0211&#x27;,</span><br><span class="line">                &#x27;0223&#x27;,</span><br><span class="line">                &#x27;0321&#x27;,</span><br><span class="line">                &#x27;0429&#x27;,</span><br><span class="line">                &#x27;0503&#x27;,</span><br><span class="line">                &#x27;0504&#x27;,</span><br><span class="line">                &#x27;0505&#x27;,</span><br><span class="line">                &#x27;0717&#x27;,</span><br><span class="line">                &#x27;0811&#x27;,</span><br><span class="line">                &#x27;0918&#x27;,</span><br><span class="line">                &#x27;0923&#x27;,</span><br><span class="line">                &#x27;1009&#x27;,</span><br><span class="line">                &#x27;1103&#x27;,</span><br><span class="line">                &#x27;1123&#x27;</span><br><span class="line">                ), </span><br><span class="line">    convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;MMdd&#x27;)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>参考: </p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#convertFromUtc">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # convertFromUtc</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#createArray">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # createArray</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#contains">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # contains</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#not">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # not</a></li></ul><p>またここでは「日本の祝日」となる日付を静的にアレイに記述しましたが、カレンダーなどから取得して構築することも考えられます。詳細割愛いたしますが以下などがご活用いただけます。</p><p>参考: <a href="https://learn.microsoft.com/ja-jp/connectors/office365/#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97-(v3)">Office 365 Outlook - Connectors | Microsoft Learn # イベントのカレンダー ビューの取得 (V3)</a>)<br>ほか 2024 年の日本の祝日 (MMdd) を示すアレイは以下となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">createArray(&#x27;0101&#x27;,</span><br><span class="line">            &#x27;0108&#x27;,</span><br><span class="line">            &#x27;0211&#x27;,</span><br><span class="line">            &#x27;0212&#x27;,</span><br><span class="line">            &#x27;0223&#x27;,</span><br><span class="line">            &#x27;0320&#x27;,</span><br><span class="line">            &#x27;0429&#x27;,</span><br><span class="line">            &#x27;0503&#x27;,</span><br><span class="line">            &#x27;0504&#x27;,</span><br><span class="line">            &#x27;0505&#x27;,</span><br><span class="line">            &#x27;0506&#x27;,</span><br><span class="line">            &#x27;0715&#x27;,</span><br><span class="line">            &#x27;0811&#x27;,</span><br><span class="line">            &#x27;0812&#x27;,</span><br><span class="line">            &#x27;0916&#x27;,</span><br><span class="line">            &#x27;0922&#x27;,</span><br><span class="line">            &#x27;0923&#x27;,</span><br><span class="line">            &#x27;1014&#x27;,</span><br><span class="line">            &#x27;1103&#x27;,</span><br><span class="line">            &#x27;1104&#x27;,</span><br><span class="line">            &#x27;1123&#x27;</span><br><span class="line">           )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="シナリオ-2-平日-6-時に-VM1-を起動し、8-時に-VM2-を起動したい"><a href="#シナリオ-2-平日-6-時に-VM1-を起動し、8-時に-VM2-を起動したい" class="headerlink" title="シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい"></a>シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい</h2><p>「平日 6 時に VM1 を起動し、8 時に VM2 を起動したい」。例としてこの場合は、以下のように毎週 月曜日 ～ 金曜日 の 6:00、8:00 にワークフローを動作させるよう繰り返しトリガーを設定しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions7.png"></p><p>前提として、パラメーターにて VM1 を起動する際のパラメーター、VM2 を起動する際のパラメーターを作成しておきます。<br><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/create-parameters-workflows?tabs=consumption">ワークフロー入力ためのパラメーターを作成する - Azure Logic Apps | Microsoft Learn</a></p><p>またこちらも前処理として、VM の引数を格納する変数を初期化しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions1.png"></p><p>そのうえで スイッチ を利用してまいります。スイッチするための式は、ここでは以下のようにしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;HH&#x27;)</span><br></pre></td></tr></table></figure><p>これでワークフローが動作した際の現在時刻が 6 時ならば「06」、8 時ならば「08」などという文字列が取得できます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions4.png"></p><p>踏まえ、ここではケース の判定を「”06”」と等しい場合とします。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions6.png"></p><p>ケース内では “06”、つまり 6 時に「VM1」を起動する際の引数をセットします。同様、”08” の時に「VM2」を起動する際の引数を ケース 2 にてセットすれば「平日 6 時に VM1 を起動し、8 時に VM2 を起動」という条件を利用して、日付に応じて意図した VM を起動する制御ができます。なおそのどちらにも該当しない「既定」時は、ワークフローを終了することとしておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions3.png"></p><p>例:<br><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions10.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-switch-statement">スイッチ アクションをワークフローに追加する - Azure Logic Apps | Microsoft Learn</a></p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>ほか Logic Apps と日付関数に言及した記事には、以下のようなものがございます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-DateTime/">Logic Apps で簡単に日付や時刻を用いる | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/UnixTime/">Logic Apps の式関数で Unix Time を取得する方法 | Japan Azure Integration Support Blog</a></li></ul><p>今回の記事では日付に対して 6 時 や 8 時という時刻を例に紹介いたしましたが、0 時を起動時刻に設定し日付を条件判定する際には、<a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について</a> にありますように起動時刻仕様についてもご確認いただけますと幸いです。</p><p>また今回の「Start/Stop VMs v2」に関する参考ドキュメントや記事は、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2 を Azure サブスクリプションにデプロイする | Microsoft Learn</a></li><li><a href="https://jpazpaas.github.io/blog/2021/11/29/introduce-Start-Stop-VMs-v2.html">Start/Stop VMs v2 のご紹介 - Japan PaaS Support Team Blog</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2</a> をはじめとした繰り返しトリガー利用時に便利な、日付や時刻の判定方法についてご紹介しました。引き続き皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy&quot;&gt;Start/Stop VMs v2&lt;/a&gt; をご利用いただく際に、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。&lt;/p&gt;
&lt;p&gt;今回はそうしたときに便利な、 Logic Apps における日付や時刻の判定に使えるシナリオをご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>特定の条件の Logic Apps ワークフローや API 接続を検索する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/</id>
    <published>2023-09-20T02:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.400Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p>今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提</li><li>シナリオ 1: 従量課金版 Logic Apps を検索する</li><li>シナリオ 2: Standard 版 Logic Apps を検索する</li><li>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</li><li>シナリオ 4: API 接続を検索する</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前提として、Logic Apps を含む各種リソースを検索する際は、Azure Resource Graph エクスプローラー をご利用いただけます。以下ドキュメントに概要がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="シナリオ-1-従量課金版-Logic-Apps-を検索する"><a href="#シナリオ-1-従量課金版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 1: 従量課金版 Logic Apps を検索する"></a>シナリオ 1: 従量課金版 Logic Apps を検索する</h2><p>踏まえ、まずは基本として、従量課金版 Logic Apps を Azure Resource Graph エクスプローラーから検索いただく方法です。左側 カテゴリ から、「ロジック アプリ」がございます。</p><p>例として以下クエリにて、リソースが表示されます。name 列にて Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-1.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources</a></p><h2 id="シナリオ-2-Standard-版-Logic-Apps-を検索する"><a href="#シナリオ-2-Standard-版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 2: Standard 版 Logic Apps を検索する"></a>シナリオ 2: Standard 版 Logic Apps を検索する</h2><p>さて Standard 版 Logic Apps は上と異なり、「AppServiceResources」からご覧いただけます。</p><p>例として以下クエリにて、リソースが表示されます。同じく name 列にて Standard Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources</a></p><h2 id="シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する"><a href="#シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する" class="headerlink" title="シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する"></a>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</h2><p>踏まえまして、特定のコネクタを利用しているなど、プロパティに応じた Logic Apps を検索したいケースがあるかと思います。</p><p>例として以下のようなクエリにて、対象を絞り込むことができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;teams&quot; // 例として teams のコネクタを利用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line">| top 3 by name // name 列で並べた、先頭の 3 個のレコードを返す</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-4.png"></p><p>Standard Logic Apps の場合は以下のようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| where properties contains &quot;Send_an_email_(V2)&quot; // 例として Send_an_email_(V2) というアクション名を使用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-3.png"></p><h2 id="シナリオ-4-API-接続を検索する"><a href="#シナリオ-4-API-接続を検索する" class="headerlink" title="シナリオ 4: API 接続を検索する"></a>シナリオ 4: API 接続を検索する</h2><p>さらにここまでの内容に加え、API 接続を検索するには以下クエリがご利用いただけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| extend status = tostring(properties.statuses[0].status)</span><br><span class="line">| where type == &#x27;microsoft.web/connections&#x27;</span><br><span class="line">| where status == &#x27;Error&#x27; // 例として Error 状態のもの</span><br><span class="line">| project subscriptionId, resourceGroup, apiConnection=name, id</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-5.png"></p><p>また上記の API 接続をもとに、対象の Logic Apps を見つけることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;azureblob-24&quot; // API 接続名で検索する</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p><a href="https://jpazinteg.github.io/blog/LogicApps/ApiConnectionsDelete/">Azure Logic Apps の コネクタにおける不要な接続情報の削除方法について | Japan Azure Integration Support Blog</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ についてサンプルをご紹介しました。Logic Apps と関連リソースの整理整頓に役立てば幸いです。引き続き、皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps と Azure DevOps で CI/CD 環境を構成する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsCdci/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsCdci/</id>
    <published>2023-08-29T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.432Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>近年の技術動向として、DevOps のように環境構築の自動化が進んでおりますが、Standard Logic Apps についても以下の公開情報のとおり DevOps の仕組みを利用して CI/CD の環境を構築することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps">シングルテナントの Azure Logic Apps への DevOps のデプロイ</a></li></ul><p>今回は、Azure DevOps を利用して、Standard Logic Apps にて CI/CD 環境を構築する方法についてご案内いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Azure DevOps を利用して Standard Logic Apps のワークフローをデプロイしたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</li><li>Standard Logic Apps 側の設定</li><li>Azure DevOps 側の設定</li><li>実際の動作</li></ul><h2 id="Azure-DevOps-を利用した-Standard-Logic-Apps-の-CI-CD-環境の概要"><a href="#Azure-DevOps-を利用した-Standard-Logic-Apps-の-CI-CD-環境の概要" class="headerlink" title="Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要"></a>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</h2><p>始めに、本ブログ記事につきましては Logic Apps 製品としての内容となります。そのため、Azure DevOps、Azure Functions、Azure App Service の製品に関する詳細については説明を割愛いたします。詳細な操作方法についてはそれぞれの製品観点で別途弊社サポートへお問合せ下さい。<br>また、本ブログ記事でご案内する内容としては手動でのデプロイ、かつ最低限の操作方法となります。そのため、各設定についてはお客様のビジネス要件に合わせて別途カスタマイズいただく必要があることと、本ブログ記事の内容については弊社サポートとしてお客様のビジネス要件に合わせたカスタマイズの対応は実施致しませんので予めご了承下さい。</p><p>まず、Standard Logic Apps での DevOps の設定方法については以下の公開情報を基に設定を進めて参ります。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-devops">シングルテナントの Azure Logic Apps に Standard ロジック アプリ ワークフローの DevOps デプロイを設定する</a></li></ul><p>上記の公開情報にもございます通り、Azure Logic Apps 製品としましては デプロイ スロットをサポートしておりません。<br>Azure Logic Apps にて環境を構築するにあたり、以下の通り Azure Functions のデプロイ タスクを利用し、Standard Logic Apps へデプロイする必要がございます。</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/devops/pipelines/tasks/reference/azure-function-app-v1?view=azure-pipelines&viewFallbackFrom=azure-devops&preserve-view=true">AzureFunctionApp@1 - v1 タスクのAzure Functions</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/functions-how-to-azure-devops?tabs=csharp,yaml&pivots=v1">Azure Pipelines を使用した継続的デリバリー</a></p></li></ul><p>大まかな構成の概要としましては以下の構成となります。</p><ol><li>Azure DevOps 上の Repos にワークフローの構成ファイルを格納</li><li>1 で格納したファイルを基に Pipelines にて App Service Plan (Standard Logic Apps) にワークフローをデプロイ</li></ol><p>また、上記の操作を実施するにあたり、Git を利用しますので、予め Git を利用可能な状態に環境設定をお願いいたします。<br>本例では Visual Studio Code より Git 操作を実施いたします。<br><a href="https://code.visualstudio.com/">Visual Studio Code</a></p><h2 id="Standard-Logic-Apps-側の設定"><a href="#Standard-Logic-Apps-側の設定" class="headerlink" title="Standard Logic Apps 側の設定"></a>Standard Logic Apps 側の設定</h2><p>始めに、Azure Portal より [ロジック アプリ] - [追加] より [ロジック アプリの作成] 画面を表示し、Standard Logic Apps を新規作成します。こちらは任意の設定で作成いただければと思います。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image008.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image009.png"> </p><p>次に、[ワークフロー] - [ワークフロー] より、任意のワークフローを作成します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image010.png"> </p><p>・サンプル<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image011.png"> </p><p>ワークフローを作成しましたら、Standard Logic Apps の概要画面より、[アプリ コンテンツのダウンロード] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image012.png"> </p><p>今回の設定方法では “サイトのコンテンツ” を指定いただき、”ダウンロードにアプリ設定を含める” のチェックを外した状態で “ダウンロード” ボタンを押下してください。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image013.png"> </p><p>ダウンロードされた Zip コンテンツについては後程利用しますので、別途退避してください。</p><p>また、[デプロイメント] - [デプロイ センター] より、”Setting”　に何も設定されていないことを確認いたします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image014.png"> </p><p>こちらの設定がされていると、Standard Logic Apps のソースがプッシュされる度に差分で自動デプロイが実行される場合がございますため、今回の設定ではこちらの設定を無効とします。</p><p>Standard Logic Apps 側の設定については一旦以上となります。</p><h2 id="Azure-DevOps-側の設定"><a href="#Azure-DevOps-側の設定" class="headerlink" title="Azure DevOps 側の設定"></a>Azure DevOps 側の設定</h2><p>始めに、Azure DevOps へログインし、[Organization setting] を表示します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image003.png"> </p><p>次に、[Billing] を確認し、対象の Standard Logic Apps のリソースが存在するサブスクリプションが指定されているかを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image004.png"> </p><p>指定されていない場合、”Change billing” より設定を変更します。<br>また、[Azure Active Directory] より、接続しているテナントについても同様に確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image006.png"> </p><p>設定の確認が完了しましたら、トップ画面にもどり、[+ New Project] より、任意のプロジェクトを作成します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image005.png"> </p><p>本例では “Visibility” を “Private”、”Version control” を “Git” に設定します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image007.png"> </p><p>次に、Repos の画面より、作成したプロジェクトのリポジトリをローカルにクローンします。今回は “Clone in VS Code” を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image015.png"> </p><p>リポジトリのクローン先フォルダを確認されるため、任意のフォルダを選択し、[リポジトリの宛先として選択] ボタンを押下します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image016.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image017.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image018.png"> </p><p>クローン先のフォルダの中で Standard Logic Apps の資材を格納するフォルダを作成します。<br>今回は “sample” という名前のフォルダを作成しますが、任意の名前のフォルダを作成してください。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image019.png"> </p><p>次に、[アプリ コンテンツのダウンロード] で取得した Zip ファイルの中身を展開し、上記で作成したフォルダにコピーします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image020.png"> </p><p>各フォルダ、ファイルについての詳細は以下の公開情報をご確認下さい。<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/edit-app-settings-host-settings?tabs=azure-portal">シングルテナントの Azure Logic Apps で Standard ロジック アプリのホストとアプリの設定を編集する</a></p><p>フォルダの構成が整いましたら、Azure DevOps の画面にてメッセージの入力後、”コミットしてプッシュ” を選択します。<br>ブランチの指定や直接プッシュしたくないというお客様については別途個別に操作いただければ問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image021.png"> </p><p>以下の警告メッセージについて、今回は直接コミット、プッシュ操作をするため “はい” を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image022.png"> </p><p>上記の操作で、Repos 上にワークフローの構成ファイルが格納されていることが確認出来ればリポジトリの設定としては完了です。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image023.png"> </p><p>次に、Pipelines の設定を実施します。<br>[+ New Project] より今回作成したプロジェクトの画面に遷移いただき、画面下部の [Project settings] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image024.png"> </p><p>[Pipelines] - [Service connections] より、[Create service connections] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image025.png"> </p><p>[New service connection] の画面より、[Azure Resource Manager] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image026.png"> </p><p>[Service principal (automatic)] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image027.png"> </p><p>[Scope level] にて [Subscription] を選択し、対象の Logic Apps が存在するサブスクリプション、およびリソースグループを選択します。<br>また、任意の [Service connection name] を指定いたします。こちらの Service connection name については後程利用しますので notepad 等へ退避して下さい。<br>[Security] - [Grant access permissin to all Pipelines] にチェックを設定し、[Save] ボタンを押下します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image028.png"> </p><p>設定が完了すると、以下のように Service connections が作成されます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image029.png"> </p><p>また、Standard Logic Apps を作成したテナントの Azure Portal に遷移いただき、[Azure Active Directory] - [管理] - [アプリの登録] を確認いただくと、以下のようにアプリが登録されます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image030.png"> </p><p>Azure Pipelines では、こちらのアプリに付与されている権限を基にリソースを操作することとなりますので削除しないようお願いいたします。</p><p>ここまで設定が出来ましたら、[Pipelines] より [Create Pipline] を実施します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image031.png"> </p><p>[Select a repository] では先ほど作成したリポジトリを選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image032.png"> </p><p>[Inventory] が表示される場合はお客様組織の要件に合わせて設定いただきます。</p><p>[Configure your pipline] では [Starter Pipline] を選択し、[Review pipline] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image034.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image035.png"> </p><p>最後に、任意のパイプラインの定義ファイル名、パイプライン名を入力し、一旦 [Save] を選択し、yml ファイルを保存します。<br>コミットメッセージについても任意の内容を入力いただければ問題ありません。</p><p><img src="/blog/LogicApps/StandardLogicAppsCdci/image036.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image037.png"> </p><p>上記操作が完了しましたら、Repos の Contents 内にパイプラインの定義ファイルが作成されていることを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image039.png"> </p><p>パイプラインの定義が作成出来ましたら、以下の通り編集を行います。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image038.png"> </p><p>参考までに、以下の yml 定義を設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Start with a minimal pipeline that you can customize to build and deploy your code.</span><br><span class="line"># Add steps that build, run tests, deploy, and more:</span><br><span class="line"># https://aka.ms/yaml</span><br><span class="line"></span><br><span class="line">trigger:</span><br><span class="line">- none</span><br><span class="line"></span><br><span class="line">pool:</span><br><span class="line">  vmImage: ubuntu-latest</span><br><span class="line">steps:</span><br><span class="line">- task: ArchiveFiles@2</span><br><span class="line">  inputs:</span><br><span class="line">    rootFolderOrFile: &#x27;$(System.DefaultWorkingDirectory)/sample&#x27;</span><br><span class="line">    includeRootFolder: false</span><br><span class="line">    archiveType: &#x27;zip&#x27;</span><br><span class="line">    archiveFile: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">    replaceExistingArchive: true</span><br><span class="line">- task: PublishPipelineArtifact@0</span><br><span class="line">  inputs:</span><br><span class="line">    artifactName: &#x27;drop&#x27;</span><br><span class="line">    targetPath: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">- task: AzureFunctionApp@1</span><br><span class="line">  inputs:</span><br><span class="line">    azureSubscription: &#x27;testdeploy&#x27;</span><br><span class="line">    appType: &#x27;functionApp&#x27;</span><br><span class="line">    appName: &#x27;20230712teststandard&#x27;</span><br><span class="line">    package: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">    deploymentMethod: &#x27;zipDeploy&#x27;</span><br></pre></td></tr></table></figure><p>Azure Pipelines の yml 定義に関する詳細については Azure Pipelines 製品の公開情報をご確認下さい。<br><a href="https://learn.microsoft.com/ja-jp/azure/devops/pipelines/customize-pipeline?view=azure-devops#understand-the-azure-pipelinesyml-file">パイプラインをカスタマイズする</a></p><p>上記テンプレートの概要について、以下の通り説明いたします。</p><p>・trigger<br>→パイプラインの起動について、自動ではなく手動での設定としております。この値を “none” から “main” に変更すると、Repos の main ブランチに変更が発生したことを契機とし、自動的にパイプラインを起動することが可能です。今回は、手動での実行としますので “none” で設定しております。</p><p>・pool<br>→パイプラインの裏側で処理する VM (ビルドする為のプラットフォーム) を Ubuntu に指定しております。</p><p>・ArchiveFiles@2<br>→System.DefaultWorkingDirectory (Repos のワーキングディレクトリ) 上に先ほど作成した sample フォルダの中身を zip ファイルとして作成いたします。</p><p>・PublishPipelineArtifact@0<br>→実際に Zip Deploy した際の zip ファイルを後程確認するための設定です。必須ではございません。</p><p>・AzureFunctionApp@1<br>→azureSubscription には Service connections の値を指定します。<br> appType は ‘functionApp’ を指定します。 (Logic Apps ではありませんが問題ありません。)<br> appName は デプロイ先の Standard Logic Apps 名を指定します。<br> package は ArchiveFiles@2 で作成した zip ファイルを指定します。<br> deploymentMethod は ‘zipDeploy’ を指定します。</p><p>以上より、パイプラインを実行いただくことで、対象の Standard Logic Apps に対してワークフローをデプロイすることが可能となります。<br>なお、以下のように Tasks より GUI で操作いただくことも可能でございます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image0351.png"> </p><h2 id="実際の動作"><a href="#実際の動作" class="headerlink" title="実際の動作"></a>実際の動作</h2><p>参考までに、既存のワークフローを一つ削除します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image040.png"> </p><p>リポジトリ上の sample フォルダに削除前の構成でワークフローの資材が格納されていることを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image041.png"> </p><p>[Pipelines] - [All] より対象のパイプラインを選択し、[Run Pipline] ボタンを押下しパイプラインを実行します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image042.png"> </p><p>[Run Pipelines] の画面が表示されますが、デフォルトのまま [Run] ボタンを押下いただければ問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image043.png"> </p><p>パイプライン初回実行時には、以下のように承認処理が必要となりますので承認処理をお願いします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image044.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image045.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image046.png"> </p><p>パイプラインが完了するまで待機します。 Azure FunctionApp のタスクで warning が表示されますが問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image047.png"> </p><p>パイプラインが完了しましたら、Azure Logic Apps を確認し、削除したワークフローが復元していることを確認します。</p><p><img src="/blog/LogicApps/StandardLogicAppsCdci/image049.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image048.png"> </p><p>なお、実際にどの Zip ファイルをデプロイしたかについては、以下の実行ログの [Related] の部分に 1 published とリンクがございますのでそちらを押下いただければ確認可能です。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image050.png"> </p><p>以上より、Azure DevOps を利用して Standard Logic Apps のデプロイが可能となります。<br>なお、こちらの設定につきましてはあくまでも参考までに最低限の動作方法をご案内する内容となります。<br>その他の設定については別途お客様環境に併せて CI/CD 環境の要件定義を実施いただき、別途設計、設定をお願いいたします。<br>また、先にも記載しておりますが、本ブログ記事につきましては Logic Apps 製品としての内容となりますため、本ブログ記事で記載しました各製品の詳細な操作方法についてはそれぞれの製品観点で別途弊社サポートへお問合せ下さい。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</li><li>Standard Logic Apps 側の設定</li><li>Azure DevOps 側の設定</li><li>実際の動作</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;近年の技術動向として、DevOps のように環境構築の自動化が進んでおりますが、Standard Logic Apps についても以下の公開情報のとおり DevOps の仕組みを利用して CI/CD の環境を構築することが可能でございます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps&quot;&gt;シングルテナントの Azure Logic Apps への DevOps のデプロイ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は、Azure DevOps を利用して、Standard Logic Apps にて CI/CD 環境を構築する方法についてご案内いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure DevOps" scheme="https://jpazinteg.github.io/blog/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps から VNet 経由で別リソースにアクセスする方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/vnetIntergration/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/vnetIntergration/</id>
    <published>2023-08-20T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.484Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Standard Logic Apps から VNet 経由で別リソースにアクセスする方法について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>VNet 統合を有効化し、VNet 経由で Azure Blob Storage 等にアクセスされたい方</li></ul><h2 id="VNet-を経由する条件"><a href="#VNet-を経由する条件" class="headerlink" title="VNet を経由する条件"></a>VNet を経由する条件</h2><p>Logic Apps から別リソースにアクセスする際に、VNet を経由するためにはいくつかの条件があります。</p><ul><li>Standard Logic Apps を利用する</li><li>VNet 統合を有効化する</li><li>built-in (組み込み) タイプのコネクタを利用する</li><li>アクセス先のリソースに、プライベート エンドポイントを用意する</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>以下の例では、VNet を経由して Azure Blob Storage にアクセスする方法をご紹介します。</p><h3 id="Standard-Logic-Apps-を利用する"><a href="#Standard-Logic-Apps-を利用する" class="headerlink" title="Standard Logic Apps を利用する"></a>Standard Logic Apps を利用する</h3><p>Standard Logic Apps を新規に作成します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration01.jpg"></p><p>Standard Logic Apps と従量課金 タイプの違いにつきましては、以下の公開情報に記載があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare">Azure Logic Apps でのシングルテナント、マルチテナント、統合サービス環境の比較</a></li></ul><h3 id="VNet-統合を有効化する"><a href="#VNet-統合を有効化する" class="headerlink" title="VNet 統合を有効化する"></a>VNet 統合を有効化する</h3><p>VNet 統合の有効化につきましては、以下の公開情報にも詳細について記載があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint#set-up-outbound-traffic-using-virtual-network-integration">仮想ネットワーク統合を使って送信トラフィックを設定する</a></li></ul><p>適宜 VNet を作成し、Logic Apps 用のサブネットを用意します。<br>[設定 - ネットワーク] を開き、「送信トラフィック」の「VNet 統合」を選択します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration02.jpg"></p><p>作成しておいた Logic Apps 用のサブネットを選択します。<br>このとき、VNet 統合に利用するサブネットは空で、かつ委任されていない状態である必要があります。<br>別リソースで既に利用されているものは、「統合に使用不可」となり選択いただくことができかねます。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration03.jpg"></p><p>なお、ご参考とはなりますが、同一 App Service プランを利用している複数の Standard Logic Apps において、<br>それぞれで異なるサブネットを VNet 統合に利用することは推奨されておりません。<br>設定自体は可能でございますが、[問題の診断と解決] - [Networking] - [VNet 統合に関する情報] にて、以下のような警告が表示されます。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration04.jpg"></p><p>Logic Apps 側の公開情報ではなく、類似製品の Web Apps 側の公開情報とはなりますが、以下のような記載があります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration08.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-vnet-integration#limitations">アプリを Azure 仮想ネットワークと統合する # 制限事項</a></li></ul><h3 id="built-in-組み込み-タイプのコネクタを利用する"><a href="#built-in-組み込み-タイプのコネクタを利用する" class="headerlink" title="built-in (組み込み) タイプのコネクタを利用する"></a>built-in (組み込み) タイプのコネクタを利用する</h3><p>built-in (組み込み) タイプのコネクタは、トリガーおよびアクション追加時に「ランタイム」にて「アプリ内」にチェックを入れることで検索いただくことが可能です。<br>今回の例では、built-in タイプの「Azure Blob Storage」コネクタを利用します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration05.jpg"></p><p>「Azure Blob Storage」コネクタには、built-in (組み込み) タイプのコネクタと、マネージド コネクタの 2 種類のご用意がございます。<br>「アプリ内」マークがございますのが、built-in (組み込み) タイプとなります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration06.jpg"></p><p>built-in (組み込み) タイプのコネクタは、Azure Functions 拡張性モデルに基づいており、Azure Logic Apps ランタイムと同じプロセスで実行されます。<br>詳細につきましては、以下の公開情報があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in">Azure Logic Apps の組み込みコネクタ</a></li></ul><p>以下に記載の通り、built-in (組み込み) タイプのコネクタをご利用いただいた場合のみ、VNet を経由することが可能です。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration09.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/connectors/compare-built-in-azure-connectors#considerations-for-virtual-network-integration">Azure Logic Apps (Standard) での組み込み操作と Azure コネクタの違い # 仮想ネットワーク統合に関する考慮事項</a></li></ul><p>また、built-in (組み込み) タイプのコネクタは、マネージド コネクタに比べて種類が少ないため、ご希望のリソースに対応しているコネクタのご用意がない場合もございます。<br>この点につきましても、ご理解賜れますと幸いです。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-in-consumption-versus-standard">Azure Logic Apps の組み込みコネクタ # 従量課金と Standard の組み込みコネクタの比較</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/connectors/built-in/reference/">Azure Logic Apps Standard built-in service provider connectors documentation</a></li></ul><p>なお、マネージド コネクタをご利用いただいた場合には、<strong>VNet 統合を有効化していても</strong>コネクタを経由した後に対象リソースへアクセスする動作となりますので、<br>パブリック IP アドレスからの通信となります。<br>ただし、アクセス先のリソースが Microsoft 製品の場合、Microsoft のネットワークにルーティングされ、パブリック インターネットは経由いたしません。<br>以下、公開資料からの抜粋となります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration10.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/networking/microsoft-global-network#get-the-premium-cloud-network">マイクロソフトのグローバル ネットワーク # 最高のクラウド ネットワークの実現</a></li></ul><p>VNet 統合を有効化していて、かつマネージド コネクタもご利用されたい場合には、マネージド コネクタへ向かう通信 (サービス タグ「AzureConnectors.{リージョン}」を宛先とする通信) を、<br>NSG や Azure Firewall 等で許可する必要があります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration11.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/connectors/compare-built-in-azure-connectors#considerations-for-virtual-network-integration">Azure Logic Apps (Standard) での組み込み操作と Azure コネクタの違い # 仮想ネットワーク統合に関する考慮事項</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#firewall-ip-configuration-considerations">Azure Logic Apps の制約と構成の参考文献 # ファイアウォールの IP 構成に関する考慮事項</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><h3 id="アクセス先のリソースに、プライベート-エンドポイントを用意する"><a href="#アクセス先のリソースに、プライベート-エンドポイントを用意する" class="headerlink" title="アクセス先のリソースに、プライベート エンドポイントを用意する"></a>アクセス先のリソースに、プライベート エンドポイントを用意する</h3><p>今回の例では、ストレージ アカウント側で blob のプライベート エンドポイントを作成します。<br>Standard Logic Apps の VNet 統合に利用したサブネットと、同一 VNet 内の異なるサブネットに配置しています。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration07.jpg"></p><p>上記の設定によって、VNet およびプライベート エンドポイントを経由しての通信が可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Standard Logic Apps から VNet 経由で別の Azure リソースにアクセスする方法についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Standard Logic Apps から VNet 経由で別リソースにアクセスする方法について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="VNet Integration" scheme="https://jpazinteg.github.io/blog/tags/VNet-Integration/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps からストレージ アカウントへの疎通を確認する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-Ping/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-Ping/</id>
    <published>2023-08-20T02:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.424Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。今回は、Standard Logic Apps から、関わるストレージ アカウントに対して、ツールにて接続の疎通を確認する方法をご紹介いたします。</p><span id="more"></span><h2 id="こんな時に"><a href="#こんな時に" class="headerlink" title="こんな時に"></a>こんな時に</h2><ul><li>閉域ネットワーク構成にて Standard Logic Apps を管理したい。</li><li>Azure ポータルから Standard Logic Apps を開いた際に予期しないエラーが出るのでトラブルシューティングしたい。</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Standard Logic Apps とストレージ アカウント</li><li>「高度なツール」</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Standard-Logic-Apps-とストレージ-アカウント"><a href="#Standard-Logic-Apps-とストレージ-アカウント" class="headerlink" title="Standard Logic Apps とストレージ アカウント"></a>Standard Logic Apps とストレージ アカウント</h2><p>前提として、Standard Logic Apps を作成した際に合わせてストレージ アカウントに作成されるコンテナやファイルは、ワークフロー情報や、実行履歴情報が格納されているものとなります。以下記事にて概要をご覧いただけます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/">Standard Logic Apps と関連するストレージ アカウント | Japan Azure Integration Support Blog</a></li></ul><p>ここでは後述のツールのために、対象のストレージ アカウントに対して [Azure ポータル] - [ストレージ アカウント] - [&lt;対象の ストレージ アカウント&gt;] - [設定 - エンドポイント] と遷移し、以下のように Blob、File、Queue、Table の 4 つのエンドポイントを取得しておきます。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-4.png"></p><h2 id="「高度なツール」"><a href="#「高度なツール」" class="headerlink" title="「高度なツール」"></a>「高度なツール」</h2><p>本題となるツールです。下記「高度なツール」から、Kudu というものに移動することができます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/app-service/resources-kudu">Kudu サービスの概要 - Azure App Service | Microsoft Learn</a></li></ul><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-1.png"></p><p>Kudu 上で、Debug console から CMD へ進みます。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-2.png"></p><p>ここで、下部に現出します CLI より、tcpping コマンド、nameresolver コマンドの実施が可能となります。</p><p><code>tcpping &lt;先に取得したストレージ Blob、File、Queue、Table の各エンドポイント&gt;:443</code></p><p><code>nameresolver &lt;先に取得したストレージ Blob、File、Queue、Table の各エンドポイント&gt;</code></p><p>「samplestorage」に対する例: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcpping samplestorage.blob.core.windows.net:443 </span><br><span class="line"></span><br><span class="line">nameresolver samplestorage.blob.core.windows.net</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-3.png"></p><p>無事 Success および IP が確認できました。以上の形で、宛先ストレージ アカウントに疎通が取れているか確認いただけます。</p><p>なお留意点としまして、作業端末よりツールへのアクセス許可が必要となります。以下 Error 403 となります場合は、まずは Azure ポータル より、作業端末から Standard Logic Apps へのアクセスが十分かご確認ください。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-0.png"></p><ul><li>参考: <a href="https://learn.microsoft.com/ja-jp/azure/app-service/app-service-ip-restrictions?tabs=azurecli">Azure App Service のアクセス制限 - Azure App Service | Microsoft Learn</a></li></ul><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Standard Logic Apps とストレージ アカウントに言及したドキュメントや記事には、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account">Standard ロジック アプリをプライベート ストレージ アカウントにデプロイする - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/functions-networking-options?tabs=azure-cli#troubleshooting">Azure Functions のネットワーク オプション # トラブルシューティング | Microsoft Learn</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/">ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成 | Japan Azure Integration Support Blog</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Standard Logic Apps を閉域ネットワーク構成にて管理する際、知っておくと便利なツール「高度なツール Kudu」についてご紹介しました。引き続き皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。今回は、Standard Logic Apps から、関わるストレージ アカウントに対して、ツールにて接続の疎通を確認する方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Storage Account" scheme="https://jpazinteg.github.io/blog/tags/Storage-Account/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ を有効化する手順・メッセージを送受信する手順</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/</id>
    <published>2023-07-04T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.488Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスについて、有効化する手順、コマンドから有効化されているかを確認する手順、サンプルを用いたメッセージを送受信する手順についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ をインストール (有効化) する</li><li>MSMQ が有効化されているか確認する</li><li>メッセージを送信する</li><li>メッセージを受信する </li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> にもご案内がございます。</p><h2 id="MSMQ-をインストール-有効化-する"><a href="#MSMQ-をインストール-有効化-する" class="headerlink" title="MSMQ をインストール (有効化) する"></a>MSMQ をインストール (有効化) する</h2><p>MSMQ のインストールに関する公開情報については以下に記載があります。</p><ul><li><a href="https://docs.microsoft.com/ja-jp/dotnet/framework/wcf/samples/installing-message-queuing-msmq">メッセージ キュー (MSMQ) のインストール</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/#MSMQ-%E3%82%92%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">MSMQ をドメインモードでインストールする手順について | Japan Azure Integration Support Blog</a></li></ul><h2 id="MSMQ-が有効化されているか確認する"><a href="#MSMQ-が有効化されているか確認する" class="headerlink" title="MSMQ が有効化されているか確認する"></a>MSMQ が有効化されているか確認する</h2><p>MSMQ が有効化されているかは、以下のコマンドよりご確認いただけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dism /online /Get-FeatureInfo /FeatureName:MSMQ</span><br></pre></td></tr></table></figure><p>また、サービスが起動しているかは、以下のコマンドよりご確認いただけます。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc query MSMQ</span><br></pre></td></tr></table></figure><h2 id="メッセージを送信する"><a href="#メッセージを送信する" class="headerlink" title="メッセージを送信する"></a>メッセージを送信する</h2><p>PowerShell にてメッセージを送信するサンプルです。</p><p>以下のようにキューを作成しておきます。<br><img src="/blog/MSMQ/MsmqCheckInstall/MsmqCheckInstall.png"></p><p>サンプル 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=TCP:&lt;送信先 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Send(&quot;Hello World&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/#MSMQ-%E3%82%92%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">HTTP サポート</a> を有効化している場合は以下もご利用いただけます。</p><p>サンプル 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=http://&lt;送信先 コンピューター名&gt;/msmq/private$/&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Send(&quot;Hello World HTTP&quot;)</span><br></pre></td></tr></table></figure><h2 id="メッセージを受信する"><a href="#メッセージを受信する" class="headerlink" title="メッセージを受信する"></a>メッセージを受信する</h2><p>PowerShell にてメッセージを受信するサンプルです。</p><p>サンプル:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=&lt;プロトコル名&gt;:&lt;受信 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Formatter = new-object System.Messaging.XmlMessageFormatter([string])</span><br><span class="line">$mq.Peek()</span><br></pre></td></tr></table></figure><p>以下のように受信できます。<br><img src="/blog/MSMQ/MsmqCheckInstall/MsmqCheckInstall1.png"></p><p>一連の動作確認にて、MSMQ をご理解いただければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ をインストール (有効化) する</li><li>MSMQ が有効化されているか確認する</li><li>メッセージを送信する</li><li>メッセージを受信する </li></ul><p>オンプレミス製品 MSMQ のご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスについて、有効化する手順、コマンドから有効化されているかを確認する手順、サンプルを用いたメッセージを送受信する手順についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps における再試行について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/retryPolicy/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/retryPolicy/</id>
    <published>2023-06-20T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.472Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps における再試行について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps の再試行ポリシーについて知りたい方</li><li>Logic Apps で再試行の設定を解除されたい方</li><li>再試行ポリシー対象外の場合でも、再試行を行いたい方</li></ul><h2 id="Logic-Apps-の再試行ポリシー"><a href="#Logic-Apps-の再試行ポリシー" class="headerlink" title="Logic Apps の再試行ポリシー"></a>Logic Apps の再試行ポリシー</h2><p>Logic Apps では、「HTTP」アクション等一部のトリガーおよびアクションにて、再試行ポリシーを設定することが可能です。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#retry-policies">Azure Logic Apps におけるエラーと例外の処理 # 再試行ポリシー</a></li></ul><p>上記に記載がございますように、特定のレスポンス コード (<strong>408、429、または 5xx 応答</strong>) を受け取った場合にのみ自動的に再試行されます。</p><h2 id="再試行ポリシーのデフォルト設定"><a href="#再試行ポリシーのデフォルト設定" class="headerlink" title="再試行ポリシーのデフォルト設定"></a>再試行ポリシーのデフォルト設定</h2><p>既定の設定では、再試行ポリシーは有効化されています。<br>具体的な設定値は以下となります。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#default-retry-policy">Azure Logic Apps におけるエラーと例外の処理 # 既定の再試行ポリシー</a></li></ul><h2 id="再試行ポリシーの設定変更"><a href="#再試行ポリシーの設定変更" class="headerlink" title="再試行ポリシーの設定変更"></a>再試行ポリシーの設定変更</h2><p>再試行ポリシーは無効化したり、回数および間隔をご変更いただくことが可能です。</p><p><strong>&lt;従量課金タイプ&gt;</strong><br>対象のトリガーまたはアクションを展開し、右上の「…」を押下して「設定」を選択します。<br>以下は「HTTP」アクションでの例になります。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy03.jpg"></p><p>「再試行ポリシー」にて設定をご変更いただけます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy04.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard Logic Apps でも対象のトリガーまたはアクションを選択し、「Settings」タブを開きます。<br>[ネットワーク - Retry Policy] にてご変更いただけます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy05.jpg"></p><p>再試行ポリシーの種類といたしましては「既定」以外に、「なし」、「指数間隔」、「固定間隔」がございます。<br>たとえば「HTTP」アクションで外部システムへリクエストを送信されているようなシナリオですと、安易に再試行できない場合もあるかと存じます。<br>その場合には、こちらで「なし」とご設定いただくことが可能です。<br>なお、弊社として推奨値は特にございませんので、以下の公開情報をご参照の上、お客様のご要件を照らし合わせましてご検討いただけますと幸いでございます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#retry-policy-types">Azure Logic Apps におけるエラーと例外の処理 # 再試行ポリシーの種類</a></li></ul><p>再試行ポリシーの制限につきましては、以下の公開情報もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#retry-policy-limits">Azure Logic Apps の制約と構成の参考文献 # 再試行ポリシーの制限</a></li></ul><h2 id="再試行ポリシー対象外の場合"><a href="#再試行ポリシー対象外の場合" class="headerlink" title="再試行ポリシー対象外の場合"></a>再試行ポリシー対象外の場合</h2><p>上述の通り、再試行ポリシーは特定のレスポンス コード (<strong>408、429、または 5xx 応答</strong>) を受け取った場合にのみ自動的に再試行されます。<br>これら以外のレスポンス コードを受け取った場合には、再試行されません。<br>もしこの場合にも再試行をご希望の場合には、適宜作り込みが必要となります。</p><p>Logic Apps では、「まで」アクションや「条件」アクション等のご用意がございますので、これらを組み合わせる方法が考えられます。<br><strong>「まで」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy07.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#until-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Until” ループ</a></li></ul><p><strong>「条件」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy08.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-conditional-statement">Azure Logic Apps のワークフロー アクションを制御する条件を追加する</a></li></ul><p>少し時間を空けてから再試行されたい場合には、「待ち時間」アクションのご用意もございます。<br><strong>「「待ち時間」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy09.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-delay">Azure Logic Apps で次のアクションの実行を遅延させる</a></li></ul><p>また、Logic Apps では「実行条件の構成」の設定によって、前段のアクションが失敗した場合でも後続処理を続けることが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#manage-the-run-after-behavior">Azure Logic Apps におけるエラーと例外の処理 # “実行条件” の動作を管理する</a></li></ul><p>以下に従量課金タイプの Logic Apps で、「HTTP」アクションと「まで」アクションを利用した場合についてのサンプルをご案内いたします。</p><p><img src="/blog/LogicApps/retryPolicy/retryPolicy10.jpg"></p><p>「まで」アクション内に「HTTP」アクションを追加します。<br>「まで」アクションの条件式として、「状態コード / 次の値に等しい / 200」と設定しております。<br>※ 「状態コード」につきましては、「動的なコンテンツの追加」を押下して追加することが可能でございます。</p><p>「制限の変更」にてループ回数 (再試行回数) をご設定いただけます。<br>無限ループとならないよう、ご注意ください。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#prevent-endless-loops">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # 無限ループを防ぐ</a></li></ul><p>実行した結果が以下となります。<br>レスポンス コードが 400 (200 ではない) 場合には、「まで」アクションの「制限の変更」にて設定されている回数分、繰り返し「HTTP」アクションを実行しております。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy11.jpg"></p><p>レスポンス コードが 200 の場合では、「HTTP」アクションを一回実行したのみでございます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy12.jpg"></p><p><strong>こちらはあくまでサンプルでございますので、お客様のご要件に応じまして適宜変更いただき、</strong><br><strong>実運用に向けましたテストおよびハンドリングにつきましては、お客様ご自身でご実施いただきますようお願い申し上げます。</strong></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps の再試行ポリシーの概要、設定変更、再試行ポリシーの対象外の場合についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps における再試行について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Retry Policy" scheme="https://jpazinteg.github.io/blog/tags/Retry-Policy/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で JDBC コネクタを利用した PostgreSQL 接続</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/PostgresqlJdbc/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/PostgresqlJdbc/</id>
    <published>2023-06-07T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.400Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>本記事は弊社海外ブログを日本語向けに解説した記事となります。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/configure-postgresql-connection-in-logic-apps-standard-with-jdbc/ba-p/3784988">Configure PostgreSQL Connection in Logic Apps (Standard) with JDBC, call Function with Execute Query</a></li></ul><p>Azure Logic Apps では、以下の PostgreSQL コネクタを利用してオンプレミス環境の PostgreSQL に接続することが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/postgresql/">PostgreSQL</a></li></ul><p>しかしながら、上記コネクタでは Azure Database for PostgreSQL への接続は本日 2023 年 6 月現在で不可でございます。<br>今回は、 Standard Logic Apps と JDBC コネクタを利用して、Azure Database for PostgreSQL へ接続する方法についてご案内します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps から Azure Database for PostgreSQL へ接続されたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>JDBC コネクタについて</li><li>事前準備</li><li>設定例と実行結果</li></ul><h2 id="JDBC-コネクタについて"><a href="#JDBC-コネクタについて" class="headerlink" title="JDBC コネクタについて"></a>JDBC コネクタについて</h2><p>本ブログでは以下の JDBC コネクタを利用して、 Azure Database for PostgreSQL へ接続いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/logic-apps/connectors/built-in/reference/jdbc/">JDBC</a></li></ul><p>JDBC コネクタについては本日 2023 年 6 月現在で全てのアクションがプレビュー機能として提供されております。その為、今後予告なく仕様変更が発生する場合がございますので予めご了承下さい。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>上記コネクタを利用するにあたり、以下の事前準備が必要となります。</p><ul><li><ol><li>Azure Database for PostgreSQL の設定</li></ol></li><li><ol start="2"><li>PostgreSQL の JDBC ドライバのダウンロード</li></ol></li><li><ol start="3"><li>Standard Logic Apps へ JDBC ドライバの配置</li></ol></li></ul><p>詳細については以下に記載していきます。</p><ol><li>Azure Database for PostgreSQL の設定<br>初めに、Azure Database for PostgreSQL の設定を実施いたします。<br>なお、こちらについてはデータベースやテーブルは既に作成されている前提で進めて参ります。</li></ol><p>Standard Logic Apps から Azure Database for PostgreSQL にアクセス可能にするために、[設定] - [接続のセキュリティ] より、以下の通り設定いたします。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image000.png"></p><p>・パブリック ネットワーク アクセスの拒否：いいえ<br>・ファイアウォール規則：はい<br>・SSL 接続を強制する：無効</p><p>以上で Azure Database for PostgreSQL の設定は完了です。</p><ol start="2"><li>PostgreSQL の JDBC ドライバのダウンロード</li></ol><p>参考基のブログ記事にもございます通り、以下のサイトより PostgreSQL の JDBC ドライバをダウンロードいたします。。</p><ul><li><a href="https://jdbc.postgresql.org/">PostgreSQL JDBC Driver</a></li></ul><p>本ブログ記事では Java 7 の資材をダウンロードいたします。。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image0001.png"></p><p>以上で JDBC ドライバのダウンロードは完了です。</p><ol start="3"><li>Standard Logic Apps へ JDBC ドライバの配置<br>これより、取得したドライバを Standard Logic Apps へ配置いたします。<br>ドライバを配置することにより JDBC コネクタで対象のドライバを呼び出し、Azure Database for PostgreSQL へ接続することが可能となります。</li></ol><p>まず、作成いただいている Standard Logic Apps のリソースを表示し、[開発ツール] - [高度なツール] より [移動→] のリンクを押下します。<br><img src="/blog/LogicApps/PostgresqlJdbc/image001.png"></p><p>次に、画面上部の [Debug console] より、”CMD” を選択します。<br><img src="/blog/LogicApps/PostgresqlJdbc/image002.png"></p><p>site\wwwroot ディレクトリへ遷移し、＋ マークを押下して以下のディレクトリを作成いたします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image003.png"></p><p>・作成するパス<br>lib\builtinOperationSdks\JAR（C:\home\site\wwwroot\lib\builtinOperationSdks\JAR がフルパス）</p><p>JAR ディレクトリを作成出来たらダウンロードした JDBC ドライバをドラッグアンドドロップします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image004.png"></p><p>以上で、事前準備の完了となります。</p><h2 id="設定例と実行結果"><a href="#設定例と実行結果" class="headerlink" title="設定例と実行結果"></a>設定例と実行結果</h2><p>それでは、Standard Logic Apps の設定に移ります。<br>まず、ワークフローを作成し、以下の通り JDBC コネクタを検索いたします。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image005.png"><br><img src="/blog/LogicApps/PostgresqlJdbc/image006.png"></p><p>サービス プロバイダー接続の設定について、以下の内容を設定いたします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image008.png"></p><p>・接続名：任意の値<br>・URL：Azure Database for PostgreSQL の [設定] - [接続文字列] より、JDBC の値を設定<br><img src="/blog/LogicApps/PostgresqlJdbc/image007.png"><br>{your_database}：設定いただいたデータベース<br>{your_password}：設定いただいたパスワード<br>User Identifier：ユーザー名<br>Password：設定いただいたパスワード</p><p>＜実行結果＞<br><img src="/blog/LogicApps/PostgresqlJdbc/image009.png"></p><p>以上より、JDBC コネクタを利用し、Azure Database for PostgreSQL へ接続することが可能でございます。</p><p>なお、先にも申し上げました通り、本コネクタについてはプレビュー機能で提供されております。今後将来的に予告なく内容が変更される場合がございますので予めご了承下さい。</p><p>こちらの仕組みをご利用になられる場合、お客様にて十分に検証を実施いただいたうえで採用要否についてご検討をいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>JDBC コネクタについて</li><li>事前準備</li><li>設定例と実行結果</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;本記事は弊社海外ブログを日本語向けに解説した記事となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/configure-postgresql-connection-in-logic-apps-standard-with-jdbc/ba-p/3784988&quot;&gt;Configure PostgreSQL Connection in Logic Apps (Standard) with JDBC, call Function with Execute Query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Azure Logic Apps では、以下の PostgreSQL コネクタを利用してオンプレミス環境の PostgreSQL に接続することが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/connectors/postgresql/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、上記コネクタでは Azure Database for PostgreSQL への接続は本日 2023 年 6 月現在で不可でございます。&lt;br&gt;今回は、 Standard Logic Apps と JDBC コネクタを利用して、Azure Database for PostgreSQL へ接続する方法についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="JDBC" scheme="https://jpazinteg.github.io/blog/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で Cosmos DB からドキュメントをクエリする</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-CosmosDB/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-CosmosDB/</id>
    <published>2023-06-01T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.392Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>今回は、Azure Logic Apps で Azure Cosmos DB から 「ドキュメントをクエリする」 方法をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><p>Logic Apps で Cosmos DB からドキュメントをクエリする</p><ul><li>基本</li><li>「ドキュメントをクエリする」アクション</li><li>「改ページ」に関して調整する</li></ul></li><li><p>まとめ</p></li></ul><h2 id="Logic-Apps-で-Cosmos-DB-からドキュメントをクエリする"><a href="#Logic-Apps-で-Cosmos-DB-からドキュメントをクエリする" class="headerlink" title="Logic Apps で Cosmos DB からドキュメントをクエリする"></a>Logic Apps で Cosmos DB からドキュメントをクエリする</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>Logic Apps から Cosmos DB へ接続しての処理を行う方法については、以下ドキュメントがございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-cosmos-db?tabs=consumption">Azure Cosmos DB への接続 - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/">Azure Cosmos DB - Connectors | Microsoft Learn</a></p><h3 id="「ドキュメントをクエリする」アクション"><a href="#「ドキュメントをクエリする」アクション" class="headerlink" title="「ドキュメントをクエリする」アクション"></a>「ドキュメントをクエリする」アクション</h3><p>ここでは例として、「ドキュメントをクエリする」アクション をご紹介いたします。以下がご利用いただけます。</p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_0.png"></p><p>Cosmos DB のデータ エクスプローラー画面と、以下のように対応しています。</p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_1.png"></p><h3 id="「改ページ」に関して調整する"><a href="#「改ページ」に関して調整する" class="headerlink" title="「改ページ」に関して調整する"></a>「改ページ」に関して調整する</h3><p>Cosmos DB で大量データをクエリすると、結果が複数のページにわたる場合があります。 Logic Apps ではこれに対し、以下設定で改ページ位置のしきい値を変更することが可能です。以下、参考ドキュメントがございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/query/pagination">Azure Cosmos DB での改ページ | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exceed-default-page-size-with-pagination#turn-on-pagination">改ページ位置の自動修正で項目やレコードを増やす - Azure Logic Apps | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_4.png"></p><p>上のように [改ページ位置の自動修正] 設定を [オフ] から [オン] に変更します。 [しきい値] プロパティに、そのアクションで返す結果の目標数として整数値を指定します。</p><h4 id="しきい値を設定しない場合"><a href="#しきい値を設定しない場合" class="headerlink" title="しきい値を設定しない場合"></a>しきい値を設定しない場合</h4><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_2.png"></p><h4 id="しきい値を設定した場合"><a href="#しきい値を設定した場合" class="headerlink" title="しきい値を設定した場合"></a>しきい値を設定した場合</h4><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_3.png"></p><p>このように、値を調整してデータを取り扱うことが可能となります。Logic Apps では、Cosmos DB に対してこのほかにも <a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/#%E3%82%B9%E3%83%88%E3%82%A2%E3%83%89-%E3%83%97%E3%83%AD%E3%82%B7%E3%83%BC%E3%82%B8%E3%83%A3%E3%82%92%E5%AE%9F%E8%A1%8C-(v2)">ストアド プロシージャを実行 (V2)</a> や <a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%BE%E3%81%9F%E3%81%AF%E6%9B%B4%E6%96%B0-(v3)">ドキュメントを作成または更新 (V3)</a> などのアクションが用意されております。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps で Cosmos DB からドキュメントをクエリする方法についてご紹介しました。より柔軟なデータ連携フロー構築において、参考になれば幸いです。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-cosmos-db?tabs=consumption">Azure Cosmos DB への接続 - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/">Azure Cosmos DB - Connectors | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/cosmos-db/introduction">Azure Cosmos DB | Microsoft Learn</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Azure Logic Apps で Azure Cosmos DB から 「ドキュメントをクエリする」 方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Cosmos DB" scheme="https://jpazinteg.github.io/blog/tags/Azure-Cosmos-DB/"/>
    
  </entry>
  
  <entry>
    <title>Azure Monitor のアラート発報時に Logic Apps を呼び出す方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/actionGroupSetting/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/actionGroupSetting/</id>
    <published>2023-05-23T15:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.452Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Azure Monitor でアラートが発報された時に Logic Apps を呼び出す方法について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>ログ アラートやメトリック アラート発報時に、Logic Apps を起動したい方</li><li>アクション グループで Logic Apps を選択されたい方</li></ul><h2 id="Azure-Monitor-のアクション-グループ"><a href="#Azure-Monitor-のアクション-グループ" class="headerlink" title="Azure Monitor のアクション グループ"></a>Azure Monitor のアクション グループ</h2><p>Azure Monitor ではアラート ルールを設定し、特定のリソースを監視することができます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/alerts-create-new-alert-rule?tabs=metric">新しいアラート ルールを作成する</a></li></ul><p>アラートが発報したことをトリガーに、Logic Apps を起動させることが可能です。<br>アクション グループで Logic Apps を選択します。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups">Azure Portal でのアクション グループの作成および管理</a></li></ul><p>具体的な設定方法は、以下になります。</p><ol><li>Logic Apps 側を作成する。<br>Logic Apps にて「HTTP 要求の受信時」トリガーを設定している必要があります。<br>「HTTP 要求の受信時」トリガーの詳細につきましては、以下の公開情報もございます。</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-reqres?tabs=consumption#add-a-request-trigger">Azure Logic Apps のワークフローに送信された受信 HTTPS 要求を処理する # Request トリガーの追加</a><br>また、アクション グループでは、従量課金タイプの Logic Apps と Standard Logic Apps の両方をご設定いただけます。</li></ul><p><strong>&lt;従量課金タイプ&gt;</strong><br>「HTTP 要求の受信時」トリガーを設定いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting01.jpg"><br><strong>&lt;Standard タイプ&gt;</strong><br>「Runtime」にて「アプリ内」にチェックを入れ、「Request」を選択いたします。<br>「When a HTTP request is received」トリガーを設定いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting02.jpg"></p><ol start="2"><li>アクション グループを作成する。<br>[モニター] - [アラート] にて「アクション グループ」を選択します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting03.jpg"><br>「 + 作成」を押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting04.jpg"><br>「基本」タブおよび「通知」タブを適宜設定し、「アクション」タブに遷移します。<br>「アクション タイプ」にて「ロジック アプリ」を選択します。<br>1 で作成した Logic Apps が存在するサブスクリプションおよびリソース グループをプルダウンで選択し、「ロジック アプリを選択します」にて対象の Logic Apps を選択します。</li></ol><p><strong>&lt;従量課金タイプ&gt;</strong><br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting05.jpg"><br><strong>&lt;Standard タイプ&gt;</strong><br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting06.jpg"><br>残りの設定を適宜行い、アクション グループを作成いたします。</p><h3 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h3><p>実際のアラートを発報せずに、アクション グループのテストを行うことが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#test-an-action-group-in-the-azure-portal">Azure Portal でのアクション グループの作成および管理 # Azureポータルでアクショングループをテストする。</a></li></ul><p>先ほどの手順で作成したアクション グループの [概要] を開き、「テスト」を押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting07.jpg"></p><p>「サンプルの種類を選択」にて任意のアラートを選択し、「アクション タイプ」にてテストしたいアクションにチェックを入れ、「Test」ボタンを押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting08.jpg"></p><p>このとき利用されるスキーマは、共通アラート スキーマになります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/alerts-common-schema">共通アラート スキーマ</a></li></ul><p>以下はテストが成功した状態になります。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting09.jpg"></p><p>対象の Logic Apps の履歴を確認すると、トリガーが起動しています。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting10.jpg"></p><p>たとえば「ログ アラート V2」ですと、以下のようなスキーマが連携されます。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting11.jpg"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;schemaId&quot;</span>: <span class="string">&quot;azureMonitorCommonAlertSchema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;essentials&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;alertId&quot;</span>: <span class="string">&quot;/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.AlertsManagement/alerts/12345678-1234-1234-1234-1234567890ab&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertRule&quot;</span>: <span class="string">&quot;test-logAlertRule-v2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;severity&quot;</span>: <span class="string">&quot;Sev3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;signalType&quot;</span>: <span class="string">&quot;Log&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;monitorCondition&quot;</span>: <span class="string">&quot;Fired&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;monitoringService&quot;</span>: <span class="string">&quot;Log Alerts V2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertTargetIDs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;/subscriptions/11111111-1111-1111-1111-111111111111/resourcegroups/test-RG/providers/microsoft.operationalinsights/workspaces/test-logAnalyticsWorkspace&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;test-computer&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;originAlertId&quot;</span>: <span class="string">&quot;22222222-2222-2222-2222-222222222222&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;firedDateTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Alert rule description&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;essentialsVersion&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertContextVersion&quot;</span>: <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;alertContext&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;customKey1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;customKey2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;conditionType&quot;</span>: <span class="string">&quot;LogQueryCriteria&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;condition&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;windowSize&quot;</span>: <span class="string">&quot;PT1H&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;allOf&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;searchQuery&quot;</span>: <span class="string">&quot;Heartbeat&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;metricMeasureColumn&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;targetResourceTypes&quot;</span>: <span class="string">&quot;[&#x27;Microsoft.OperationalInsights/workspaces&#x27;]&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;GreaterThan&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;timeAggregation&quot;</span>: <span class="string">&quot;Count&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;dimensions&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Computer&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;test-computer&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;metricValue&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;failingPeriods&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;numberOfEvaluationPeriods&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;minFailingPeriodsToAlert&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;linkToSearchResultsUI&quot;</span>: <span class="string">&quot;https://portal.azure.com#@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/source/Alerts.EmailLinks/scope/%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F11111111-1111-1111-1111-111111111111%2FresourceGroups%2Ftest-RG%2Fproviders%2FMicrosoft.OperationalInsights%2Fworkspaces%2Ftest-logAnalyticsWorkspace%22%7D%5D%7D/q/aBcDeFgHiJkLmNaBcDeFgHiJkLmNaBcDeFgHiJkLmNaBcDeFgHiJkLmN1234567890ZAZBZiaGBlaG5lbKlnAAFRmnp6WNUZoqvTBAA%3D/prettify/1/timespan/2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToFilteredSearchResultsUI&quot;</span>: <span class="string">&quot;https://portal.azure.com#@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/source/Alerts.EmailLinks/scope/%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F11111111-1111-1111-1111-111111111111%2FresourceGroups%2Ftest-RG%2Fproviders%2FMicrosoft.OperationalInsights%2Fworkspaces%2Ftest-logAnalyticsWorkspace%22%7D%5D%7D/q/aBcDeFgHiJkLmN%2Fl35oOTZoKioEOouaBcDeFgHiJkLmN%2BaBcDeFgHiJkLmN%2BaBcDeFgHiJkLmN7HHgOCZTR0Ak%2FaBcDeFgHiJkLmN1234567890Ltcw%2FOqZS%2FuX0L5d%2Bx3iMHNzQiu3Y%2BzsjpFSWlOzgA87vAxeHW2MoAtQxe6OUvVrZR3XYZPXrd%2FIE/prettify/1/timespan/2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToSearchResultsAPI&quot;</span>: <span class="string">&quot;https://api.loganalytics.io/v1/workspaces/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/query?query=Heartbeat%7C%20where%20TimeGenerated%20between%28datetime%282021-11-16T10%3A17%3A39.0000000Z%29..datetime%282021-11-16T11%3A17%3A39.0000000Z%29%29&amp;timespan=2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToFilteredSearchResultsAPI&quot;</span>: <span class="string">&quot;https://api.loganalytics.io/v1/workspaces/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/query?query=Heartbeat%7C%20where%20TimeGenerated%20between%28datetime%282021-11-16T10%3A17%3A39.0000000Z%29..datetime%282021-11-16T11%3A17%3A39.0000000Z%29%29%7C%20where%20tostring%28Computer%29%20%3D%3D%20%27test-computer%27&amp;timespan=2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;windowStartTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;windowEndTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テスト実行ではサンプル データが利用されますので、実在するサブスクリプション ID やリソース グループは連携されません。</p><h2 id="Logic-Apps-側のアクセス制限について"><a href="#Logic-Apps-側のアクセス制限について" class="headerlink" title="Logic Apps 側のアクセス制限について"></a>Logic Apps 側のアクセス制限について</h2><p>Logic Apps 側で受信トラフィックに制限を設けるご想定の場合には、アクション グループからの通信を許可する必要があります。</p><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプの場合、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ワークフロー設定] にて受信トラフィックに制限を設けることが可能です。<br>こちらでアクション グループが利用している IP アドレスを許可します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting12.jpg"></p><p>以下のダウンロード先より、アクション グループのサービス タグで利用されている IP アドレスを取得することが可能です。</p><ul><li>ダウンロード先 : <a href="https://www.microsoft.com/en-us/download/details.aspx?id=56519">Azure IP Ranges and Service Tags – Public Cloud</a></li></ul><p>ダウンロードした JSON ファイルを開き、「ActionGroup」に該当する IP アドレスをすべて許可します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting13.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard Logic Apps の場合、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」の「アクセス制限」を選択します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting14.jpg"></p><p>Standard Logic Apps では、サービス タグを利用してアクセス制限を行うことが可能です。</p><p>アクション グループからの通信を許可するためには、「ActionGroup」というサービス タグを許可するルールに追加する必要がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/ip-addresses#action-group-service-tag">Azure Monitor で使用される IP アドレス # アクション グループ サービス タグ</a></li></ul><p>以下のように許可ルールを追加いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting15.jpg"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Azure Monitor のアラート発報時に Logic Apps を起動させる方法と、そのテスト方法およびアクセス制限による諸注意についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/Integration-logAlertRule/">ログ アラート ルールの発報時に出力されたデータからクエリの検索結果を取得する</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Azure Monitor でアラートが発報された時に Logic Apps を呼び出す方法について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Monitor" scheme="https://jpazinteg.github.io/blog/tags/Azure-Monitor/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps のワークフローを API 操作でキャンセルする</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/</id>
    <published>2023-05-02T07:00:00.000Z</published>
    <updated>2024-10-31T07:20:24.428Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。</p><p>まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP">Workflow Runs - Cancel</a></li></ul><p>しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。<br>そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Standard Logic Apps の実行中のワークフローを REST API でキャンセルしたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><h2 id="キャンセル処理の-API-の確認方法"><a href="#キャンセル処理の-API-の確認方法" class="headerlink" title="キャンセル処理の API の確認方法"></a>キャンセル処理の API の確認方法</h2><p>まず、先にもご案内しました通り、Standard Logic Apps のワークフローの処理をキャンセルする API については公開情報はございません。<br>その為、今回の記事では以下のリソース プロバイダーに対してキャンセル処理の API を直接実行することで、ワークフローのキャンセル処理を実装致します。</p><ul><li><a href="https://learn.microsoft.com/en-US/azure/templates/microsoft.web/sites/hostruntime/webhooks/api/workflows/runs?pivots=deployment-language-arm-template">Microsoft.Web sites/hostruntime/webhooks/api/workflows/runs</a></li></ul><p>実際にどのような方法で設定するかにつきましてですが、こちらブラウザの開発者ツールにて GUI 操作時のリクエストを解析することで確認可能でございます。<br>確認方法につきまして、以下に参考例を記載いたします。</p><p>＜確認方法＞</p><ol><li><p>ブラウザを起動し、開発者ツール (F12) を実行します。本例では chromium 版 Edge を利用しております。</p></li><li><p> 実際に実行中のワークフローを [実行の取り消し] ボタンでキャンセルいたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image001.png"> </p></li><li><p>実際のリクエストとして “cancel?api-version=2018-11-01” の実行結果が出力されますので、こちらのヘッダに記載されている要求 URL を確認します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image002.png"> </p></li></ol><p>以上より、以下のような API が実行されていることを確認出来ます。</p><p>＜実際に実行されている API＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://management.azure.com/subscriptions/&#123;SubscriptionId&#125;/resourceGroups/&#123;ResourceGroupName&#125;/providers/Microsoft.Web/sites/&#123;LogicAppsName&#125;/hostruntime/runtime/webhooks/workflow/api/management/workflows/&#123;WorkFlowName&#125;/runs/&#123;RunId&#125;/cancel?api-version=2018-11-01</span><br></pre></td></tr></table></figure><p>・SubscriptionId：Standard Logic Apps の存在するサブスクリプション ID<br>・ResourceGroupName：Standard Logic Apps の存在するリソース グループ名<br>・LogicAppsName：Standard Logic Apps 名<br>・WorkFlowName：Standard Logic Apps 内に作成した ワークフロー名<br>・RunId：実行 ID</p><p>なお、こちらの API の内容については 2023/05/01 現在の内容となります。<br>今後将来的に予告なく内容が変更される場合がございますので予めご了承下さい。</p><p>これらを基に、以下の通りキャンセル処理の設定例を記載いたします。</p><h2 id="設定例と実行結果"><a href="#設定例と実行結果" class="headerlink" title="設定例と実行結果"></a>設定例と実行結果</h2><p>本例では、マネージド ID を有効にした従量課金タイプの Logic Apps より、上記 API を実行して処理のキャンセルを実装いたします。<br>まず、Standard Logic Apps とは別で従量課金タイプの Logic Apps を用意し、事前にマネージド ID を有効に致します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image003.png"> </p><p>次に、そのまま同一画面上の [Azure ロールの割り当て] ボタンを選択し、マネージド ID に “Web サイト共同作成者” ロールを付与します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image004.png"> </p><p><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image005.png"> </p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/role-based-access-control/built-in-roles#website-contributor">Azure 組み込みロール # Website Contributor</a></li></ul><p>次に、従量課金タイプのワークフローにて、HTTP アクションを設定いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-http">Azure Logic Apps から HTTP または HTTPS でサービス エンドポイントを呼び出す</a></li></ul><p>以下の通りパラメーターを指定し、認証方法にマネージド ID を指定いたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image006.png"><br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image007.png"> </p><p>以上の設定より、マネージド ID を基にリクエストを行うことで API を実行し、実行中のワークフローの処理をキャンセルすることが可能でございます。</p><p>＜実行例＞<br>・Standard Logic Apps にてワークフロー実行中。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image008.png"> </p><p>・従量課金タイプよりワークフローを実行。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image009.png"> </p><p>・結果<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image010.png"> </p><p>以上より、API 操作を基に Standard Logic Apps のワークフローの実行をキャンセルすることが可能でございます。<br>なお、先にも申しました通り、こちら公開情報がございませんことと、2023/05/01 現在の情報となりますので、今後内容が変更される可能性が十分にございます。<br>お手数をおかけして申し訳ございませんが、上記を踏まえまして、お客様にて十分に検証を実施いただいたうえで採用要否についてご検討をいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。&lt;/p&gt;
&lt;p&gt;まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP&quot;&gt;Workflow Runs - Cancel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。&lt;br&gt;そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
</feed>
