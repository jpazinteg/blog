<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Japan Azure Integration Support Blog</title>
  
  <subtitle>日本マイクロソフトの Azure Integration に関するサポート情報のブログです。</subtitle>
  <link href="https://jpazinteg.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jpazinteg.github.io/blog/"/>
  <updated>2023-09-28T13:14:04.828Z</updated>
  <id>https://jpazinteg.github.io/blog/</id>
  
  <author>
    <name>Japan Azure Integration Support Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特定の条件の Logic Apps ワークフローや API 接続を検索する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/</id>
    <published>2023-09-20T02:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.828Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p>今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提</li><li>シナリオ 1: 従量課金版 Logic Apps を検索する</li><li>シナリオ 2: Standard 版 Logic Apps を検索する</li><li>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</li><li>シナリオ 4: API 接続を検索する</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前提として、Logic Apps を含む各種リソースを検索する際は、Azure Resource Graph エクスプローラー をご利用いただけます。以下ドキュメントに概要がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="シナリオ-1-従量課金版-Logic-Apps-を検索する"><a href="#シナリオ-1-従量課金版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 1: 従量課金版 Logic Apps を検索する"></a>シナリオ 1: 従量課金版 Logic Apps を検索する</h2><p>踏まえ、まずは基本として、従量課金版 Logic Apps を Azure Resource Graph エクスプローラーから検索いただく方法です。左側 カテゴリ から、「ロジック アプリ」がございます。</p><p>例として以下クエリにて、リソースが表示されます。name 列にて Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-1.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources</a></p><h2 id="シナリオ-2-Standard-版-Logic-Apps-を検索する"><a href="#シナリオ-2-Standard-版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 2: Standard 版 Logic Apps を検索する"></a>シナリオ 2: Standard 版 Logic Apps を検索する</h2><p>さて Standard 版 Logic Apps は上と異なり、「AppServiceResources」からご覧いただけます。</p><p>例として以下クエリにて、リソースが表示されます。同じく name 列にて Standard Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources</a></p><h2 id="シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する"><a href="#シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する" class="headerlink" title="シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する"></a>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</h2><p>踏まえまして、特定のコネクタを利用しているなど、プロパティに応じた Logic Apps を検索したいケースがあるかと思います。</p><p>例として以下のようなクエリにて、対象を絞り込むことができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;teams&quot; // 例として teams のコネクタを利用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line">| top 3 by name // name 列で並べた、先頭の 3 個のレコードを返す</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-4.png"></p><p>Standard Logic Apps の場合は以下のようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| where properties contains &quot;Send_an_email_(V2)&quot; // 例として Send_an_email_(V2) というアクション名を使用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-3.png"></p><h2 id="シナリオ-4-API-接続を検索する"><a href="#シナリオ-4-API-接続を検索する" class="headerlink" title="シナリオ 4: API 接続を検索する"></a>シナリオ 4: API 接続を検索する</h2><p>さらにここまでの内容に加え、API 接続を検索するには以下クエリがご利用いただけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| extend status = tostring(properties.statuses[0].status)</span><br><span class="line">| where type == &#x27;microsoft.web/connections&#x27;</span><br><span class="line">| where status == &#x27;Error&#x27; // 例として Error 状態のもの</span><br><span class="line">| project subscriptionId, resourceGroup, apiConnection=name, id</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-5.png"></p><p>また上記の API 接続をもとに、対象の Logic Apps を見つけることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;azureblob-24&quot; // API 接続名で検索する</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p><a href="https://jpazinteg.github.io/blog/LogicApps/ApiConnectionsDelete/">Azure Logic Apps の コネクタにおける不要な接続情報の削除方法について | Japan Azure Integration Support Blog</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ についてサンプルをご紹介しました。Logic Apps と関連リソースの整理整頓に役立てば幸いです。引き続き、皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps と Azure DevOps で CI/CD 環境を構成する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsCdci/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsCdci/</id>
    <published>2023-08-29T07:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.848Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>近年の技術動向として、DevOps のように環境構築の自動化が進んでおりますが、Standard Logic Apps についても以下の公開情報のとおり DevOps の仕組みを利用して CI/CD の環境を構築することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps">シングルテナントの Azure Logic Apps への DevOps のデプロイ</a></li></ul><p>今回は、Azure DevOps を利用して、Standard Logic Apps にて CI/CD 環境を構築する方法についてご案内いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Azure DevOps を利用して Standard Logic Apps のワークフローをデプロイしたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</li><li>Standard Logic Apps 側の設定</li><li>Azure DevOps 側の設定</li><li>実際の動作</li></ul><h2 id="Azure-DevOps-を利用した-Standard-Logic-Apps-の-CI-CD-環境の概要"><a href="#Azure-DevOps-を利用した-Standard-Logic-Apps-の-CI-CD-環境の概要" class="headerlink" title="Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要"></a>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</h2><p>始めに、本ブログ記事につきましては Logic Apps 製品としての内容となります。そのため、Azure DevOps、Azure Functions、Azure App Service の製品に関する詳細については説明を割愛いたします。詳細な操作方法についてはそれぞれの製品観点で別途弊社サポートへお問合せ下さい。<br>また、本ブログ記事でご案内する内容としては手動でのデプロイ、かつ最低限の操作方法となります。そのため、各設定についてはお客様のビジネス要件に合わせて別途カスタマイズいただく必要があることと、本ブログ記事の内容については弊社サポートとしてお客様のビジネス要件に合わせたカスタマイズの対応は実施致しませんので予めご了承下さい。</p><p>まず、Standard Logic Apps での DevOps の設定方法については以下の公開情報を基に設定を進めて参ります。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-devops">シングルテナントの Azure Logic Apps に Standard ロジック アプリ ワークフローの DevOps デプロイを設定する</a></li></ul><p>上記の公開情報にもございます通り、Azure Logic Apps 製品としましては デプロイ スロットをサポートしておりません。<br>Azure Logic Apps にて環境を構築するにあたり、以下の通り Azure Functions のデプロイ タスクを利用し、Standard Logic Apps へデプロイする必要がございます。</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/devops/pipelines/tasks/reference/azure-function-app-v1?view=azure-pipelines&viewFallbackFrom=azure-devops&preserve-view=true">AzureFunctionApp@1 - v1 タスクのAzure Functions</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/functions-how-to-azure-devops?tabs=csharp,yaml&pivots=v1">Azure Pipelines を使用した継続的デリバリー</a></p></li></ul><p>大まかな構成の概要としましては以下の構成となります。</p><ol><li>Azure DevOps 上の Repos にワークフローの構成ファイルを格納</li><li>1 で格納したファイルを基に Pipelines にて App Service Plan (Standard Logic Apps) にワークフローをデプロイ</li></ol><p>また、上記の操作を実施するにあたり、Git を利用しますので、予め Git を利用可能な状態に環境設定をお願いいたします。<br>本例では Visual Studio Code より Git 操作を実施いたします。<br><a href="https://code.visualstudio.com/">Visual Studio Code</a></p><h2 id="Standard-Logic-Apps-側の設定"><a href="#Standard-Logic-Apps-側の設定" class="headerlink" title="Standard Logic Apps 側の設定"></a>Standard Logic Apps 側の設定</h2><p>始めに、Azure Portal より [ロジック アプリ] - [追加] より [ロジック アプリの作成] 画面を表示し、Standard Logic Apps を新規作成します。こちらは任意の設定で作成いただければと思います。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image008.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image009.png"> </p><p>次に、[ワークフロー] - [ワークフロー] より、任意のワークフローを作成します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image010.png"> </p><p>・サンプル<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image011.png"> </p><p>ワークフローを作成しましたら、Standard Logic Apps の概要画面より、[アプリ コンテンツのダウンロード] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image012.png"> </p><p>今回の設定方法では “サイトのコンテンツ” を指定いただき、”ダウンロードにアプリ設定を含める” のチェックを外した状態で “ダウンロード” ボタンを押下してください。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image013.png"> </p><p>ダウンロードされた Zip コンテンツについては後程利用しますので、別途退避してください。</p><p>また、[デプロイメント] - [デプロイ センター] より、”Setting”　に何も設定されていないことを確認いたします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image014.png"> </p><p>こちらの設定がされていると、Standard Logic Apps のソースがプッシュされる度に差分で自動デプロイが実行される場合がございますため、今回の設定ではこちらの設定を無効とします。</p><p>Standard Logic Apps 側の設定については一旦以上となります。</p><h2 id="Azure-DevOps-側の設定"><a href="#Azure-DevOps-側の設定" class="headerlink" title="Azure DevOps 側の設定"></a>Azure DevOps 側の設定</h2><p>始めに、Azure DevOps へログインし、[Organization setting] を表示します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image003.png"> </p><p>次に、[Billing] を確認し、対象の Standard Logic Apps のリソースが存在するサブスクリプションが指定されているかを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image004.png"> </p><p>指定されていない場合、”Change billing” より設定を変更します。<br>また、[Azure Active Directory] より、接続しているテナントについても同様に確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image006.png"> </p><p>設定の確認が完了しましたら、トップ画面にもどり、[+ New Project] より、任意のプロジェクトを作成します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image005.png"> </p><p>本例では “Visibility” を “Private”、”Version control” を “Git” に設定します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image007.png"> </p><p>次に、Repos の画面より、作成したプロジェクトのリポジトリをローカルにクローンします。今回は “Clone in VS Code” を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image015.png"> </p><p>リポジトリのクローン先フォルダを確認されるため、任意のフォルダを選択し、[リポジトリの宛先として選択] ボタンを押下します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image016.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image017.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image018.png"> </p><p>クローン先のフォルダの中で Standard Logic Apps の資材を格納するフォルダを作成します。<br>今回は “sample” という名前のフォルダを作成しますが、任意の名前のフォルダを作成してください。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image019.png"> </p><p>次に、[アプリ コンテンツのダウンロード] で取得した Zip ファイルの中身を展開し、上記で作成したフォルダにコピーします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image020.png"> </p><p>各フォルダ、ファイルについての詳細は以下の公開情報をご確認下さい。<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/edit-app-settings-host-settings?tabs=azure-portal">シングルテナントの Azure Logic Apps で Standard ロジック アプリのホストとアプリの設定を編集する</a></p><p>フォルダの構成が整いましたら、Azure DevOps の画面にてメッセージの入力後、”コミットしてプッシュ” を選択します。<br>ブランチの指定や直接プッシュしたくないというお客様については別途個別に操作いただければ問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image021.png"> </p><p>以下の警告メッセージについて、今回は直接コミット、プッシュ操作をするため “はい” を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image022.png"> </p><p>上記の操作で、Repos 上にワークフローの構成ファイルが格納されていることが確認出来ればリポジトリの設定としては完了です。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image023.png"> </p><p>次に、Pipelines の設定を実施します。<br>[+ New Project] より今回作成したプロジェクトの画面に遷移いただき、画面下部の [Project settings] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image024.png"> </p><p>[Pipelines] - [Service connections] より、[Create service connections] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image025.png"> </p><p>[New service connection] の画面より、[Azure Resource Manager] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image026.png"> </p><p>[Service principal (automatic)] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image027.png"> </p><p>[Scope level] にて [Subscription] を選択し、対象の Logic Apps が存在するサブスクリプション、およびリソースグループを選択します。<br>また、任意の [Service connection name] を指定いたします。こちらの Service connection name については後程利用しますので notepad 等へ退避して下さい。<br>[Security] - [Grant access permissin to all Pipelines] にチェックを設定し、[Save] ボタンを押下します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image028.png"> </p><p>設定が完了すると、以下のように Service connections が作成されます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image029.png"> </p><p>また、Standard Logic Apps を作成したテナントの Azure Portal に遷移いただき、[Azure Active Directory] - [管理] - [アプリの登録] を確認いただくと、以下のようにアプリが登録されます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image030.png"> </p><p>Azure Pipelines では、こちらのアプリに付与されている権限を基にリソースを操作することとなりますので削除しないようお願いいたします。</p><p>ここまで設定が出来ましたら、[Pipelines] より [Create Pipline] を実施します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image031.png"> </p><p>[Select a repository] では先ほど作成したリポジトリを選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image032.png"> </p><p>[Inventory] が表示される場合はお客様組織の要件に合わせて設定いただきます。</p><p>[Configure your pipline] では [Starter Pipline] を選択し、[Review pipline] を選択します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image034.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image035.png"> </p><p>最後に、任意のパイプラインの定義ファイル名、パイプライン名を入力し、一旦 [Save] を選択し、yml ファイルを保存します。<br>コミットメッセージについても任意の内容を入力いただければ問題ありません。</p><p><img src="/blog/LogicApps/StandardLogicAppsCdci/image036.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image037.png"> </p><p>上記操作が完了しましたら、Repos の Contents 内にパイプラインの定義ファイルが作成されていることを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image039.png"> </p><p>パイプラインの定義が作成出来ましたら、以下の通り編集を行います。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image038.png"> </p><p>参考までに、以下の yml 定義を設定します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Start with a minimal pipeline that you can customize to build and deploy your code.</span><br><span class="line"># Add steps that build, run tests, deploy, and more:</span><br><span class="line"># https://aka.ms/yaml</span><br><span class="line"></span><br><span class="line">trigger:</span><br><span class="line">- none</span><br><span class="line"></span><br><span class="line">pool:</span><br><span class="line">  vmImage: ubuntu-latest</span><br><span class="line">steps:</span><br><span class="line">- task: ArchiveFiles@2</span><br><span class="line">  inputs:</span><br><span class="line">    rootFolderOrFile: &#x27;$(System.DefaultWorkingDirectory)/sample&#x27;</span><br><span class="line">    includeRootFolder: false</span><br><span class="line">    archiveType: &#x27;zip&#x27;</span><br><span class="line">    archiveFile: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">    replaceExistingArchive: true</span><br><span class="line">- task: PublishPipelineArtifact@0</span><br><span class="line">  inputs:</span><br><span class="line">    artifactName: &#x27;drop&#x27;</span><br><span class="line">    targetPath: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">- task: AzureFunctionApp@1</span><br><span class="line">  inputs:</span><br><span class="line">    azureSubscription: &#x27;testdeploy&#x27;</span><br><span class="line">    appType: &#x27;functionApp&#x27;</span><br><span class="line">    appName: &#x27;20230712teststandard&#x27;</span><br><span class="line">    package: &#x27;$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip&#x27;</span><br><span class="line">    deploymentMethod: &#x27;zipDeploy&#x27;</span><br></pre></td></tr></table></figure><p>Azure Pipelines の yml 定義に関する詳細については Azure Pipelines 製品の公開情報をご確認下さい。<br><a href="https://learn.microsoft.com/ja-jp/azure/devops/pipelines/customize-pipeline?view=azure-devops#understand-the-azure-pipelinesyml-file">パイプラインをカスタマイズする</a></p><p>上記テンプレートの概要について、以下の通り説明いたします。</p><p>・trigger<br>→パイプラインの起動について、自動ではなく手動での設定としております。この値を “none” から “main” に変更すると、Repos の main ブランチに変更が発生したことを契機とし、自動的にパイプラインを起動することが可能です。今回は、手動での実行としますので “none” で設定しております。</p><p>・pool<br>→パイプラインの裏側で処理する VM (ビルドする為のプラットフォーム) を Ubuntu に指定しております。</p><p>・ArchiveFiles@2<br>→System.DefaultWorkingDirectory (Repos のワーキングディレクトリ) 上に先ほど作成した sample フォルダの中身を zip ファイルとして作成いたします。</p><p>・PublishPipelineArtifact@0<br>→実際に Zip Deploy した際の zip ファイルを後程確認するための設定です。必須ではございません。</p><p>・AzureFunctionApp@1<br>→azureSubscription には Service connections の値を指定します。<br> appType は ‘functionApp’ を指定します。 (Logic Apps ではありませんが問題ありません。)<br> appName は デプロイ先の Standard Logic Apps 名を指定します。<br> package は ArchiveFiles@2 で作成した zip ファイルを指定します。<br> deploymentMethod は ‘zipDeploy’ を指定します。</p><p>以上より、パイプラインを実行いただくことで、対象の Standard Logic Apps に対してワークフローをデプロイすることが可能となります。<br>なお、以下のように Tasks より GUI で操作いただくことも可能でございます。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image0351.png"> </p><h2 id="実際の動作"><a href="#実際の動作" class="headerlink" title="実際の動作"></a>実際の動作</h2><p>参考までに、既存のワークフローを一つ削除します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image040.png"> </p><p>リポジトリ上の sample フォルダに削除前の構成でワークフローの資材が格納されていることを確認します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image041.png"> </p><p>[Pipelines] - [All] より対象のパイプラインを選択し、[Run Pipline] ボタンを押下しパイプラインを実行します。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image042.png"> </p><p>[Run Pipelines] の画面が表示されますが、デフォルトのまま [Run] ボタンを押下いただければ問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image043.png"> </p><p>パイプライン初回実行時には、以下のように承認処理が必要となりますので承認処理をお願いします。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image044.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image045.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image046.png"> </p><p>パイプラインが完了するまで待機します。 Azure FunctionApp のタスクで warning が表示されますが問題ありません。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image047.png"> </p><p>パイプラインが完了しましたら、Azure Logic Apps を確認し、削除したワークフローが復元していることを確認します。</p><p><img src="/blog/LogicApps/StandardLogicAppsCdci/image049.png"><br><img src="/blog/LogicApps/StandardLogicAppsCdci/image048.png"> </p><p>なお、実際にどの Zip ファイルをデプロイしたかについては、以下の実行ログの [Related] の部分に 1 published とリンクがございますのでそちらを押下いただければ確認可能です。<br><img src="/blog/LogicApps/StandardLogicAppsCdci/image050.png"> </p><p>以上より、Azure DevOps を利用して Standard Logic Apps のデプロイが可能となります。<br>なお、こちらの設定につきましてはあくまでも参考までに最低限の動作方法をご案内する内容となります。<br>その他の設定については別途お客様環境に併せて CI/CD 環境の要件定義を実施いただき、別途設計、設定をお願いいたします。<br>また、先にも記載しておりますが、本ブログ記事につきましては Logic Apps 製品としての内容となりますため、本ブログ記事で記載しました各製品の詳細な操作方法についてはそれぞれの製品観点で別途弊社サポートへお問合せ下さい。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>Azure DevOps を利用した Standard Logic Apps の CI/CD 環境の概要</li><li>Standard Logic Apps 側の設定</li><li>Azure DevOps 側の設定</li><li>実際の動作</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;近年の技術動向として、DevOps のように環境構築の自動化が進んでおりますが、Standard Logic Apps についても以下の公開情報のとおり DevOps の仕組みを利用して CI/CD の環境を構築することが可能でございます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps&quot;&gt;シングルテナントの Azure Logic Apps への DevOps のデプロイ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は、Azure DevOps を利用して、Standard Logic Apps にて CI/CD 環境を構築する方法についてご案内いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure DevOps" scheme="https://jpazinteg.github.io/blog/tags/Azure-DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps から VNet 経由で別リソースにアクセスする方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/vnetIntergration/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/vnetIntergration/</id>
    <published>2023-08-20T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.892Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Standard Logic Apps から VNet 経由で別リソースにアクセスする方法について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>VNet 統合を有効化し、VNet 経由で Azure Blob Storage 等にアクセスされたい方</li></ul><h2 id="VNet-を経由する条件"><a href="#VNet-を経由する条件" class="headerlink" title="VNet を経由する条件"></a>VNet を経由する条件</h2><p>Logic Apps から別リソースにアクセスする際に、VNet を経由するためにはいくつかの条件があります。</p><ul><li>Standard Logic Apps を利用する</li><li>VNet 統合を有効化する</li><li>built-in (組み込み) タイプのコネクタを利用する</li><li>アクセス先のリソースに、プライベート エンドポイントを用意する</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><p>以下の例では、VNet を経由して Azure Blob Storage にアクセスする方法をご紹介します。</p><h3 id="Standard-Logic-Apps-を利用する"><a href="#Standard-Logic-Apps-を利用する" class="headerlink" title="Standard Logic Apps を利用する"></a>Standard Logic Apps を利用する</h3><p>Standard Logic Apps を新規に作成します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration01.jpg"></p><p>Standard Logic Apps と従量課金 タイプの違いにつきましては、以下の公開情報に記載があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare">Azure Logic Apps でのシングルテナント、マルチテナント、統合サービス環境の比較</a></li></ul><h3 id="VNet-統合を有効化する"><a href="#VNet-統合を有効化する" class="headerlink" title="VNet 統合を有効化する"></a>VNet 統合を有効化する</h3><p>VNet 統合の有効化につきましては、以下の公開情報にも詳細について記載があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint#set-up-outbound-traffic-using-virtual-network-integration">仮想ネットワーク統合を使って送信トラフィックを設定する</a></li></ul><p>適宜 VNet を作成し、Logic Apps 用のサブネットを用意します。<br>[設定 - ネットワーク] を開き、「送信トラフィック」の「VNet 統合」を選択します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration02.jpg"></p><p>作成しておいた Logic Apps 用のサブネットを選択します。<br>このとき、VNet 統合に利用するサブネットは空で、かつ委任されていない状態である必要があります。<br>別リソースで既に利用されているものは、「統合に使用不可」となり選択いただくことができかねます。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration03.jpg"></p><p>なお、ご参考とはなりますが、同一 App Service プランを利用している複数の Standard Logic Apps において、<br>それぞれで異なるサブネットを VNet 統合に利用することは推奨されておりません。<br>設定自体は可能でございますが、[問題の診断と解決] - [Networking] - [VNet 統合に関する情報] にて、以下のような警告が表示されます。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration04.jpg"></p><p>Logic Apps 側の公開情報ではなく、類似製品の Web Apps 側の公開情報とはなりますが、以下のような記載があります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration08.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-vnet-integration#limitations">アプリを Azure 仮想ネットワークと統合する # 制限事項</a></li></ul><h3 id="built-in-組み込み-タイプのコネクタを利用する"><a href="#built-in-組み込み-タイプのコネクタを利用する" class="headerlink" title="built-in (組み込み) タイプのコネクタを利用する"></a>built-in (組み込み) タイプのコネクタを利用する</h3><p>built-in (組み込み) タイプのコネクタは、トリガーおよびアクション追加時に「ランタイム」にて「アプリ内」にチェックを入れることで検索いただくことが可能です。<br>今回の例では、built-in タイプの「Azure Blob Storage」コネクタを利用します。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration05.jpg"></p><p>「Azure Blob Storage」コネクタには、built-in (組み込み) タイプのコネクタと、マネージド コネクタの 2 種類のご用意がございます。<br>「アプリ内」マークがございますのが、built-in (組み込み) タイプとなります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration06.jpg"></p><p>built-in (組み込み) タイプのコネクタは、Azure Functions 拡張性モデルに基づいており、Azure Logic Apps ランタイムと同じプロセスで実行されます。<br>詳細につきましては、以下の公開情報があります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in">Azure Logic Apps の組み込みコネクタ</a></li></ul><p>以下に記載の通り、built-in (組み込み) タイプのコネクタをご利用いただいた場合のみ、VNet を経由することが可能です。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration09.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/connectors/compare-built-in-azure-connectors#considerations-for-virtual-network-integration">Azure Logic Apps (Standard) での組み込み操作と Azure コネクタの違い # 仮想ネットワーク統合に関する考慮事項</a></li></ul><p>また、built-in (組み込み) タイプのコネクタは、マネージド コネクタに比べて種類が少ないため、ご希望のリソースに対応しているコネクタのご用意がない場合もございます。<br>この点につきましても、ご理解賜れますと幸いです。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-in-consumption-versus-standard">Azure Logic Apps の組み込みコネクタ # 従量課金と Standard の組み込みコネクタの比較</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/connectors/built-in/reference/">Azure Logic Apps Standard built-in service provider connectors documentation</a></li></ul><p>なお、マネージド コネクタをご利用いただいた場合には、<strong>VNet 統合を有効化していても</strong>コネクタを経由した後に対象リソースへアクセスする動作となりますので、<br>パブリック IP アドレスからの通信となります。<br>ただし、アクセス先のリソースが Microsoft 製品の場合、Microsoft のネットワークにルーティングされ、パブリック インターネットは経由いたしません。<br>以下、公開資料からの抜粋となります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration10.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/networking/microsoft-global-network#get-the-premium-cloud-network">マイクロソフトのグローバル ネットワーク # 最高のクラウド ネットワークの実現</a></li></ul><p>VNet 統合を有効化していて、かつマネージド コネクタもご利用されたい場合には、マネージド コネクタへ向かう通信 (サービス タグ「AzureConnectors.{リージョン}」を宛先とする通信) を、<br>NSG や Azure Firewall 等で許可する必要があります。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration11.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/connectors/compare-built-in-azure-connectors#considerations-for-virtual-network-integration">Azure Logic Apps (Standard) での組み込み操作と Azure コネクタの違い # 仮想ネットワーク統合に関する考慮事項</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#firewall-ip-configuration-considerations">Azure Logic Apps の制約と構成の参考文献 # ファイアウォールの IP 構成に関する考慮事項</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><h3 id="アクセス先のリソースに、プライベート-エンドポイントを用意する"><a href="#アクセス先のリソースに、プライベート-エンドポイントを用意する" class="headerlink" title="アクセス先のリソースに、プライベート エンドポイントを用意する"></a>アクセス先のリソースに、プライベート エンドポイントを用意する</h3><p>今回の例では、ストレージ アカウント側で blob のプライベート エンドポイントを作成します。<br>Standard Logic Apps の VNet 統合に利用したサブネットと、同一 VNet 内の異なるサブネットに配置しています。<br><img src="/blog/LogicApps/vnetIntergration/vnetIntergration07.jpg"></p><p>上記の設定によって、VNet およびプライベート エンドポイントを経由しての通信が可能です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Standard Logic Apps から VNet 経由で別の Azure リソースにアクセスする方法についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Standard Logic Apps から VNet 経由で別リソースにアクセスする方法について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="VNet Integration" scheme="https://jpazinteg.github.io/blog/tags/VNet-Integration/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps からストレージ アカウントへの疎通を確認する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-Ping/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-Ping/</id>
    <published>2023-08-20T02:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.836Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。今回は、Standard Logic Apps から、関わるストレージ アカウントに対して、ツールにて接続の疎通を確認する方法をご紹介いたします。</p><span id="more"></span><h2 id="こんな時に"><a href="#こんな時に" class="headerlink" title="こんな時に"></a>こんな時に</h2><ul><li>閉域ネットワーク構成にて Standard Logic Apps を管理したい。</li><li>Azure ポータルから Standard Logic Apps を開いた際に予期しないエラーが出るのでトラブルシューティングしたい。</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Standard Logic Apps とストレージ アカウント</li><li>「高度なツール」</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Standard-Logic-Apps-とストレージ-アカウント"><a href="#Standard-Logic-Apps-とストレージ-アカウント" class="headerlink" title="Standard Logic Apps とストレージ アカウント"></a>Standard Logic Apps とストレージ アカウント</h2><p>前提として、Standard Logic Apps を作成した際に合わせてストレージ アカウントに作成されるコンテナやファイルは、ワークフロー情報や、実行履歴情報が格納されているものとなります。以下記事にて概要をご覧いただけます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/">Standard Logic Apps と関連するストレージ アカウント | Japan Azure Integration Support Blog</a></li></ul><p>ここでは後述のツールのために、対象のストレージ アカウントに対して [Azure ポータル] - [ストレージ アカウント] - [&lt;対象の ストレージ アカウント&gt;] - [設定 - エンドポイント] と遷移し、以下のように Blob、File、Queue、Table の 4 つのエンドポイントを取得しておきます。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-4.png"></p><h2 id="「高度なツール」"><a href="#「高度なツール」" class="headerlink" title="「高度なツール」"></a>「高度なツール」</h2><p>本題となるツールです。下記「高度なツール」から、Kudu というものに移動することができます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/app-service/resources-kudu">Kudu サービスの概要 - Azure App Service | Microsoft Learn</a></li></ul><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-1.png"></p><p>Kudu 上で、Debug console から CMD へ進みます。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-2.png"></p><p>ここで、下部に現出します CLI より、tcpping コマンド、nameresolver コマンドの実施が可能となります。</p><p><code>tcpping &lt;先に取得したストレージ Blob、File、Queue、Table の各エンドポイント&gt;:443</code></p><p><code>nameresolver &lt;先に取得したストレージ Blob、File、Queue、Table の各エンドポイント&gt;</code></p><p>「samplestorage」に対する例: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tcpping samplestorage.blob.core.windows.net:443 </span><br><span class="line"></span><br><span class="line">nameresolver samplestorage.blob.core.windows.net</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-3.png"></p><p>無事 Success および IP が確認できました。以上の形で、宛先ストレージ アカウントに疎通が取れているか確認いただけます。</p><p>なお留意点としまして、作業端末よりツールへのアクセス許可が必要となります。以下 Error 403 となります場合は、まずは Azure ポータル より、作業端末から Standard Logic Apps へのアクセスが十分かご確認ください。</p><p><img src="/blog/LogicApps/StandardLogicApps-Ping/StandardLogicApps-Ping-0.png"></p><ul><li>参考: <a href="https://learn.microsoft.com/ja-jp/azure/app-service/app-service-ip-restrictions?tabs=azurecli">Azure App Service のアクセス制限 - Azure App Service | Microsoft Learn</a></li></ul><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Standard Logic Apps とストレージ アカウントに言及したドキュメントや記事には、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account">Standard ロジック アプリをプライベート ストレージ アカウントにデプロイする - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/functions-networking-options?tabs=azure-cli#troubleshooting">Azure Functions のネットワーク オプション # トラブルシューティング | Microsoft Learn</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/">ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成 | Japan Azure Integration Support Blog</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Standard Logic Apps を閉域ネットワーク構成にて管理する際、知っておくと便利なツール「高度なツール Kudu」についてご紹介しました。引き続き皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。今回は、Standard Logic Apps から、関わるストレージ アカウントに対して、ツールにて接続の疎通を確認する方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Storage Account" scheme="https://jpazinteg.github.io/blog/tags/Storage-Account/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ を有効化する手順・メッセージを送受信する手順</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/</id>
    <published>2023-07-04T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.896Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスについて、有効化する手順、コマンドから有効化されているかを確認する手順、サンプルを用いたメッセージを送受信する手順についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ をインストール (有効化) する</li><li>MSMQ が有効化されているか確認する</li><li>メッセージを送信する</li><li>メッセージを受信する </li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> にもご案内がございます。</p><h2 id="MSMQ-をインストール-有効化-する"><a href="#MSMQ-をインストール-有効化-する" class="headerlink" title="MSMQ をインストール (有効化) する"></a>MSMQ をインストール (有効化) する</h2><p>MSMQ のインストールに関する公開情報については以下に記載があります。</p><ul><li><a href="https://docs.microsoft.com/ja-jp/dotnet/framework/wcf/samples/installing-message-queuing-msmq">メッセージ キュー (MSMQ) のインストール</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/#MSMQ-%E3%82%92%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">MSMQ をドメインモードでインストールする手順について | Japan Azure Integration Support Blog</a></li></ul><h2 id="MSMQ-が有効化されているか確認する"><a href="#MSMQ-が有効化されているか確認する" class="headerlink" title="MSMQ が有効化されているか確認する"></a>MSMQ が有効化されているか確認する</h2><p>MSMQ が有効化されているかは、以下のコマンドよりご確認いただけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dism /online /Get-FeatureInfo /FeatureName:MSMQ</span><br></pre></td></tr></table></figure><p>また、サービスが起動しているかは、以下のコマンドよりご確認いただけます。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc query MSMQ</span><br></pre></td></tr></table></figure><h2 id="メッセージを送信する"><a href="#メッセージを送信する" class="headerlink" title="メッセージを送信する"></a>メッセージを送信する</h2><p>PowerShell にてメッセージを送信するサンプルです。</p><p>以下のようにキューを作成しておきます。<br><img src="/blog/MSMQ/MsmqCheckInstall/MsmqCheckInstall.png"></p><p>サンプル 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=TCP:&lt;送信先 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Send(&quot;Hello World&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/#MSMQ-%E3%82%92%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">HTTP サポート</a> を有効化している場合は以下もご利用いただけます。</p><p>サンプル 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=http://&lt;送信先 コンピューター名&gt;/msmq/private$/&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Send(&quot;Hello World HTTP&quot;)</span><br></pre></td></tr></table></figure><h2 id="メッセージを受信する"><a href="#メッセージを受信する" class="headerlink" title="メッセージを受信する"></a>メッセージを受信する</h2><p>PowerShell にてメッセージを受信するサンプルです。</p><p>サンプル:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=&lt;プロトコル名&gt;:&lt;受信 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$mq.Formatter = new-object System.Messaging.XmlMessageFormatter([string])</span><br><span class="line">$mq.Peek()</span><br></pre></td></tr></table></figure><p>以下のように受信できます。<br><img src="/blog/MSMQ/MsmqCheckInstall/MsmqCheckInstall1.png"></p><p>一連の動作確認にて、MSMQ をご理解いただければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ をインストール (有効化) する</li><li>MSMQ が有効化されているか確認する</li><li>メッセージを送信する</li><li>メッセージを受信する </li></ul><p>オンプレミス製品 MSMQ のご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスについて、有効化する手順、コマンドから有効化されているかを確認する手順、サンプルを用いたメッセージを送受信する手順についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps における再試行について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/retryPolicy/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/retryPolicy/</id>
    <published>2023-06-20T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.884Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps における再試行について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps の再試行ポリシーについて知りたい方</li><li>Logic Apps で再試行の設定を解除されたい方</li><li>再試行ポリシー対象外の場合でも、再試行を行いたい方</li></ul><h2 id="Logic-Apps-の再試行ポリシー"><a href="#Logic-Apps-の再試行ポリシー" class="headerlink" title="Logic Apps の再試行ポリシー"></a>Logic Apps の再試行ポリシー</h2><p>Logic Apps では、「HTTP」アクション等一部のトリガーおよびアクションにて、再試行ポリシーを設定することが可能です。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#retry-policies">Azure Logic Apps におけるエラーと例外の処理 # 再試行ポリシー</a></li></ul><p>上記に記載がございますように、特定のレスポンス コード (<strong>408、429、または 5xx 応答</strong>) を受け取った場合にのみ自動的に再試行されます。</p><h2 id="再試行ポリシーのデフォルト設定"><a href="#再試行ポリシーのデフォルト設定" class="headerlink" title="再試行ポリシーのデフォルト設定"></a>再試行ポリシーのデフォルト設定</h2><p>既定の設定では、再試行ポリシーは有効化されています。<br>具体的な設定値は以下となります。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#default-retry-policy">Azure Logic Apps におけるエラーと例外の処理 # 既定の再試行ポリシー</a></li></ul><h2 id="再試行ポリシーの設定変更"><a href="#再試行ポリシーの設定変更" class="headerlink" title="再試行ポリシーの設定変更"></a>再試行ポリシーの設定変更</h2><p>再試行ポリシーは無効化したり、回数および間隔をご変更いただくことが可能です。</p><p><strong>&lt;従量課金タイプ&gt;</strong><br>対象のトリガーまたはアクションを展開し、右上の「…」を押下して「設定」を選択します。<br>以下は「HTTP」アクションでの例になります。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy03.jpg"></p><p>「再試行ポリシー」にて設定をご変更いただけます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy04.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard Logic Apps でも対象のトリガーまたはアクションを選択し、「Settings」タブを開きます。<br>[ネットワーク - Retry Policy] にてご変更いただけます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy05.jpg"></p><p>再試行ポリシーの種類といたしましては「既定」以外に、「なし」、「指数間隔」、「固定間隔」がございます。<br>たとえば「HTTP」アクションで外部システムへリクエストを送信されているようなシナリオですと、安易に再試行できない場合もあるかと存じます。<br>その場合には、こちらで「なし」とご設定いただくことが可能です。<br>なお、弊社として推奨値は特にございませんので、以下の公開情報をご参照の上、お客様のご要件を照らし合わせましてご検討いただけますと幸いでございます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#retry-policy-types">Azure Logic Apps におけるエラーと例外の処理 # 再試行ポリシーの種類</a></li></ul><p>再試行ポリシーの制限につきましては、以下の公開情報もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#retry-policy-limits">Azure Logic Apps の制約と構成の参考文献 # 再試行ポリシーの制限</a></li></ul><h2 id="再試行ポリシー対象外の場合"><a href="#再試行ポリシー対象外の場合" class="headerlink" title="再試行ポリシー対象外の場合"></a>再試行ポリシー対象外の場合</h2><p>上述の通り、再試行ポリシーは特定のレスポンス コード (<strong>408、429、または 5xx 応答</strong>) を受け取った場合にのみ自動的に再試行されます。<br>これら以外のレスポンス コードを受け取った場合には、再試行されません。<br>もしこの場合にも再試行をご希望の場合には、適宜作り込みが必要となります。</p><p>Logic Apps では、「まで」アクションや「条件」アクション等のご用意がございますので、これらを組み合わせる方法が考えられます。<br><strong>「まで」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy07.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#until-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Until” ループ</a></li></ul><p><strong>「条件」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy08.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-conditional-statement">Azure Logic Apps のワークフロー アクションを制御する条件を追加する</a></li></ul><p>少し時間を空けてから再試行されたい場合には、「待ち時間」アクションのご用意もございます。<br><strong>「「待ち時間」アクション</strong><br><img src="/blog/LogicApps/retryPolicy/retryPolicy09.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-delay">Azure Logic Apps で次のアクションの実行を遅延させる</a></li></ul><p>また、Logic Apps では「実行条件の構成」の設定によって、前段のアクションが失敗した場合でも後続処理を続けることが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exception-handling?tabs=consumption#manage-the-run-after-behavior">Azure Logic Apps におけるエラーと例外の処理 # “実行条件” の動作を管理する</a></li></ul><p>以下に従量課金タイプの Logic Apps で、「HTTP」アクションと「まで」アクションを利用した場合についてのサンプルをご案内いたします。</p><p><img src="/blog/LogicApps/retryPolicy/retryPolicy10.jpg"></p><p>「まで」アクション内に「HTTP」アクションを追加します。<br>「まで」アクションの条件式として、「状態コード / 次の値に等しい / 200」と設定しております。<br>※ 「状態コード」につきましては、「動的なコンテンツの追加」を押下して追加することが可能でございます。</p><p>「制限の変更」にてループ回数 (再試行回数) をご設定いただけます。<br>無限ループとならないよう、ご注意ください。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#prevent-endless-loops">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # 無限ループを防ぐ</a></li></ul><p>実行した結果が以下となります。<br>レスポンス コードが 400 (200 ではない) 場合には、「まで」アクションの「制限の変更」にて設定されている回数分、繰り返し「HTTP」アクションを実行しております。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy11.jpg"></p><p>レスポンス コードが 200 の場合では、「HTTP」アクションを一回実行したのみでございます。<br><img src="/blog/LogicApps/retryPolicy/retryPolicy12.jpg"></p><p><strong>こちらはあくまでサンプルでございますので、お客様のご要件に応じまして適宜変更いただき、</strong><br><strong>実運用に向けましたテストおよびハンドリングにつきましては、お客様ご自身でご実施いただきますようお願い申し上げます。</strong></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps の再試行ポリシーの概要、設定変更、再試行ポリシーの対象外の場合についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps における再試行について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Retry Policy" scheme="https://jpazinteg.github.io/blog/tags/Retry-Policy/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で JDBC コネクタを利用した PostgreSQL 接続</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/PostgresqlJdbc/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/PostgresqlJdbc/</id>
    <published>2023-06-07T07:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.832Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>本記事は弊社海外ブログを日本語向けに解説した記事となります。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/configure-postgresql-connection-in-logic-apps-standard-with-jdbc/ba-p/3784988">Configure PostgreSQL Connection in Logic Apps (Standard) with JDBC, call Function with Execute Query</a></li></ul><p>Azure Logic Apps では、以下の PostgreSQL コネクタを利用してオンプレミス環境の PostgreSQL に接続することが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/postgresql/">PostgreSQL</a></li></ul><p>しかしながら、上記コネクタでは Azure Database for PostgreSQL への接続は本日 2023 年 6 月現在で不可でございます。<br>今回は、 Standard Logic Apps と JDBC コネクタを利用して、Azure Database for PostgreSQL へ接続する方法についてご案内します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps から Azure Database for PostgreSQL へ接続されたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>JDBC コネクタについて</li><li>事前準備</li><li>設定例と実行結果</li></ul><h2 id="JDBC-コネクタについて"><a href="#JDBC-コネクタについて" class="headerlink" title="JDBC コネクタについて"></a>JDBC コネクタについて</h2><p>本ブログでは以下の JDBC コネクタを利用して、 Azure Database for PostgreSQL へ接続いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/logic-apps/connectors/built-in/reference/jdbc/">JDBC</a></li></ul><p>JDBC コネクタについては本日 2023 年 6 月現在で全てのアクションがプレビュー機能として提供されております。その為、今後予告なく仕様変更が発生する場合がございますので予めご了承下さい。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>上記コネクタを利用するにあたり、以下の事前準備が必要となります。</p><ul><li><ol><li>Azure Database for PostgreSQL の設定</li></ol></li><li><ol start="2"><li>PostgreSQL の JDBC ドライバのダウンロード</li></ol></li><li><ol start="3"><li>Standard Logic Apps へ JDBC ドライバの配置</li></ol></li></ul><p>詳細については以下に記載していきます。</p><ol><li>Azure Database for PostgreSQL の設定<br>初めに、Azure Database for PostgreSQL の設定を実施いたします。<br>なお、こちらについてはデータベースやテーブルは既に作成されている前提で進めて参ります。</li></ol><p>Standard Logic Apps から Azure Database for PostgreSQL にアクセス可能にするために、[設定] - [接続のセキュリティ] より、以下の通り設定いたします。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image000.png"></p><p>・パブリック ネットワーク アクセスの拒否：いいえ<br>・ファイアウォール規則：はい<br>・SSL 接続を強制する：無効</p><p>以上で Azure Database for PostgreSQL の設定は完了です。</p><ol start="2"><li>PostgreSQL の JDBC ドライバのダウンロード</li></ol><p>参考基のブログ記事にもございます通り、以下のサイトより PostgreSQL の JDBC ドライバをダウンロードいたします。。</p><ul><li><a href="https://jdbc.postgresql.org/">PostgreSQL JDBC Driver</a></li></ul><p>本ブログ記事では Java 7 の資材をダウンロードいたします。。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image0001.png"></p><p>以上で JDBC ドライバのダウンロードは完了です。</p><ol start="3"><li>Standard Logic Apps へ JDBC ドライバの配置<br>これより、取得したドライバを Standard Logic Apps へ配置いたします。<br>ドライバを配置することにより JDBC コネクタで対象のドライバを呼び出し、Azure Database for PostgreSQL へ接続することが可能となります。</li></ol><p>まず、作成いただいている Standard Logic Apps のリソースを表示し、[開発ツール] - [高度なツール] より [移動→] のリンクを押下します。<br><img src="/blog/LogicApps/PostgresqlJdbc/image001.png"></p><p>次に、画面上部の [Debug console] より、”CMD” を選択します。<br><img src="/blog/LogicApps/PostgresqlJdbc/image002.png"></p><p>site\wwwroot ディレクトリへ遷移し、＋ マークを押下して以下のディレクトリを作成いたします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image003.png"></p><p>・作成するパス<br>lib\builtinOperationSdks\JAR（C:\home\site\wwwroot\lib\builtinOperationSdks\JAR がフルパス）</p><p>JAR ディレクトリを作成出来たらダウンロードした JDBC ドライバをドラッグアンドドロップします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image004.png"></p><p>以上で、事前準備の完了となります。</p><h2 id="設定例と実行結果"><a href="#設定例と実行結果" class="headerlink" title="設定例と実行結果"></a>設定例と実行結果</h2><p>それでは、Standard Logic Apps の設定に移ります。<br>まず、ワークフローを作成し、以下の通り JDBC コネクタを検索いたします。</p><p><img src="/blog/LogicApps/PostgresqlJdbc/image005.png"><br><img src="/blog/LogicApps/PostgresqlJdbc/image006.png"></p><p>サービス プロバイダー接続の設定について、以下の内容を設定いたします。<br><img src="/blog/LogicApps/PostgresqlJdbc/image008.png"></p><p>・接続名：任意の値<br>・URL：Azure Database for PostgreSQL の [設定] - [接続文字列] より、JDBC の値を設定<br><img src="/blog/LogicApps/PostgresqlJdbc/image007.png"><br>{your_database}：設定いただいたデータベース<br>{your_password}：設定いただいたパスワード<br>User Identifier：ユーザー名<br>Password：設定いただいたパスワード</p><p>＜実行結果＞<br><img src="/blog/LogicApps/PostgresqlJdbc/image009.png"></p><p>以上より、JDBC コネクタを利用し、Azure Database for PostgreSQL へ接続することが可能でございます。</p><p>なお、先にも申し上げました通り、本コネクタについてはプレビュー機能で提供されております。今後将来的に予告なく内容が変更される場合がございますので予めご了承下さい。</p><p>こちらの仕組みをご利用になられる場合、お客様にて十分に検証を実施いただいたうえで採用要否についてご検討をいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>JDBC コネクタについて</li><li>事前準備</li><li>設定例と実行結果</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;本記事は弊社海外ブログを日本語向けに解説した記事となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/configure-postgresql-connection-in-logic-apps-standard-with-jdbc/ba-p/3784988&quot;&gt;Configure PostgreSQL Connection in Logic Apps (Standard) with JDBC, call Function with Execute Query&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Azure Logic Apps では、以下の PostgreSQL コネクタを利用してオンプレミス環境の PostgreSQL に接続することが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/connectors/postgresql/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、上記コネクタでは Azure Database for PostgreSQL への接続は本日 2023 年 6 月現在で不可でございます。&lt;br&gt;今回は、 Standard Logic Apps と JDBC コネクタを利用して、Azure Database for PostgreSQL へ接続する方法についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="JDBC" scheme="https://jpazinteg.github.io/blog/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で Cosmos DB からドキュメントをクエリする</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-CosmosDB/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-CosmosDB/</id>
    <published>2023-06-01T07:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.828Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>今回は、Azure Logic Apps で Azure Cosmos DB から 「ドキュメントをクエリする」 方法をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><p>Logic Apps で Cosmos DB からドキュメントをクエリする</p><ul><li>基本</li><li>「ドキュメントをクエリする」アクション</li><li>「改ページ」に関して調整する</li></ul></li><li><p>まとめ</p></li></ul><h2 id="Logic-Apps-で-Cosmos-DB-からドキュメントをクエリする"><a href="#Logic-Apps-で-Cosmos-DB-からドキュメントをクエリする" class="headerlink" title="Logic Apps で Cosmos DB からドキュメントをクエリする"></a>Logic Apps で Cosmos DB からドキュメントをクエリする</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>Logic Apps から Cosmos DB へ接続しての処理を行う方法については、以下ドキュメントがございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-cosmos-db?tabs=consumption">Azure Cosmos DB への接続 - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/">Azure Cosmos DB - Connectors | Microsoft Learn</a></p><h3 id="「ドキュメントをクエリする」アクション"><a href="#「ドキュメントをクエリする」アクション" class="headerlink" title="「ドキュメントをクエリする」アクション"></a>「ドキュメントをクエリする」アクション</h3><p>ここでは例として、「ドキュメントをクエリする」アクション をご紹介いたします。以下がご利用いただけます。</p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_0.png"></p><p>Cosmos DB のデータ エクスプローラー画面と、以下のように対応しています。</p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_1.png"></p><h3 id="「改ページ」に関して調整する"><a href="#「改ページ」に関して調整する" class="headerlink" title="「改ページ」に関して調整する"></a>「改ページ」に関して調整する</h3><p>Cosmos DB で大量データをクエリすると、結果が複数のページにわたる場合があります。 Logic Apps ではこれに対し、以下設定で改ページ位置のしきい値を変更することが可能です。以下、参考ドキュメントがございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/cosmos-db/nosql/query/pagination">Azure Cosmos DB での改ページ | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-exceed-default-page-size-with-pagination#turn-on-pagination">改ページ位置の自動修正で項目やレコードを増やす - Azure Logic Apps | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_4.png"></p><p>上のように [改ページ位置の自動修正] 設定を [オフ] から [オン] に変更します。 [しきい値] プロパティに、そのアクションで返す結果の目標数として整数値を指定します。</p><h4 id="しきい値を設定しない場合"><a href="#しきい値を設定しない場合" class="headerlink" title="しきい値を設定しない場合"></a>しきい値を設定しない場合</h4><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_2.png"></p><h4 id="しきい値を設定した場合"><a href="#しきい値を設定した場合" class="headerlink" title="しきい値を設定した場合"></a>しきい値を設定した場合</h4><p><img src="/blog/LogicApps/LogicApps-CosmosDB/LogicApps-CosmosDB_3.png"></p><p>このように、値を調整してデータを取り扱うことが可能となります。Logic Apps では、Cosmos DB に対してこのほかにも <a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/#%E3%82%B9%E3%83%88%E3%82%A2%E3%83%89-%E3%83%97%E3%83%AD%E3%82%B7%E3%83%BC%E3%82%B8%E3%83%A3%E3%82%92%E5%AE%9F%E8%A1%8C-(v2)">ストアド プロシージャを実行 (V2)</a> や <a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%BE%E3%81%9F%E3%81%AF%E6%9B%B4%E6%96%B0-(v3)">ドキュメントを作成または更新 (V3)</a> などのアクションが用意されております。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps で Cosmos DB からドキュメントをクエリする方法についてご紹介しました。より柔軟なデータ連携フロー構築において、参考になれば幸いです。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-cosmos-db?tabs=consumption">Azure Cosmos DB への接続 - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/connectors/documentdb/">Azure Cosmos DB - Connectors | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/cosmos-db/introduction">Azure Cosmos DB | Microsoft Learn</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Azure Logic Apps で Azure Cosmos DB から 「ドキュメントをクエリする」 方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Cosmos DB" scheme="https://jpazinteg.github.io/blog/tags/Azure-Cosmos-DB/"/>
    
  </entry>
  
  <entry>
    <title>Azure Monitor のアラート発報時に Logic Apps を呼び出す方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/actionGroupSetting/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/actionGroupSetting/</id>
    <published>2023-05-23T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.860Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Azure Monitor でアラートが発報された時に Logic Apps を呼び出す方法について説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>ログ アラートやメトリック アラート発報時に、Logic Apps を起動したい方</li><li>アクション グループで Logic Apps を選択されたい方</li></ul><h2 id="Azure-Monitor-のアクション-グループ"><a href="#Azure-Monitor-のアクション-グループ" class="headerlink" title="Azure Monitor のアクション グループ"></a>Azure Monitor のアクション グループ</h2><p>Azure Monitor ではアラート ルールを設定し、特定のリソースを監視することができます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/alerts-create-new-alert-rule?tabs=metric">新しいアラート ルールを作成する</a></li></ul><p>アラートが発報したことをトリガーに、Logic Apps を起動させることが可能です。<br>アクション グループで Logic Apps を選択します。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups">Azure Portal でのアクション グループの作成および管理</a></li></ul><p>具体的な設定方法は、以下になります。</p><ol><li>Logic Apps 側を作成する。<br>Logic Apps にて「HTTP 要求の受信時」トリガーを設定している必要があります。<br>「HTTP 要求の受信時」トリガーの詳細につきましては、以下の公開情報もございます。</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-reqres?tabs=consumption#add-a-request-trigger">Azure Logic Apps のワークフローに送信された受信 HTTPS 要求を処理する # Request トリガーの追加</a><br>また、アクション グループでは、従量課金タイプの Logic Apps と Standard Logic Apps の両方をご設定いただけます。</li></ul><p><strong>&lt;従量課金タイプ&gt;</strong><br>「HTTP 要求の受信時」トリガーを設定いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting01.jpg"><br><strong>&lt;Standard タイプ&gt;</strong><br>「Runtime」にて「アプリ内」にチェックを入れ、「Request」を選択いたします。<br>「When a HTTP request is received」トリガーを設定いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting02.jpg"></p><ol start="2"><li>アクション グループを作成する。<br>[モニター] - [アラート] にて「アクション グループ」を選択します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting03.jpg"><br>「 + 作成」を押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting04.jpg"><br>「基本」タブおよび「通知」タブを適宜設定し、「アクション」タブに遷移します。<br>「アクション タイプ」にて「ロジック アプリ」を選択します。<br>1 で作成した Logic Apps が存在するサブスクリプションおよびリソース グループをプルダウンで選択し、「ロジック アプリを選択します」にて対象の Logic Apps を選択します。</li></ol><p><strong>&lt;従量課金タイプ&gt;</strong><br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting05.jpg"><br><strong>&lt;Standard タイプ&gt;</strong><br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting06.jpg"><br>残りの設定を適宜行い、アクション グループを作成いたします。</p><h3 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h3><p>実際のアラートを発報せずに、アクション グループのテストを行うことが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#test-an-action-group-in-the-azure-portal">Azure Portal でのアクション グループの作成および管理 # Azureポータルでアクショングループをテストする。</a></li></ul><p>先ほどの手順で作成したアクション グループの [概要] を開き、「テスト」を押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting07.jpg"></p><p>「サンプルの種類を選択」にて任意のアラートを選択し、「アクション タイプ」にてテストしたいアクションにチェックを入れ、「Test」ボタンを押下します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting08.jpg"></p><p>このとき利用されるスキーマは、共通アラート スキーマになります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/alerts-common-schema">共通アラート スキーマ</a></li></ul><p>以下はテストが成功した状態になります。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting09.jpg"></p><p>対象の Logic Apps の履歴を確認すると、トリガーが起動しています。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting10.jpg"></p><p>たとえば「ログ アラート V2」ですと、以下のようなスキーマが連携されます。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting11.jpg"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;schemaId&quot;</span>: <span class="string">&quot;azureMonitorCommonAlertSchema&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;essentials&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;alertId&quot;</span>: <span class="string">&quot;/subscriptions/11111111-1111-1111-1111-111111111111/providers/Microsoft.AlertsManagement/alerts/12345678-1234-1234-1234-1234567890ab&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertRule&quot;</span>: <span class="string">&quot;test-logAlertRule-v2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;severity&quot;</span>: <span class="string">&quot;Sev3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;signalType&quot;</span>: <span class="string">&quot;Log&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;monitorCondition&quot;</span>: <span class="string">&quot;Fired&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;monitoringService&quot;</span>: <span class="string">&quot;Log Alerts V2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertTargetIDs&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;/subscriptions/11111111-1111-1111-1111-111111111111/resourcegroups/test-RG/providers/microsoft.operationalinsights/workspaces/test-logAnalyticsWorkspace&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;configurationItems&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;test-computer&quot;</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;originAlertId&quot;</span>: <span class="string">&quot;22222222-2222-2222-2222-222222222222&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;firedDateTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Alert rule description&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;essentialsVersion&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;alertContextVersion&quot;</span>: <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;alertContext&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;customKey1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;customKey2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;conditionType&quot;</span>: <span class="string">&quot;LogQueryCriteria&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;condition&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;windowSize&quot;</span>: <span class="string">&quot;PT1H&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;allOf&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;searchQuery&quot;</span>: <span class="string">&quot;Heartbeat&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;metricMeasureColumn&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;targetResourceTypes&quot;</span>: <span class="string">&quot;[&#x27;Microsoft.OperationalInsights/workspaces&#x27;]&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;operator&quot;</span>: <span class="string">&quot;GreaterThan&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;threshold&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;timeAggregation&quot;</span>: <span class="string">&quot;Count&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;dimensions&quot;</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Computer&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;test-computer&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;metricValue&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">&quot;failingPeriods&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;numberOfEvaluationPeriods&quot;</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">&quot;minFailingPeriodsToAlert&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;linkToSearchResultsUI&quot;</span>: <span class="string">&quot;https://portal.azure.com#@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/source/Alerts.EmailLinks/scope/%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F11111111-1111-1111-1111-111111111111%2FresourceGroups%2Ftest-RG%2Fproviders%2FMicrosoft.OperationalInsights%2Fworkspaces%2Ftest-logAnalyticsWorkspace%22%7D%5D%7D/q/aBcDeFgHiJkLmNaBcDeFgHiJkLmNaBcDeFgHiJkLmNaBcDeFgHiJkLmN1234567890ZAZBZiaGBlaG5lbKlnAAFRmnp6WNUZoqvTBAA%3D/prettify/1/timespan/2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToFilteredSearchResultsUI&quot;</span>: <span class="string">&quot;https://portal.azure.com#@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa/blade/Microsoft_Azure_Monitoring_Logs/LogsBlade/source/Alerts.EmailLinks/scope/%7B%22resources%22%3A%5B%7B%22resourceId%22%3A%22%2Fsubscriptions%2F11111111-1111-1111-1111-111111111111%2FresourceGroups%2Ftest-RG%2Fproviders%2FMicrosoft.OperationalInsights%2Fworkspaces%2Ftest-logAnalyticsWorkspace%22%7D%5D%7D/q/aBcDeFgHiJkLmN%2Fl35oOTZoKioEOouaBcDeFgHiJkLmN%2BaBcDeFgHiJkLmN%2BaBcDeFgHiJkLmN7HHgOCZTR0Ak%2FaBcDeFgHiJkLmN1234567890Ltcw%2FOqZS%2FuX0L5d%2Bx3iMHNzQiu3Y%2BzsjpFSWlOzgA87vAxeHW2MoAtQxe6OUvVrZR3XYZPXrd%2FIE/prettify/1/timespan/2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToSearchResultsAPI&quot;</span>: <span class="string">&quot;https://api.loganalytics.io/v1/workspaces/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/query?query=Heartbeat%7C%20where%20TimeGenerated%20between%28datetime%282021-11-16T10%3A17%3A39.0000000Z%29..datetime%282021-11-16T11%3A17%3A39.0000000Z%29%29&amp;timespan=2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;linkToFilteredSearchResultsAPI&quot;</span>: <span class="string">&quot;https://api.loganalytics.io/v1/workspaces/bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb/query?query=Heartbeat%7C%20where%20TimeGenerated%20between%28datetime%282021-11-16T10%3A17%3A39.0000000Z%29..datetime%282021-11-16T11%3A17%3A39.0000000Z%29%29%7C%20where%20tostring%28Computer%29%20%3D%3D%20%27test-computer%27&amp;timespan=2021-11-16T10%3a17%3a39.0000000Z%2f2021-11-16T11%3a17%3a39.0000000Z&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;windowStartTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;windowEndTime&quot;</span>: <span class="string">&quot;2023-05-19T16:46:38.738Z&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テスト実行ではサンプル データが利用されますので、実在するサブスクリプション ID やリソース グループは連携されません。</p><h2 id="Logic-Apps-側のアクセス制限について"><a href="#Logic-Apps-側のアクセス制限について" class="headerlink" title="Logic Apps 側のアクセス制限について"></a>Logic Apps 側のアクセス制限について</h2><p>Logic Apps 側で受信トラフィックに制限を設けるご想定の場合には、アクション グループからの通信を許可する必要があります。</p><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプの場合、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ワークフロー設定] にて受信トラフィックに制限を設けることが可能です。<br>こちらでアクション グループが利用している IP アドレスを許可します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting12.jpg"></p><p>以下のダウンロード先より、アクション グループのサービス タグで利用されている IP アドレスを取得することが可能です。</p><ul><li>ダウンロード先 : <a href="https://www.microsoft.com/en-us/download/details.aspx?id=56519">Azure IP Ranges and Service Tags – Public Cloud</a></li></ul><p>ダウンロードした JSON ファイルを開き、「ActionGroup」に該当する IP アドレスをすべて許可します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting13.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard Logic Apps の場合、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」の「アクセス制限」を選択します。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting14.jpg"></p><p>Standard Logic Apps では、サービス タグを利用してアクセス制限を行うことが可能です。</p><p>アクション グループからの通信を許可するためには、「ActionGroup」というサービス タグを許可するルールに追加する必要がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/app/ip-addresses#action-group-service-tag">Azure Monitor で使用される IP アドレス # アクション グループ サービス タグ</a></li></ul><p>以下のように許可ルールを追加いたします。<br><img src="/blog/LogicApps/actionGroupSetting/actionGroupSetting15.jpg"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Azure Monitor のアラート発報時に Logic Apps を起動させる方法と、そのテスト方法およびアクセス制限による諸注意についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/Integration-logAlertRule/">ログ アラート ルールの発報時に出力されたデータからクエリの検索結果を取得する</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Azure Monitor でアラートが発報された時に Logic Apps を呼び出す方法について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Monitor" scheme="https://jpazinteg.github.io/blog/tags/Azure-Monitor/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps のワークフローを API 操作でキャンセルする</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicAppsApiCancel/</id>
    <published>2023-05-02T07:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.840Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。 </p><p>API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。</p><p>まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP">Workflow Runs - Cancel</a></li></ul><p>しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。<br>そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Standard Logic Apps の実行中のワークフローを REST API でキャンセルしたい方</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><h2 id="キャンセル処理の-API-の確認方法"><a href="#キャンセル処理の-API-の確認方法" class="headerlink" title="キャンセル処理の API の確認方法"></a>キャンセル処理の API の確認方法</h2><p>まず、先にもご案内しました通り、Standard Logic Apps のワークフローの処理をキャンセルする API については公開情報はございません。<br>その為、今回の記事では以下のリソース プロバイダーに対してキャンセル処理の API を直接実行することで、ワークフローのキャンセル処理を実装致します。</p><ul><li><a href="https://learn.microsoft.com/en-US/azure/templates/microsoft.web/sites/hostruntime/webhooks/api/workflows/runs?pivots=deployment-language-arm-template">Microsoft.Web sites/hostruntime/webhooks/api/workflows/runs</a></li></ul><p>実際にどのような方法で設定するかにつきましてですが、こちらブラウザの開発者ツールにて GUI 操作時のリクエストを解析することで確認可能でございます。<br>確認方法につきまして、以下に参考例を記載いたします。</p><p>＜確認方法＞</p><ol><li><p>ブラウザを起動し、開発者ツール (F12) を実行します。本例では chromium 版 Edge を利用しております。</p></li><li><p> 実際に実行中のワークフローを [実行の取り消し] ボタンでキャンセルいたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image001.png"> </p></li><li><p>実際のリクエストとして “cancel?api-version=2018-11-01” の実行結果が出力されますので、こちらのヘッダに記載されている要求 URL を確認します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image002.png"> </p></li></ol><p>以上より、以下のような API が実行されていることを確認出来ます。</p><p>＜実際に実行されている API＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://management.azure.com/subscriptions/&#123;SubscriptionId&#125;/resourceGroups/&#123;ResourceGroupName&#125;/providers/Microsoft.Web/sites/&#123;LogicAppsName&#125;/hostruntime/runtime/webhooks/workflow/api/management/workflows/&#123;WorkFlowName&#125;/runs/&#123;RunId&#125;/cancel?api-version=2018-11-01</span><br></pre></td></tr></table></figure><p>・SubscriptionId：Standard Logic Apps の存在するサブスクリプション ID<br>・ResourceGroupName：Standard Logic Apps の存在するリソース グループ名<br>・LogicAppsName：Standard Logic Apps 名<br>・WorkFlowName：Standard Logic Apps 内に作成した ワークフロー名<br>・RunId：実行 ID</p><p>なお、こちらの API の内容については 2023/05/01 現在の内容となります。<br>今後将来的に予告なく内容が変更される場合がございますので予めご了承下さい。</p><p>これらを基に、以下の通りキャンセル処理の設定例を記載いたします。</p><h2 id="設定例と実行結果"><a href="#設定例と実行結果" class="headerlink" title="設定例と実行結果"></a>設定例と実行結果</h2><p>本例では、マネージド ID を有効にした従量課金タイプの Logic Apps より、上記 API を実行して処理のキャンセルを実装いたします。<br>まず、Standard Logic Apps とは別で従量課金タイプの Logic Apps を用意し、事前にマネージド ID を有効に致します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image003.png"> </p><p>次に、そのまま同一画面上の [Azure ロールの割り当て] ボタンを選択し、マネージド ID に “Web サイト共同作成者” ロールを付与します。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image004.png"> </p><p><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image005.png"> </p><ul><li><a href="https://learn.microsoft.com/ja-JP/azure/role-based-access-control/built-in-roles#website-contributor">Azure 組み込みロール # Website Contributor</a></li></ul><p>次に、従量課金タイプのワークフローにて、HTTP アクションを設定いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-http">Azure Logic Apps から HTTP または HTTPS でサービス エンドポイントを呼び出す</a></li></ul><p>以下の通りパラメーターを指定し、認証方法にマネージド ID を指定いたします。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image006.png"><br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image007.png"> </p><p>以上の設定より、マネージド ID を基にリクエストを行うことで API を実行し、実行中のワークフローの処理をキャンセルすることが可能でございます。</p><p>＜実行例＞<br>・Standard Logic Apps にてワークフロー実行中。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image008.png"> </p><p>・従量課金タイプよりワークフローを実行。<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image009.png"> </p><p>・結果<br><img src="/blog/LogicApps/StandardLogicAppsApiCancel/image010.png"> </p><p>以上より、API 操作を基に Standard Logic Apps のワークフローの実行をキャンセルすることが可能でございます。<br>なお、先にも申しました通り、こちら公開情報がございませんことと、2023/05/01 現在の情報となりますので、今後内容が変更される可能性が十分にございます。<br>お手数をおかけして申し訳ございませんが、上記を踏まえまして、お客様にて十分に検証を実施いただいたうえで採用要否についてご検討をいただきますようお願い申し上げます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>キャンセル処理の API の確認方法</li><li>設定例と実行結果</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。 &lt;/p&gt;
&lt;p&gt;API 操作による Standard Logic Apps の処理のキャンセル方法についてご説明いたします。&lt;/p&gt;
&lt;p&gt;まず、従量課金タイプの Logic Apps では以下の API を利用することでワークフローを API 操作でキャンセルすることが可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/cancel?tabs=HTTP&quot;&gt;Workflow Runs - Cancel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、Standard Logic Apps のワークフローについてはキャンセル処理に関する API の情報を公開しておりません。&lt;br&gt;そこで今回は、Standard Logic Apps の実行中のワークフローを API を用いてキャンセルする方法についてブログにてご案内致します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps の送信 IP アドレスについて</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/outboundIpaddress/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/outboundIpaddress/</id>
    <published>2023-04-24T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.876Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps の送信 IP アドレスについて説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Logic Apps の送信 IP アドレスの情報を用いて、アクセス制限を行いたい方</li></ul><h2 id="Logic-Apps-のコネクタの種類"><a href="#Logic-Apps-のコネクタの種類" class="headerlink" title="Logic Apps のコネクタの種類"></a>Logic Apps のコネクタの種類</h2><p>Logic Apps では、組み込みのトリガーおよびアクションと、マネージド コネクタの大きく 2 種類があります。<br>それによって送信 IP アドレスが異なりますので、まずはコネクタの種類について説明いたします。</p><h3 id="組み込みのトリガーおよびアクション"><a href="#組み込みのトリガーおよびアクション" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p>トリガーおよびアクション追加時に、「ビルトイン」タブに表示されるものになります。<br><strong>&lt;従量課金タイプ&gt;</strong><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress01.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-in-consumption-versus-standard">Azure Logic Apps の組み込みコネクタ # 従量課金と Standard の組み込みコネクタの比較</a></li></ul><h3 id="マネージド-コネクタ"><a href="#マネージド-コネクタ" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプでは、トリガーおよびアクション追加時に「標準」タブおよび「エンタープライズ」タブに表示されるものになります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress03.jpg"><br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress04.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard タイプでは、「Azure」タブに表示されるものになります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/managed">Azure Logic Apps のマネージド コネクタ</a></li></ul><h2 id="送信-IP-アドレス"><a href="#送信-IP-アドレス" class="headerlink" title="送信 IP アドレス"></a>送信 IP アドレス</h2><h3 id="組み込みのトリガーおよびアクション-1"><a href="#組み込みのトリガーおよびアクション-1" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p><strong>&lt;従量課金タイプ&gt;</strong><br>従量課金タイプの Logic Apps において「HTTP」アクションのような組み込みアクションで利用されます送信 IP アドレスは、<br>以下の公開情報の該当リージョンのものとなります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#multi-tenant---outbound-ip-addresses">Azure Logic Apps の制約と構成の参考文献 # マルチテナント - 送信 IP アドレス</a></li></ul><p>たとえば、東日本リージョンに Logic Apps を配置されている場合、以下が対象となります。<br>ファイアウォール等で受信ルールをご設定いただいている場合には、該当リージョンのすべての IP アドレスを許可いただく必要がございます。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress06.jpg"></p><p>また、こちらの IP アドレスは、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] の「ランタイム発信 IP アドレス」が該当いたします。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress07.jpg"></p><p><strong>&lt;Standard タイプ&gt;</strong><br>Standard タイプの Logic Apps におきましては、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] にて、「追加の送信 IP アドレス」が該当いたします。<br>※ 「送信 IP アドレス」は、「追加の送信 IP アドレス」に含まれております。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress08.jpg"></p><h3 id="マネージド-コネクタ-1"><a href="#マネージド-コネクタ-1" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p>マネージド コネクタは、従量課金タイプの Logic Apps でも Standard タイプの Logic Apps でも送信 IP アドレスは共通しております。<br>以下の公開情報の該当リージョンのものとなります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><p>たとえば、東日本リージョンに Logic Apps を配置されている場合、以下が対象となります。<br>ファイアウォール等で受信ルールをご設定いただいている場合には、該当リージョンのすべての IP アドレスを許可いただく必要がございます。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress09.jpg"></p><p>従量課金タイプの場合、こちらの IP アドレスは、[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - プロパティ] の「コネクタ発信 IP アドレス」が該当いたします。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress10.jpg"></p><h2 id="サービス-タグ"><a href="#サービス-タグ" class="headerlink" title="サービス タグ"></a>サービス タグ</h2><p>Azure 上の VNet 等の一部の製品では、サービス タグをご利用いただくことが可能でございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/virtual-network/service-tags-overview">仮想ネットワーク サービス タグ</a></li></ul><p>Logic Apps に関連するサービス タグは以下になります。<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress11.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#firewall-ip-configuration-considerations">Azure Logic Apps の制約と構成の参考文献 # ファイアウォールの IP 構成に関する考慮事項</a></li></ul><h3 id="組み込みのトリガーおよびアクション-2"><a href="#組み込みのトリガーおよびアクション-2" class="headerlink" title="組み込みのトリガーおよびアクション"></a>組み込みのトリガーおよびアクション</h3><p>従量課金タイプの場合は、サービス タグは「<strong>LogicApps</strong>」になります。<br>※ Standard タイプでは、サービス タグのご用意がございません。</p><h3 id="マネージド-コネクタ-2"><a href="#マネージド-コネクタ-2" class="headerlink" title="マネージド コネクタ"></a>マネージド コネクタ</h3><p>マネージド コネクタの場合は、従量課金タイプ、Standard タイプ問わず、サービス タグは「<strong>AzureConnectors</strong>」になります。<br>「<strong>AzureConnectors.リージョン</strong>」とすることで、特定のリージョンのものを指定することが可能です。</p><h2 id="IP-アドレスの変更"><a href="#IP-アドレスの変更" class="headerlink" title="IP アドレスの変更"></a>IP アドレスの変更</h2><p>以下に記載の送信 IP アドレスは、過去に変更された事例がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#multi-tenant---outbound-ip-addresses">Azure Logic Apps の制約と構成の参考文献 # マルチテナント - 送信 IP アドレス</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/common/outbound-ip-addresses#azure-logic-apps">マネージド コネクタのアウトバウンド IP アドレス # Azure Logic Apps</a></li></ul><p>Azure のサブスクリプション管理者宛てにメールでの通知、およびサービス正常性での通知が行われましたので、<br>変更時には IP アドレスの設定の見直しをお願いいたします。<br>※ サービス タグをご利用の場合には、ご変更いただく必要はございません。</p><p>ご参考までに過去のアナウンスのスケジュールにつきましてご案内いたします。</p><p>・メールでのアナウンス：2020/7/16<br>・変更実施：2020/8/31<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress12.jpg"></p><p>・メールでのアナウンス：2022/3/26<br>・変更実施：2022/5/15<br><img src="/blog/LogicApps/outboundIpaddress/outboundIpaddress13.jpg"></p><h2 id="サービス正常性アラートの設定"><a href="#サービス正常性アラートの設定" class="headerlink" title="サービス正常性アラートの設定"></a>サービス正常性アラートの設定</h2><p>正常性アラートからメールで通知する方法がございます。</p><ol><li>[Azure ポータル] - [サービス正常性] - [アラート - 正常性アラート] - [+ サービス正常性アラートの追加] を選択します。</li><li>以下の項目を設定します。<br>[条件 - アラートの対象] - [サブスクリプション] : 対象のサブスクリプションを選択します。<br>[条件 - アラートの対象] - [サービス] : Logic Apps<br>[条件 - アラートの対象] - [リージョン] : Logic Apps をご利用頂いておりますリージョンを選択します。 [全体] を選択することも可能です。<br>[条件 - アラートの対象] - [Service Health の基準] : 全てにチェック入れます。<br>[アクション - アクショングループ名] : [アクショングループの追加] を選択し、メール通知を含むアクショングループを追加します。<br>[アラートルールに詳細 - アラートルール名] : 任意のアラートルール名を入力します。<br>[アラートルールの作成] を選択します。<br>アクショングループのご利用手順につきましては、以下の公開情報でご確認頂けます。</li></ol><ul><li>参考ドキュメント : <a href="https://docs.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups">Azure Portal でのアクション グループの作成および管理</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps の送信 IP アドレスについて説明いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps の送信 IP アドレスについて説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Ip address" scheme="https://jpazinteg.github.io/blog/tags/Ip-address/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で AAD 認証する方法について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/AadAuthentication/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/AadAuthentication/</id>
    <published>2023-03-30T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.744Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>Standard Logic Apps （シングルテナント） をご利用のお客様も多いかと思いますが、App Service や Azure Functions と異なり、Standard Logic Apps では Azure Portal から AAD 認証の設定が出来ません。</p><p><img src="/blog/LogicApps/AadAuthentication/image000.png"></p><p>今回は、REST API を用いて Standard Logic Apps でも AAD 認証 (EasyAuth) を行う方法をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>事前準備・前提</li><li>Azure Active Directory へのアプリ登録</li><li>トークン取得</li><li>Resource Explorer にて authsettingsV2 の更新</li><li>AAD 認証による Standard Logic Apps の実行</li><li>まとめ</li></ul><h2 id="事前準備・前提"><a href="#事前準備・前提" class="headerlink" title="事前準備・前提"></a>事前準備・前提</h2><p>今回の記事については以下の情報を参考にしております。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/trigger-workflows-in-standard-logic-apps-with-easy-auth/ba-p/3207378">Trigger workflows in Standard logic apps with Easy Auth</a></li></ul><p>なお、本記事における REST API の実行方法については <a href="https://www.postman.com/downloads/">postman</a> を利用してリクエストを送信します。そのため、Postman のインストール設定を事前に実施いただくことが前提の記事となります。<br>authsettingsV2 の更新については、<a href="https://resources.azure.com/">Resource Explorer</a> を利用して更新いたします。</p><p>＜参考情報＞<br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/configure-authentication-file-based">Azure App Service 認証でのファイルベースの構成</a></p><p>途中でトークンのデコードを行う手順がございますが、 <a href="https://jwt.io/">jwt.io</a> （もしくは <a href="https://jwt.ms/">jwt.ms</a> ） というサイトで行います。</p><p>なお、本記事についてはあくまでも Logic Apps を呼び出す方法となります。Logic Apps から App Service や Functions を呼び出す方法ではございませんことと、そちらの方法については本記事ではご案内しませんのでご留意ください。</p><p>以上を基に、本記事では認証手順を記載いたします。</p><h2 id="Azure-Active-Directory-へのアプリ登録"><a href="#Azure-Active-Directory-へのアプリ登録" class="headerlink" title="Azure Active Directory へのアプリ登録"></a>Azure Active Directory へのアプリ登録</h2><p>始めに、トークンを取得する為にお客様がご利用いただいている Azure Active Directory に対して “アプリの登録” を行います。<br>なお、トークンの取得方法については複数ございますため、お客様にとって容易な方法でご対応いただければと存じます。</p><p>＜アプリの登録手順＞<br>１．Azure Portal より Azure Active Directory を選択し、[アプリの登録] を選択。<br><img src="/blog/LogicApps/AadAuthentication/image001.png"></p><p>２．以下の内容で登録。<br>・名前 = 任意の値<br>・サポートされているアカウントの種類 = “この組織ディレクトリのみに含まれるアカウント (Microsoft のみ - シングル テナント)</p><p>以降変更なし。<br><img src="/blog/LogicApps/AadAuthentication/image002.png"></p><p>アプリの登録が出来ましたら、[概要] より以下の内容を控えていただきます。</p><p><img src="/blog/LogicApps/AadAuthentication/image003.png"></p><p>＜控える項目＞<br>・アプリケーション (クライアント) ID<br>・オブジェクト ID<br>・ディレクトリ (テナント) ID</p><p>次に、[証明書とシークレット] のメニューより、[新しいクライアント シークレット] を作成いただきます。<br>こちらについては有効期限はお客様の要件によって任意の値を設定下さいますようお願いいたします。<br>ここで表示されるクライアントシークレットの値は一度しか表示されませんので、確実にこの作成したタイミングで控えていただきますようお願いいたします。</p><p><img src="/blog/LogicApps/AadAuthentication/image004.png"></p><p>＜控える項目＞<br>・値</p><p>次に、[管理] - [API の公開] のメニューより、[アプリケーション ID の URI] の 設定ボタンを選択します。</p><p><img src="/blog/LogicApps/AadAuthentication/image017.png"></p><p>“api://“ から始まるアプリケーション ID の URI が払い出されますので、保存ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image018.png"></p><p>このタイミングで、”アプリケーション ID の URI” の値を控えておきます。<br><img src="/blog/LogicApps/AadAuthentication/image01802.png"></p><p>＜控える項目＞<br>・アプリケーション ID の URI </p><p>最後に、[管理] - [マニフェスト] より、”accessTokenAcceptedVersion” の値を “2” に設定後、保存ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image01801.png"></p><p>Azure Active Directory へのアプリ登録の方法については以上となります。次の手順で、認証に利用するトークンの情報を取得致します。</p><h2 id="トークン取得"><a href="#トークン取得" class="headerlink" title="トークン取得"></a>トークン取得</h2><p>続いて、AAD 認証に必要な REST API を設定いたします。まず、先に記載しました Postman を起動し、トークンを取得します。<br><img src="/blog/LogicApps/AadAuthentication/image019.png"></p><p>・POSTメソッド<br><a href="https://login.microsoftonline.com/%7B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA(%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88)ID%7D/oauth2/v2.0/token">https://login.microsoftonline.com/{ディレクトリ(テナント)ID}/oauth2/v2.0/token</a><br><img src="/blog/LogicApps/AadAuthentication/image020.png"></p><p>Body には [x-www-from-urlencoded] を指定し、以下の内容を設定します。</p><p><img src="/blog/LogicApps/AadAuthentication/image021.png"><br>client_id = AAD に登録したアプリの [アプリケーション (クライアント) ID] を指定<br>scope = {アプリケーション ID の URI}/.default<br>client_secret = クライアントシークレットの [値]<br>grant_type = client_credentials</p><p>それ以外のパラメーターは特に設定不要でございます。</p><p>以上の設定が設定出来ましたら、画面右上の [Send] ボタンを選択し、リクエストを送信します。<br><img src="/blog/LogicApps/AadAuthentication/image022.png"></p><p>リクエストが成功すると、Body の中にトークンの値が表示されますので、 “access_token” を全て控えていただきます。</p><p>＜控える項目＞<br>・access_token<br><img src="/blog/LogicApps/AadAuthentication/image023.png"></p><p>続いて、取得した “access_token” をデコードし、oid を取得することと、aud の値と作成したアプリの client_id を比較いたします。</p><p><a href="https://jwt.io/">jwt.io</a></p><p><img src="/blog/LogicApps/AadAuthentication/image00701.png"></p><p>ブラウザで上記サイトを開いたら以下の [Encoded] に先ほどコピーした “access_token” を全て貼り付けます。<br><img src="/blog/LogicApps/AadAuthentication/image024.png"></p><p>画面右側の [Decoded] - [PAYLOAD] の以下の値を値を控えていただきます。<br><img src="/blog/LogicApps/AadAuthentication/image025.png"></p><p>＜控える項目＞<br>・oid</p><p>ここで、aud の値と作成したアプリの client_id (アプリケーション (クライアント) ID) が同じものであることを確認します。</p><p>トークン取得の作業としては以上となりますが、”access_token” , “aud” および “oid” については後続の手順で利用しますので、そのまま残していただきますようお願いいたします。<br>なお、こちらのトークンにつきましては、通常 1 ~ 1.5 h の有効期限がございます。そのため、トークン発行後、有効期限が切れるたびに再取得する必要があることをご留意願います。</p><h2 id="Resource-Explorer-にて-authsettingsV2-の更新"><a href="#Resource-Explorer-にて-authsettingsV2-の更新" class="headerlink" title="Resource Explorer にて authsettingsV2 の更新"></a>Resource Explorer にて authsettingsV2 の更新</h2><p>続いて、authsettingsV2 API を呼び出します。こちらは Standard Logic Apps に対して AAD 認証を行うための事前処理を行うものでございます。<br>こちらの手順では Resource Explorer を用いてリクエストを送信いたします。</p><p>初めに、以下の URL より Resource Explorer を起動いたします。<br><a href="https://resources.azure.com/">Resource Explorer</a>　</p><p>検索ボックスに今回 AAD 認証で起動したい Standard Logic Apps のリソース名を入力し、リソースプロバイダが “Microsoft.Web/sites” となっているものを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image026.png"></p><p>対象のリソースが確認出来ましたら、[config] - [authsettingsV2] を選択いたします。<br><img src="/blog/LogicApps/AadAuthentication/image027.png"></p><p>表示されている画面にて authsettingsV2 の REST API を実行することが可能ですので、画面上部の “Read/Write” より編集可能な状態に設定後、”Data (Get,PUT)” を選択し、[Edit] ボタンを選択いたします。<br><img src="/blog/LogicApps/AadAuthentication/image028.png"></p><p>PUT メソッドで設定する Body について、以下の記事を参考に設定いただきます。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/trigger-workflows-in-standard-logic-apps-with-easy-auth/ba-p/3207378">Trigger workflows in Standard logic apps with Easy Auth</a></li></ul><p>＜Body サンプル＞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;/subscriptions/&#123;subscriptionId&#125;/resourcegroups/&#123;resourceGroupName&#125;/providers/Microsoft.Web/sites/&#123;logicAppName&#125;/config/authsettingsV2&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;authsettingsV2&quot;,</span><br><span class="line">    &quot;type&quot;: &quot;Microsoft.Web/sites/config&quot;,</span><br><span class="line">    &quot;location&quot;: &quot;&#123;locationOfLogicApp&#125;&quot;,</span><br><span class="line">    &quot;tags&quot;: &#123;&#125;,</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;platform&quot;: &#123;</span><br><span class="line">            &quot;enabled&quot;: true,</span><br><span class="line">            &quot;runtimeVersion&quot;: &quot;~1&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;globalValidation&quot;: &#123;</span><br><span class="line">            &quot;requireAuthentication&quot;: true,</span><br><span class="line">            &quot;unauthenticatedClientAction&quot;: &quot;AllowAnonymous&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;identityProviders&quot;: &#123;</span><br><span class="line">            &quot;azureActiveDirectory&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: true,</span><br><span class="line">                &quot;registration&quot;: &#123;</span><br><span class="line">                    &quot;openIdIssuer&quot;: &quot;&#123;issuerId&#125;&quot;,</span><br><span class="line">                    &quot;clientId&quot;: &quot;&#123;clientId&#125;&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;login&quot;: &#123;</span><br><span class="line">                    &quot;disableWWWAuthenticate&quot;: false</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;</span><br><span class="line">                    &quot;jwtClaimChecks&quot;: &#123;&#125;,</span><br><span class="line">                    &quot;allowedAudiences&quot;: [</span><br><span class="line">                        &quot;&#123;audience1&#125;&quot;,</span><br><span class="line">                        &quot;&#123;audience2&#125;&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;defaultAuthorizationPolicy&quot;: &#123;</span><br><span class="line">                        &quot;allowedPrincipals&quot;: &#123;</span><br><span class="line">                            &quot;identities&quot;: [</span><br><span class="line">                                &quot;&#123;ObjectId of AAD app&#125;&quot;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;facebook&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;gitHub&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;google&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;twitter&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;legacyMicrosoftAccount&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;,</span><br><span class="line">                &quot;validation&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;apple&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;registration&quot;: &#123;&#125;,</span><br><span class="line">                &quot;login&quot;: &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;login&quot;: &#123;</span><br><span class="line">            &quot;routes&quot;: &#123;&#125;,</span><br><span class="line">            &quot;tokenStore&quot;: &#123;</span><br><span class="line">                &quot;enabled&quot;: false,</span><br><span class="line">                &quot;tokenRefreshExtensionHours&quot;: 72.0,</span><br><span class="line">                &quot;fileSystem&quot;: &#123;&#125;,</span><br><span class="line">                &quot;azureBlobStorage&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;preserveUrlFragmentsForLogins&quot;: false,</span><br><span class="line">            &quot;cookieExpiration&quot;: &#123;</span><br><span class="line">                &quot;convention&quot;: &quot;FixedTime&quot;,</span><br><span class="line">                &quot;timeToExpiration&quot;: &quot;08:00:00&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;nonce&quot;: &#123;</span><br><span class="line">                &quot;validateNonce&quot;: true,</span><br><span class="line">                &quot;nonceExpirationInterval&quot;: &quot;00:05:00&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;httpSettings&quot;: &#123;</span><br><span class="line">            &quot;requireHttps&quot;: true,</span><br><span class="line">            &quot;routes&quot;: &#123;</span><br><span class="line">                &quot;apiPrefix&quot;: &quot;/.auth&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;forwardProxy&quot;: &#123;</span><br><span class="line">                &quot;convention&quot;: &quot;NoProxy&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>隅付き括弧で記載されているパラメーターについては以下の通り設定いたします。</p><p>・locationOfLogicApp = japaneast や japanwest 等 Standard Logicc Apps が存在するリージョン<br>・issuerId = “<a href="https://sts.windows.net/%7B%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA(%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88)ID%7D/">https://sts.windows.net/{ディレクトリ(テナント)ID}/</a> “<br>・clientId = トークンから取得した aud<br>・audience1 = AAD に登録したアプリの {アプリケーション ID の URI}<br>・audience2 = トークンから取得した aud<br>・ObjectId of AAD app = トークンから取得した oid</p><p>上記の通り Body が設定出来ましたら、[PUT] ボタンを選択します。<br><img src="/blog/LogicApps/AadAuthentication/image029.png"></p><p>画面中央に緑色のチェックマークが表示されれば完了です。<br><img src="/blog/LogicApps/AadAuthentication/image030.png"></p><h2 id="AAD-認証による-Standard-Logic-Apps-の実行"><a href="#AAD-認証による-Standard-Logic-Apps-の実行" class="headerlink" title="AAD 認証による Standard Logic Apps の実行"></a>AAD 認証による Standard Logic Apps の実行</h2><p>以上の事前準備が出来ましたら、以下の REST API を実行し、Standard Logic Apps を実行致します。<br>なお、AAD 認証で呼び出す Standard Logic Apps のトリガーについては “HTTP 要求の受信時” トリガーである必要がございますため、ご留意いただきますようお願い申し上げます。</p><p><img src="/blog/LogicApps/AadAuthentication/image01101.png"></p><p>・POST メソッド</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://&#123;logicAppName&#125;.azurewebsites.net:443/api/&#123;workflowName&#125;/triggers/manual/invoke?api-version=2020-05-01-preview</span><br></pre></td></tr></table></figure><p>・logicAppName = Standard Logic Apps （ワークフロー名ではない）<br>・workflowName = Standard Logic Apps に構築しているワークフロー名<br><img src="/blog/LogicApps/AadAuthentication/image012.png"><br><img src="/blog/LogicApps/AadAuthentication/image013.png"></p><p>続いて、Postman の Headers に以下を追加いたします。</p><p>・KEY = Authorization<br>・VALUE = Bearer “access_token”<br><img src="/blog/LogicApps/AadAuthentication/image014.png"></p><p>以上の設定が出来ましたら、画面右上の [Send] ボタンを選択し、リクエストを送信します。</p><p>Status 202 が表示されましたら無事 Standard Logic Apps のワークフローが AAD 認証によって実行されます。<br><img src="/blog/LogicApps/AadAuthentication/image015.png"></p><p>Standard Logic Apps の実行結果に Postman から実行されたログが出力されます。<br><img src="/blog/LogicApps/AadAuthentication/image016.png"></p><p>以上の手順にて、AAD 認証を用いてStandard Logic Apps を実行することが可能でございます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>事前準備・前提</li><li>Azure ActiveDirectory へのアプリ登録</li><li>トークン取得</li><li>Resource Explorer にて authsettingsV2 の更新</li><li>AAD 認証による Standard Logic Apps の実行</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;Standard Logic Apps （シングルテナント） をご利用のお客様も多いかと思いますが、App Service や Azure Functions と異なり、Standard Logic Apps では Azure Portal から AAD 認証の設定が出来ません。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/AadAuthentication/image000.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今回は、REST API を用いて Standard Logic Apps でも AAD 認証 (EasyAuth) を行う方法をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Standard-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/azureMonitorLogsLimit/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/azureMonitorLogsLimit/</id>
    <published>2023-03-19T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.868Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約についてご説明いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約を確認されたい方</li><li>「Azure Monitor Logs」コネクタのクエリ実行に関わる制約の回避方法を知りたい方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>「Azure Monitor Logs」コネクタについては、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/connectors/azuremonitorlogs/">Azure Monitor Logs</a></li></ul></li><li><p>「Azure Monitor Logs」コネクタを使った実装例については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logs-export-logic-app">Logic Apps を使用した Log Analytics ワークスペースからストレージ アカウントへのデータのエクスポート</a></li></ul></li></ul><h2 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h2><p>「Azure Monitor Logs」コネクタには、以下の制約事項がございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logicapp-flow-connector#connector-limits">Logic Apps および Power Automate の Azure Monitor Logs コネクタ # コネクタの制限</a></li></ul><p><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit02.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/azure-monitor/service-limits#log-analytics-workspaces">Azure Monitor サービスの制限 # Log Analytics ワークスペース # Azure Monitor Logs コネクタ</a></li></ul><p>※ Azure Monitor Logs コネクタはデータを圧縮した形式で通信いたします。<br>上記のデータ容量の制限は圧縮した状態でのデータ容量に関する制限となります。<br>そのため、ワークフローの実行履歴からダウンロードした場合や、ファイルとして出力した際の容量とは異なるものとなります。</p><h2 id="制約に抵触した場合の動作"><a href="#制約に抵触した場合の動作" class="headerlink" title="制約に抵触した場合の動作"></a>制約に抵触した場合の動作</h2><p>件数やサイズの制約を超える結果を取得した場合には、<strong>エラーは発生せずに</strong>結果が省かれて返却される動作となります。<br>また、「クエリ タイムアウトの最大値」を超えた場合には、「RequestTimeout (408)」エラーが発生いたします。</p><h2 id="回避策-1-クエリの工夫"><a href="#回避策-1-クエリの工夫" class="headerlink" title="回避策 1 - クエリの工夫"></a>回避策 1 - クエリの工夫</h2><p>以下の公開情報に記載がございますように、一度に取得されるログが制約に抵触しない範囲となるよう、クエリを工夫いただく方法になります。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit01.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/logs/logicapp-flow-connector#connector-limits">Logic Apps および Power Automate の Azure Monitor Logs コネクタ # コネクタの制限</a></li></ul><p>たとえば、時間範囲を狭めることや project 演算子を利用して、一度に取得されるデータを小さくする方法が考えられます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/data-explorer/kusto/query/projectoperator">project 演算子</a></li></ul><p>「クエリ」にて where 句を用いた時間範囲の指定を行いますと、「時間範囲」にて「クエリで設定」を選択することが可能でございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit03.jpg"></p><p>※ 「Set in query」と表示される場合もございます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit04.jpg"></p><p>※ もし「クエリ」にて where 句を用いて時間範囲指定を行っているにも関わらず、「クエリで設定」や「Set in query」という選択肢が表示されない場合には、「カスタム値の入力」を選択して直接「Set in query」と入力してください。</p><p>「まで」アクションや「For each」アクション等のループ処理を利用して、繰り返しクエリを実行する方法が考えられます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#foreach-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Foreach” ループ</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops#until-loop">Azure Logic Apps 内のワークフロー アクションを繰り返す、または配列を処理するループを作成する # “Until” ループ</a></li></ul><h2 id="回避策-2-REST-API-の利用"><a href="#回避策-2-REST-API-の利用" class="headerlink" title="回避策 2 - REST API の利用"></a>回避策 2 - REST API の利用</h2><p>「クエリを実行して結果を一覧表示する」アクションの代わりとして、「HTTP」アクションにて以下の REST API を利用する方法もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP">Query - Execute</a></li></ul><p><strong>注意点</strong><br>当該 REST API にも別途制約がございますので、この点につきましてご留意ください。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-JP/azure/azure-monitor/service-limits#log-analytics-workspaces">Azure Monitor サービスの制限 # Log Analytics ワークスペース # クエリ API</a></li></ul><p>また、Logic Apps 自体の制約もございますので、こちらもご確認ください。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal">Azure Logic Apps の制約と構成の参考文献</a></li></ul><p>「クエリを実行して結果を一覧表示する」アクションから得られるデータの形式は「カラム名：値」ですが、<br>当該 REST API から得られるデータは形式が異なりますので、この点につきましてもご留意ください。<br>※ こちらにつきましては、後半に整形方法の一例をご案内しております。</p><p>「クエリを実行して結果を一覧表示する」アクションから得られるデータ<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit06.jpg"></p><p>REST API で得られるデータ<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit07.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP#cross-workspace">Query - Execute # Sample Response</a></li></ul><p><strong>REST API の実行方法</strong><br>以下に REST API の実行方法につきましてご案内いたします。<br>※ 従量課金タイプの Logic Apps を例としております。</p><ol><li><p>Logic Apps のマネージド ID を有効化する。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ID] と遷移し、「システム割り当て済み」タブにて「状態」を「オン」とし、「保存」を押下します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit08.jpg"></p></li><li><p>Log Analytics ワークスペースのロールを付与する。<br>1 で有効化されたマネージド ID に対して、ロールを付与します。<br>[Log Analytics ワークスペース] - [&lt;対象の Log Analytics ワークスペース&gt;] - [アクセス制御 (IAM)] と遷移し、「+ 追加」を押下して「ロールの割り当ての追加」を選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit09.jpg"><br>「ロール」タブにて「監視閲覧者」ロールを選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit10.jpg"></p></li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles#monitoring-reader">Azure 組み込みロール # Monitoring Reader</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/roles-permissions-security#built-in-monitoring-roles">Azure Monitor でのロール、アクセス許可、セキュリティ # 組み込みの監視の役割</a><br>「メンバー」タブにて「アクセスの割り当て先」に「ユーザー、グループ、またはサービス プリンシパル」を選択し、「+ メンバーを選択する」を押下します。<br>1 でマネージド ID を有効化した Logic Apps を検索・選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit11.jpg"><br>割り当てを完了します。<br>※ 割り当てに少しお時間がかかる場合がございます。</li></ul><ol start="3"><li>「HTTP」アクションを設定する。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - ロジック アプリ デザイナー] と遷移し、「HTTP」アクションを追加します。<br>以下の REST API を実行するために、各設定を行います。</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/rest/api/loganalytics/dataaccess/query/execute?tabs=HTTP">Query - Execute</a><br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit12.jpg"><br>・方法：POST<br>・URI：<a href="https://api.loganalytics.io/v1/workspaces/%7BworkspaceId%7D/query">https://api.loganalytics.io/v1/workspaces/{workspaceId}/query</a> … (※1)<br>・本文：クエリを設定します。 … (※2)<br>・認証 (「Add new parameter」を押下し、「認証」にチェックを入れます。)<br>　・認証の種類：マネージド ID<br>　・マネージド ID：システム割り当てマネージド ID<br>　・対象ユーザー：<a href="https://api.loganalytics.io/">https://api.loganalytics.io/</a><br>※1 workspaceId は、[Log Analytics ワークスペース] - [&lt;対象の Log Analytics ワークスペース&gt;] - [設定 - エージェント管理] にて、ご確認いただけます。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit13.jpg"><br>※2 クエリをご設定いただく際、クエリ内にダブルクォーテーションを使用しますと、有効な JSON として認識されない場合がございますので、ダブルクォーテーションの前に「\」をご設定ください。</li></ul><p><strong>データの整形</strong><br>「選択」アクションを利用することで、「クエリを実行して結果を一覧表示する」アクションと同様のデータ形式に整形することが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations#select-action">Azure Logic Apps でデータの操作を実行する # 選択アクション</a></li></ul><p>※ 以下にてご案内いたしますのは、あくまでサンプルでございます。お客様のご要件に合わせまして適宜ご変更いただき、<br>実運用に向けましたテストやハンドリングにつきましては、お客様ご自身にてご実施いただきますようお願い申し上げます。</p><p>「選択」アクションは以下のように入力します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit14.jpg"></p><p>・開始 : 式「body(‘HTTP’)?[‘tables’][0]?[‘rows’]」<br>・マップ :<br>　・TimeGenerated：式「item()[0]」<br>　・Type：式「item()[1]」<br>　・test_s：式「item()[2]」</p><p>使用しております body 関数および item 関数につきましては、以下の公開情報もございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#body">body</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#item">item</a></li></ul><p>※ 「動的なコンテンツの追加」を押下し、「式」タブにて各式をご設定いただき「OK」ボタン (以下のスクリーンショットの「更新」ボタンにあたります) を選択します。<br><img src="/blog/LogicApps/azureMonitorLogsLimit/azureMonitorLogsLimit15.jpg"></p><p>結果として、以下のデータを得ることができます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;TimeGenerated&quot;</span>: <span class="string">&quot;2022-12-22T01:18:36.023709Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;testCustom_CL&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test_s&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;TimeGenerated&quot;</span>: <span class="string">&quot;2022-12-22T01:19:51.6295168Z&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;testCustom_CL&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test_s&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>なお、大変申し訳ございませんが、columns の長さに応じて動的に「選択」アクションの「マップ」パラメーターの行を変更する機能はございません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、「Azure Monitor Logs」コネクタの制約と、その制約の回避策についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;「Azure Monitor Logs」コネクタのクエリ実行に関わる制約についてご説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure Monitor Logs" scheme="https://jpazinteg.github.io/blog/tags/Azure-Monitor-Logs/"/>
    
  </entry>
  
  <entry>
    <title>Foreachアクションでインデックスを取得した処理の比較</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/GetIterationIndexInForeachAction/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/GetIterationIndexInForeachAction/</id>
    <published>2023-03-16T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.784Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>本記事は弊社海外ブログを日本語向けに解説した記事となります。</p><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/get-iteration-index-in-foreach-action/ba-p/3730379">Get iteration index in Foreach action</a></li></ul><p>Logic Apps で配列内のデータを処理する際、For each アクションのループでインデックスを取得し（現在何番目の配列に対する処理かを判断）、処理を行いたい場合があるかと思います。<br>その際は、コンカレンシ―制御を以下のように 1 に設定し、各繰り返し回数ごとに常に 1 ずつ加算されるインデックスとして変数を使用する手法がございます。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image01.png"></p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image02.png"></p><p>しかし、この方法では For each 処理がシーケンシャルな処理であるため、並列実行が出来ずパフォーマンスに影響を及ぼすことがあります。</p><p>今回は、For each アクションを並列実行して、効率的にインデックスを利用する構成と、従来の処理との比較結果についてご案内いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1． 従来の手法</li><li>2． 本手法での処理の設定方法</li><li>3． 本手法での構成および処理時間の比較</li><li>まとめ</li></ul><h2 id="1．-従来の手法"><a href="#1．-従来の手法" class="headerlink" title="1． 従来の手法"></a>1． 従来の手法</h2><p>まず、今回の前提となる従来の構成がどのような場合を記載しているかについて説明いたします。<br>例えば、以下のようなフローがあるとします。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image03.png"></p><p>一つ目のアクションでは、テストで使用する配列のデータを用意いたします。<br>本記事では Azure Monitor ログ コネクタを基に以下の range 演算子で配列データを動的に作成しておりますが、配列形式のアクションであれば変数アクションで設定いただいても構いません。任意の構成で配列データを準備いただければと思います。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image04.png"></p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/connectors/azuremonitorlogs/">Azure Monitor Logs</a></p></li><li><p><a href="https://learn.microsoft.com/ja-JP/azure/data-explorer/kusto/query/rangeoperator">range 演算子</a></p></li></ul><p>参考までに、本アクションでは以下のような結果となります。</p><p>＜クエリ＞<br>range Steps from 1 to 12 step 1</p><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image05.png"></p><p>Steps と記載された配列要素が 12 個作成されます。</p><p>次に、以下の “変数を初期化する” アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image06.png"></p><p>こちらは For each 内で配列のインデックスとして利用いたします。</p><p>なお、元記事の構成では上記の通り Azure Monitor ログコネクタを利用しておりますが、以下の通り range 式関数でも配列を作成することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#range">range</a><br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image25.png"></li></ul><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image26.png"></p><p>こちらも参考までにご確認いただけますと幸いです。</p><p>次に、以下のような構成の For each アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image07.png"></p><p>詳細について以降で説明いたします。</p><p>まず、For each の “以前の手順から出力を選択” については、動的コンテンツの変数より “value” を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image08.png"></p><p>一つ目の作成アクションでは “変数を初期化する” で作成した変数を指定しましす。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image09.png"></p><p>二つ目の作成アクションでは以下のような式関数を指定しましす。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image10.png"></p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iteration index: @&#123;outputs(&#x27;作成_3&#x27;)&#125;, data:@&#123;body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;][outputs(&#x27;作成_3&#x27;)]&#125;</span><br></pre></td></tr></table></figure><p>こちらの処理で、インデックスを基に最初に設定した配列の要素を取得致します。</p><p>三つ目のアクションでは変数をインクリメント致します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image11.png"></p><p>ここまでの設定が出来ましたら、以下の通り For each のコンカレンシー制御を 1 に設定いたします。<br>（1 にせず並列実行にした場合、変数の値が正常に加算されない）</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image12.png"><br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image13.png"></p><p>出力結果については、以下の通り順次実行で配列の値を取得することが可能ではございますが、1 つずつ取得することとなるのでパフォーマンスに影響が発生します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image14.png"></p><p>以上が前提となる処理になります。こちらの内容について、以下の手順で処理速度を改善する方法を記載いたします。</p><h2 id="2．-処理の設定方法"><a href="#2．-処理の設定方法" class="headerlink" title="2． 処理の設定方法"></a>2． 処理の設定方法</h2><p>本記事の処理構成として、以下のような構成となります。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image15.png">　 </p><p>一つ目のアクションについては “1． 従来の手法での処理時間” で記載した内容と同様に配列の作成となるため説明を割愛いたします。</p><p>二つ目のアクションについて、処理する必要のあるすべてのインデックスを保存した新しい配列を生成する<br>処理となります。例えば、10 項目の配列があった場合、インデックス配列は [ 0, 1, 2 … 9 ] のように生成する必要があります（0 から始まり、[配列長 - 1]で終わります）。</p><p><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image16.png">　 </p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range ID from 0 to @&#123;add(length(body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;]), -1)&#125; step 1</span><br></pre></td></tr></table></figure><p>&lt;結果&gt;<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image17.png">　 </p><p>次に、以下のような構成の For each アクションを後続に指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image18.png">　 </p><p>詳細について以降で説明いたします。</p><p>まず、For each の “以前の手順から出力を選択”　については、先ほど作成したインデックスの配列を指定いたします。本例では “クエリを実行して結果を一覧表示する” の “value” を指定します。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image19.png"></p><p>一つ目の作成アクションでは以下の式関数を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image20.png"></p><p>以下、コードビューの例となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#123;items(&#x27;For_each&#x27;)[&#x27;ID&#x27;]&#125;</span><br></pre></td></tr></table></figure><p>こちらのアクションについては現在 For each で参照しているアイテムのインデックスを取得している処理となります。</p><p>二つ目の作成アクションでは以下の式関数を指定いたします。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image21.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iteration index:@&#123;outputs(&#x27;作成&#x27;)&#125; , data:@&#123;body(&#x27;StepArray&#x27;)?[&#x27;value&#x27;][outputs(&#x27;作成&#x27;)]&#125;</span><br></pre></td></tr></table></figure><p>こちらの処理で、インデックスを基に最初に設定した配列の要素を取得致します。</p><p>出力結果については、For each の外であらかじめ作成したインデックスと紐づけて配列のデータを取得することで、並列実行処理で配列の値を取得することが可能でございます。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image22.png"></p><h2 id="3．本手法での構成および処理時間"><a href="#3．本手法での構成および処理時間" class="headerlink" title="3．本手法での構成および処理時間"></a>3．本手法での構成および処理時間</h2><p>上記構成について配列要素数を 1000 にした状態でそれぞれ実行時間の比較検証を実施致しました。<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image23.png"></p><p>本記事の元となっているブログにも 90 % 近く処理時間の削減が出来たと記載がございますが、<br>本ブログの執筆時の検証結果としましても同様の結果となりました。</p><p>予め作成したインデックスと紐づけた場合：22 秒<br>For each 内でインデックスと紐づけた場合：6 分<br><img src="/blog/LogicApps/GetIterationIndexInForeachAction/image24.png"></p><p>以上、For each 処理におけるインデックスの取得方法についてご案内いたしました。<br>こちらの記事について、ご参考までにご一読いただければと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下の 3 点について、海外ブログを基にご案内いたしました。</p><ul><li>1． 従来の手法</li><li>2． 処理の設定方法</li><li>3． 本手法での構成および処理時間の比較</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;本記事は弊社海外ブログを日本語向けに解説した記事となります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/get-iteration-index-in-foreach-action/ba-p/3730379&quot;&gt;Get iteration index in Foreach action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Logic Apps で配列内のデータを処理する際、For each アクションのループでインデックスを取得し（現在何番目の配列に対する処理かを判断）、処理を行いたい場合があるかと思います。&lt;br&gt;その際は、コンカレンシ―制御を以下のように 1 に設定し、各繰り返し回数ごとに常に 1 ずつ加算されるインデックスとして変数を使用する手法がございます。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/GetIterationIndexInForeachAction/image01.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/LogicApps/GetIterationIndexInForeachAction/image02.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;しかし、この方法では For each 処理がシーケンシャルな処理であるため、並列実行が出来ずパフォーマンスに影響を及ぼすことがあります。&lt;/p&gt;
&lt;p&gt;今回は、For each アクションを並列実行して、効率的にインデックスを利用する構成と、従来の処理との比較結果についてご案内いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="For each" scheme="https://jpazinteg.github.io/blog/tags/For-each/"/>
    
  </entry>
  
  <entry>
    <title>実行中の Logic Apps の状況を確認して制御する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/WorkflowRunsList/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/WorkflowRunsList/</id>
    <published>2023-03-15T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.860Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの山田です。</p><p>複数の Logic Apps を実行する際に、「<a href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/">トリガーのコンカレンシー制御</a>」がございますが、ここではもう少し汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><p>トリガーのコンカレンシー制御以外の手段で、他の実行中の Logic Apps の状況を任意にフィルターして制御する方法を実装されたい方。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>実行一覧 API</li><li>Logic Apps から HTTP コネクタによる API の実行</li><li>状況判定</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="実行一覧-API"><a href="#実行一覧-API" class="headerlink" title="実行一覧 API"></a>実行一覧 API</h2><p><a href="https://learn.microsoft.com/ja-jp/rest/api/logic/workflow-runs/list?tabs=HTTP">Workflow Runs - List</a></p><p>ワークフローの実行の一覧を取得します。</p><p><code>https://management.azure.com/subscriptions/&#123;subscriptionId&#125;/resourceGroups/&#123;resourceGroupName&#125;/providers/Microsoft.Logic/workflows/&#123;workflowName&#125;/runs?api-version=2016-06-01&amp;$filter=&#123;$filter&#125;</code></p><p>これにより、Filter で例として、実行中のフローを絞り込むことができます。実行中のものを絞り込むフィルタは <code>status eq &#39;running&#39;</code> などとなります。エンコードを掛けますと以下のような URL になります。</p><p><code>https://management.azure.com/subscriptions/&#123;subscriptionId&#125;/resourceGroups/&#123;resourceGroupName&#125;/providers/Microsoft.Logic/workflows/&#123;workflowName&#125;/runs?api-version=2016-06-01&amp;$filter=status%20eq%20%27running%27</code></p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-1.png"></p><h2 id="Logic-Apps-から-HTTP-コネクタによる-API-の実行"><a href="#Logic-Apps-から-HTTP-コネクタによる-API-の実行" class="headerlink" title="Logic Apps から HTTP コネクタによる API の実行"></a>Logic Apps から HTTP コネクタによる API の実行</h2><p>上の API を、Logic Apps の、HTTP コネクタから実行いただけます。ここでは認証にマネージド ID を利用しております。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-2.png"></p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-3.png"></p><p>この方法で当該の API を使用する際は Logic Apps のマネージド ID に対して、「Logic App Operator」ロールを割り当てます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles#logic-app-operator">Azure 組み込みロール # Logic App Operator</a></p><h2 id="状況判定"><a href="#状況判定" class="headerlink" title="状況判定"></a>状況判定</h2><p>この HTTP の結果に対して、Logic Apps 内で関数を用いますと以下のような判定が可能となります。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-4.png"> </p><p><code>Length(body(&#39;HTTP&#39;)?[&#39;value&#39;])</code></p><p>Length</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#length">式関数のリファレンス ガイド - Azure Logic Apps # Length</a></p><p>配列の項目の数を返します。</p><p>実行結果:</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-5.png"> </p><p>この length 関数を用いて、実行中のジョブ一覧「body(‘HTTP’)?[‘value’]」の要素数をカウントします。</p><ul><li>カウントを条件ステートメントで判定する。</li><li>実行中のジョブが 1 以上である場合は終了アクションでジョブを終了する。</li><li>実行中のジョブがない場合は想定の処理に移行する。</li></ul><p>例として、上のような制御が可能となります。</p><p><img src="/blog/LogicApps/WorkflowRunsList/WorkflowRunsList-6.png"></p><p>以上となります。</p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>ほか、トリガーに設定可能なコンカレンシー制御と最大実行待機数に関する情報については、以下の記事がございます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/">トリガーのコンカレンシー制御と最大実行待機数について</a>  </li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、複数の Logic Apps を実行する際に、汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたしました。本記事が皆様のお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの山田です。&lt;/p&gt;
&lt;p&gt;複数の Logic Apps を実行する際に、「&lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/&quot;&gt;トリガーのコンカレンシー制御&lt;/a&gt;」がございますが、ここではもう少し汎用的に、既に実行中の Logic Apps の状況を確認して制御する方法についてご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps Standard と関連するストレージ アカウント</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-StorageAccount/</id>
    <published>2023-03-01T02:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.840Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの山田です。<br>今回は、Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントについて、基礎知識からご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>初めて Logic Apps Standard での開発をされる方</li><li>Azure リソースの管理者</li></ul><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割</li><li>Logic Apps Standard と関連するストレージ アカウント名</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Logic-Apps-Standard-を作成した際に一緒に作成されるストレージ-アカウントの役割"><a href="#Logic-Apps-Standard-を作成した際に一緒に作成されるストレージ-アカウントの役割" class="headerlink" title="Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割"></a>Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントの役割</h2><p>端的に、Logic Apps Standard を作成した際に一緒に作成されるコンテナやファイルは、Logic Apps Standard をご利用の際のワークフロー情報や、実行履歴情報が格納されているものとなります。「flow*」などという名称のテーブルをご覧いただけます。</p><p><img src="/blog/LogicApps/StandardLogicApps-StorageAccount/StandardLogicApps-StorageAccount-1.png"></p><h2 id="Logic-Apps-Standard-と関連するストレージ-アカウント名"><a href="#Logic-Apps-Standard-と関連するストレージ-アカウント名" class="headerlink" title="Logic Apps Standard と関連するストレージ アカウント名"></a>Logic Apps Standard と関連するストレージ アカウント名</h2><p>ストレージ アカウントと Logic Apps Standard の結びつきは以下から参照いただけます。</p><ol><li>Azure Portal から該当の Logic Apps Standard に移動します。</li><li>左部 [設定] から [構成] の、[アプリケーション設定] タブを選択します。 </li></ol><p><img src="/blog/LogicApps/StandardLogicApps-StorageAccount/StandardLogicApps-StorageAccount-2.png"></p><ul><li>AzureWebJobsStorage</li><li>WEBSITE_CONTENTAZUREFILECONNECTIONSTRING</li></ul><p>上 2 つがストレージ アカウント名に関わるパラメーターとなります。</p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Logic Apps Standard とストレージ アカウントに言及したドキュメントには、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/deploy-single-tenant-logic-apps-private-storage-account">シングルテナントの Standard ロジック アプリをプライベート エンドポイントを使用してプライベート ストレージ アカウントにデプロイする</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/estimate-storage-costs">シングルテナント Azure Logic Apps の Standard ロジック アプリ ワークフローのストレージ コストを見積もる</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps Standard タイプを作成するにあたって理解しておくと安心な、ストレージ アカウントとの関係にまつわる基礎知識についてご紹介しました。ほか関連記事は以下を参照くださいませ。引き続き皆様のお役に立てる情報を発信してまいります。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/">Logic Apps Standard のワークフロー実行ログを削除する</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Logic Apps Standard を作成した際に一緒に作成されるストレージ アカウントについて、基礎知識からご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Storage Account" scheme="https://jpazinteg.github.io/blog/tags/Storage-Account/"/>
    
  </entry>
  
  <entry>
    <title>トリガーのコンカレンシー制御と最大実行待機数について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/triggerConcurrency/</id>
    <published>2023-02-27T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.884Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>トリガーに設定可能なコンカレンシー制御と最大実行待機数について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>トリガーを順次実行とされたい方</li><li>トリガーの並列実行数を制御されたい方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>トリガーのコンカレンシー制御については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul></li><li><p>トリガーのコンカレンシーを変更する方法については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-trigger-concurrency">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # トリガーのコンカレンシーを変更する</a></li></ul></li><li><p>トリガーの最大実行待機数を設定する方法については、以下の公開情報がございます。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-waiting-runs-limit">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # 実行待機の制限を変更する</a></li></ul></li></ul><h2 id="トリガーのデフォルト設定"><a href="#トリガーのデフォルト設定" class="headerlink" title="トリガーのデフォルト設定"></a>トリガーのデフォルト設定</h2><p>従量課金タイプおよび Standard タイプの Logic Apps においては、デフォルトではコンカレンシー制御は「オフ」の状態であり、<br>トリガーが無制限に並列実行できる設定となっております。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency01.jpg"></p><h2 id="コンカレンシー制御の変更"><a href="#コンカレンシー制御の変更" class="headerlink" title="コンカレンシー制御の変更"></a>コンカレンシー制御の変更</h2><p>トリガーの設定にて、コンカレンシー制御を「オン」とし、並列実行する数を制御することが可能です。<br><strong>一度コンカレンシー制御を「オン」としますと、元に戻すことができかねますのでご注意ください。</strong></p><p>以下の例では「HTTP 要求の受信時」トリガーを利用しております。<br>右上の「…」を押下し、「設定」を選択します。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency02.jpg"></p><p>「コンカレンシー制御」にて「上限」を「オン」とします。<br>「並列処理の次数」にて並列して起動するトリガーの数を制御することが可能です。<br>以下の例では、順次実行とするために「並列処理の次数」を「1」としております。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency03.jpg"></p><p>以下の公開情報に記載がございますが、「並列処理の次数」には 1 ～ 100 をご設定いただけます。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency04.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><h2 id="最大実行待機数の設定"><a href="#最大実行待機数の設定" class="headerlink" title="最大実行待機数の設定"></a>最大実行待機数の設定</h2><p>トリガーのコンカレンシー制御にて「並列処理の次数」で設定した値の数だけ並列処理が既に行われていて、<br>さらに新しいリクエストがトリガーに送られた場合には、先の処理が終わるまで待機させることが可能です。<br>このときの待機させる数をご設定いただけます。<br>最小値と最大値につきましては、以下の公開情報に記載がございます。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - ロジック アプリ コード ビュー] と遷移します。<br>“triggers” &gt; トリガー名 &gt; “runtimeConfiguration” &gt; “concurrency” に、”maximumWaitingRuns” という項目を追加します。<br>値には、待機させる最大実行数 (今回の例では 2 ) を指定いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#change-waiting-runs-limit">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # 実行待機の制限を変更する</a></li></ul><p>上記の設定を行いますと、以下のような動作となります。<br>※ 以下の動作確認では、「並列処理の次数」を「1」最大実行待機数を「2」としており、従量課金タイプの Logic Apps にて手動でトリガーを起動しております。</p><p>まず一つ目の処理の実行を開始いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency07.jpg"></p><p>一つ目の処理が実行されている間に、新しくトリガーを起動しますと以下のように 2 件まで待機いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency08.jpg"></p><p>最大実行待機数を超えてトリガーを起動しようとしますと、以下のようにエラーが発生いたします。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency09.jpg"></p><p>トリガーを外部から呼び出す場合、呼び出し元には 429 (Too Many Requests) が返却され、呼び出しに失敗いたします。<br>この場合、Logic Apps 側の「トリガーの履歴」にも残りませんので、クライアント側にて時間を空けて再試行する等のご対応が必要となります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;WorkflowMaximumWaitingRunCountExceeded&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;The number of waiting workflow runs &#x27;2&#x27; has exceeded the maximum allowed limit of &#x27;2&#x27;. Try increasing the value of &#x27;maximumWaitingRuns&#x27; in trigger concurrency configuration.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、最大実行待機数を上記のように明示的に設定しない場合には、以下の公開情報の通り「10 回の実行 + 同時実行の数」となります。(最大は 100 でございます。)<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency05.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#concurrency-and-debatching">Azure Logic Apps の制約と構成の参考文献 # コンカレンシーと分割処理</a></li></ul><p>たとえば「並列処理の次数」が「1」の場合には、「10 回の実行 + 1」となり、11 件まで待機させることが可能です。<br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency10.jpg"><br><img src="/blog/LogicApps/triggerConcurrency/triggerConcurrency11.jpg"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、トリガーのコンカレンシー制御の設定方法、最大実行待機数についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;トリガーに設定可能なコンカレンシー制御と最大実行待機数について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps で各ファイルフォーマットを変換する Tips</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FileFormatConversion/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FileFormatConversion/</id>
    <published>2023-02-12T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.776Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Azure Logic Apps でファイルを操作する際、CSV から JSON、JSON から XML 等ファイルフォーマットを変換されたい場合があるかと思います。<br>今回は、Azure Logic Apps でいくつかのファイルフォーマットを変換する Tips をお届けします！</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>1． JSON → XML</li><li>2． XML → JSON</li><li>3． JSON → CSV</li><li>4． CSV → JSON</li><li>5． CSV → XML</li><li>6． XML → CSV</li><li>7． HTML → TXT</li><li>まとめ</li></ul><h2 id="1．JSON-→-XML"><a href="#1．JSON-→-XML" class="headerlink" title="1．JSON → XML"></a>1．JSON → XML</h2><p>JSON から XML へのフォーマット変換につきましては、以下の xml 関数をご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#xml">xml</a></li></ul><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image01.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(outputs(&#x27;Test_JSON&#x27;))</span><br></pre></td></tr></table></figure><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image02.png"></p><p>1 つ目の Tips については以上となります。</p><h2 id="2．XML-→-JSON"><a href="#2．XML-→-JSON" class="headerlink" title="2．XML → JSON"></a>2．XML → JSON</h2><p>XML から JSON へのフォーマット変換につきましては、以下の JSON 関数をご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#json">json</a></li></ul><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image03.png"></p><p>xml についてはサンプルとして以下のように設定しております。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(&#x27;&lt;?xml version=&quot;1.0&quot;?&gt; &lt;root&gt; &lt;person id=&quot;1&quot;&gt; &lt;name&gt;Sophia Owen&lt;/name&gt; &lt;occupation&gt;Engineer&lt;/occupation&gt; &lt;/person&gt; &lt;/root&gt;&#x27;)</span><br></pre></td></tr></table></figure><p>また、JSON 関数には以下の値を指定しております。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json(outputs(&#x27;Test_XML&#x27;))</span><br></pre></td></tr></table></figure><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image04.png"></p><p>2 つ目の Tips については以上となります。</p><h2 id="3．JSON-→-CSV"><a href="#3．JSON-→-CSV" class="headerlink" title="3．JSON → CSV"></a>3．JSON → CSV</h2><p>JSON から CSV へのフォーマット変換につきましては、CSV テーブルの作成アクションにて設定可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations#create-csv-table-action">Azure Logic Apps でデータの操作を実行する # CSV テーブルの作成アクション</a><br><img src="/blog/LogicApps/FileFormatConversion/image05.png"></li></ul><p>ただし、こちらのアクションにつきましては配列形式のインプットが必要となりますので、JSON プロパティを含む配列形式に設定いただく必要がございます。<br>例えば、以下図の例ですと、作成 2 アクション内で JSON オブジェクトを作成しておりますが、CSV テーブルの作成 アクションへ引き渡す値については array 関数にて配列形式に変換しております。</p><p>例<br><img src="/blog/LogicApps/FileFormatConversion/image06.png"><br>array(outputs(‘Test_JSON’))</p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image07.png"></p><p>3 つ目の Tips については以上となります。</p><h2 id="4．CSV-→-JSON"><a href="#4．CSV-→-JSON" class="headerlink" title="4．CSV → JSON"></a>4．CSV → JSON</h2><p>まず、CSV 形式を基にしたファイルフォーマットに関する関数やアクションはございません。その為、別途作り込みが必要になります。<br>参考までに、以下のように式関数とアクションを組み合わせて変換するサンプルフローをご案内いたします。<br>こちらはあくまでも参考情報ですので、商用環境でご利用になられる場合はお客様の責任のもと、お客様にて設計、試験等を実施頂き、お客様の判断にて採用要否の判断をお願い申し上げます。<br>※本テクニカルサポートとしましては本サンプルに関する構築支援は実施致しません。</p><p>例</p><ol><li><p>CSV フォーマットのデータを取得する。本例では BLOB 上の CSV を取得します。<br><img src="/blog/LogicApps/FileFormatConversion/image08.png"></p></li><li><p>“変数を初期化する” アクションで “アレイ” を選択します。<br><img src="/blog/LogicApps/FileFormatConversion/image09.png"></p></li><li><p>“変数を初期化する” アクションで “文字列” を選択し、動的コンテンツで “BLOB コンテンツを取得する (V2) ” のファイルコンテンツを指定します。<br><img src="/blog/LogicApps/FileFormatConversion/image10.png"></p></li><li><p>“選択” アクションを設定し、開始に以下の式関数を設定します。<br><img src="/blog/LogicApps/FileFormatConversion/image11.png"></p></li></ol><p>・skip(split(variables(‘csv’),base64ToString(‘Cg==’)),1)</p><ul><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#skip">skip</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#split">split</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#variables">variables</a></p></li><li><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#base64tostring">base64ToString</a></p></li></ul><p>※ base64ToString(‘Cg==’) は改行文字 「/n」と同じ値であるため<br>利用中の CSV の改行文字が「\r\n」の場合は base64ToString(‘DQo=’) に置き換える。</p><ol start="5"><li>上記図のマップの左側に CSV のカラム名を手動設定し、右側に以下のように式関数を設定します。(配列は0始まり)<br>・split(item(),’,’)[0]<br>・split(item(),’,’)[1]<br>・split(item(),’,’)[2]<br>・split(item(),’,’)[3]<br>・split(item(),’,’)[4]</li></ol><p>※ [] 内の数字についてはカラム位置を指定します。</p><p>以上の通り実施いただくことで、以下のような JSON 形式の結果を取得することが可能でございます。</p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image12.png"></p><p>なお、カラムの順番につきましてはマップに指定している文字列に依存しますのでご留意ください。<br>必要に応じてカラム名に数字を付与する等の対応が必要になります。</p><p>4 つ目の Tips については以上となります。</p><h2 id="5．CSV-→-XML"><a href="#5．CSV-→-XML" class="headerlink" title="5．CSV → XML"></a>5．CSV → XML</h2><p>CSV 形式から XML 形式への変換につきましては、上記で作成した JSON 形式の値に対して、以下の通り For each ステートメントおよび “配列変数に追加” アクションを設定し、＜2. “変数を初期化する” アクションで “アレイ” を選択。＞で作成した配列に対して値を設定することで変換可能でございます。<br>こちらも以下に設定例を記載いたします。</p><p>例</p><ol><li>For each ステートメントを手動で設定し、“配列変数に追加” アクションを追加後以下の値を設定します。<br><img src="/blog/LogicApps/FileFormatConversion/image13.png"></li></ol><p>＜For each アクション＞<br>・以前の手順から出力を選択： 動的コンテンツ -  選択 - 出力</p><p>＜配列変数に追加＞<br>・名前：array ( “4．CSV → JSON” の手順 2. “変数を初期化する” アクションで指定した名前)<br>・値：xml(setProperty(json(‘{}’),’sample’,items(‘For_each’)))</p><ol start="2"><li>“作成” アクション等、XML を出力したいアクションを利用し、以下の関数を設定します。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xml(concat(&#x27;&lt;test&gt;&#x27;,join(variables(&#x27;array&#x27;),&#x27;&#x27;),&#x27;&lt;/test&gt;&#x27;))</span><br></pre></td></tr></table></figure></li></ol><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image14.png"></p><p>以上のように、作り込みをいただくことで、CSV からのファイルフォーマットの変換が可能でございます。</p><p>5 つ目の Tips については以上となります。</p><h2 id="6．XML-→-CSV"><a href="#6．XML-→-CSV" class="headerlink" title="6．XML → CSV"></a>6．XML → CSV</h2><p>XML から CSV につきましては、先にご案内申し上げました、XML から JSON にフォーマット変換いただいた後で、JSON からCSV へのフォーマット変換を実施いただくことで設定可能でございます。</p><h2 id="7．HTML-→-TXT"><a href="#7．HTML-→-TXT" class="headerlink" title="7．HTML → TXT"></a>7．HTML → TXT</h2><p>最後に、HTML から TXT へのフォーマット変換につきましては、プレビュー機能ではございますが、以下の Content Conversion (プレビュー) コネクタをご利用いただくことで変換可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/connectors/conversionservice/">Content Conversion (プレビュー)</a></li></ul><p><img src="/blog/LogicApps/FileFormatConversion/image15.png"></p><p>こちらにつきましては、直接 HTML の内容を入力するのではなく、以下のようにコネクタから取得できるような HTML コンテンツを指定いただく必要がございます。<br>例<br><img src="/blog/LogicApps/FileFormatConversion/image16.png"></p><p>結果<br><img src="/blog/LogicApps/FileFormatConversion/image17.png"></p><p>直接 HTML の内容をテキスト入力すると以下のような結果となります。</p><p><img src="/blog/LogicApps/FileFormatConversion/image18.png"><br><img src="/blog/LogicApps/FileFormatConversion/image19.png"></p><p>こちらのコネクタにつきましては、2023年 2 月現在プレビュー機能となっておりますため、今後予告なく仕様の変更が発生する可能性がございますのでご留意下さい。</p><p>なお、よくあるお問い合わせとして YAML 形式の変換は出来ないのかとご質問をいただくのですが、誠に申し訳なくも YAML 形式については 2023 年 2 月現在で対応しておりませんのでご了承いただきたく存じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下のファイルフォーマット変換についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>1． JSON → XML</li><li>2． XML → JSON</li><li>3． CSV → JSON</li><li>4． CSV → XML</li><li>5． JSON → CSV</li><li>6． XML → CSV</li><li>7． HTML → TXT</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Azure Logic Apps でファイルを操作する際、CSV から JSON、JSON から XML 等ファイルフォーマットを変換されたい場合があるかと思います。&lt;br&gt;今回は、Azure Logic Apps でいくつかのファイルフォーマットを変換する Tips をお届けします！&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FailedToFetch/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FailedToFetch/</id>
    <published>2023-01-22T15:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.772Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示され、実行履歴が確認できずにお困りの方</li></ul><h2 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h2><ul><li><p>Standard Logic Apps についての公開情報は以下になります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare">Azure Logic Apps でのシングルテナント、マルチテナント、統合サービス環境の比較</a></li><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/designer-overview">シングルテナント Azure Logic Apps の Standard ロジック アプリ ワークフロー デザイナーについて</a></li></ul></li><li><p>プライベート エンドポイントの設定についての公開情報は以下になります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint">プライベート エンドポイントを使って Standard ロジック アプリと Azure 仮想ネットワーク間のトラフィックをセキュリティで保護する</a></li></ul></li><li><p>英語表記となりますが、当該事象につきましては以下のブログにも記載がございます。</p><ul><li>参考ドキュメント : <a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/common-errors-in-azure-logic-apps-standard-unexpected-error/ba-p/3293197">Common errors in Azure Logic Apps (Standard) - Unexpected error. Failed to fetch</a></li></ul></li></ul><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示されることがございます。</p><p>以下のようにエラーが表示され、実行履歴の詳細が確認できません。<br><img src="/blog/LogicApps/FailedToFetch/runHistory.jpg"></p><p>また、「トリガーの履歴」タブにて識別子を選択し、「入力のリンク」または「出力のリンク」を選択します。<br><img src="/blog/LogicApps/FailedToFetch/triggerHistory01.jpg"></p><p><img src="/blog/LogicApps/FailedToFetch/triggerHistory02.jpg"></p><p>以下のように「MsPortalFx.Errors.AjaxError」とエラー表示され、トリガーの履歴につきましても詳細が確認できません。<br><img src="/blog/LogicApps/FailedToFetch/triggerHistory03.jpg"></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>通常原因としては、以下 2 点が挙げられます。</p><ol><li>プライベート エンドポイントが有効化されている場合</li></ol><p>Standard Logic Apps の「受信トラフィック」にて「プライベート エンドポイント」が有効化されている場合、<br>実行履歴に「予期しないエラー. Failed to fetch」と表示されますのは、想定動作となります。</p><p>※ [ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」にて設定状況をご確認いただけます。<br><img src="/blog/LogicApps/FailedToFetch/networkSetting01.jpg"></p><p>プライベート エンドポイントを有効化したことにより、当該 Logic Apps に対しては、同一仮想ネットワークからのみのアクセスを許可している状態となります。<br>そのため、同一仮想ネットワーク外からのアクセスでは、「Failed to fetch」というエラーが表示され、実行履歴をご確認いただけません。<br>(実際のワークフローの「成功」、「失敗」に関わらず、こちらのエラーが表示されます。)</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-access-restrictions">Azure App Service のアクセス制限</a></li></ul><ol start="2"><li>アクセス制限の設定を行っている場合</li></ol><p>Standard Logic Apps の「受信トラフィック」にて「アクセス制限」を設定されている場合、「許可」に設定されているパブリック IP アドレス以外からのアクセスを拒否いたしますので、想定動作となります。<br>※ [ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「受信トラフィック」にて設定状況をご確認いただけます。<br><img src="/blog/LogicApps/FailedToFetch/networkSetting02.jpg"></p><h2 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h2><ol><li>プライベート エンドポイントが有効化されている場合</li></ol><p>Standard Logic Apps のプライベート エンドポイントが配置されている仮想ネットワークと、同一の仮想ネットワークに仮想マシンを作成します。<br>作成した仮想マシンにリモート デスクトップ接続を行い、Azure ポータルへアクセスしますと、実行履歴をご確認いただけます。</p><ol start="2"><li>アクセス制限の設定を行っている場合</li></ol><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 - ネットワーク] と遷移し、「アクセス制限」にて当該 Logic Apps へアクセスしている端末のパブリック IP アドレスを許可します。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Standard Logic Apps の実行履歴にて「Failed to fetch」というエラーが表示される原因と回避策について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps Standard のワークフロー実行ログを削除する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/FlowHistoryClearner/</id>
    <published>2023-01-20T01:00:00.000Z</published>
    <updated>2023-09-28T13:14:04.780Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。 Azure Integration サポート チームの山田です。<br>本記事では、Standard Logic Apps のワークフロー実行ログを削除する便利ツールについて、ご紹介いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>Standard 版の Logic Apps で利用いただけるツールです。</li><li>ログの保存期間に関しまして、正式なドキュメントは以下にございます。<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal#run-duration-and-history-retention-limits">制約と構成の参考ガイド#実行継続時間および履歴保有の制限 - Azure Logic Apps | Microsoft Learn</a></li></ul></li><li>制限増減の設定箇所に関しても案内がございます。<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=standard,azure-portal#change-run-duration-and-history-retention-in-storage">制約と構成の参考ガイド#実行継続時間とストレージでの履歴の保持期間を変更する - Azure Logic Apps | Microsoft Learn</a></li></ul></li></ul><h2 id="Standard-Logic-Apps-のワークフロー実行ログを削除する「Flow-History-Clearner」"><a href="#Standard-Logic-Apps-のワークフロー実行ログを削除する「Flow-History-Clearner」" class="headerlink" title="Standard Logic Apps のワークフロー実行ログを削除する「Flow History Clearner」"></a>Standard Logic Apps のワークフロー実行ログを削除する「Flow History Clearner」</h2><ul><li>前提条件を踏まえた「削除」手段としての「便利ツール」をご紹介いたします。</li><li>手動でも削除が可能なことがご確認いただけます。</li></ul><h3 id="Flow-History-Cleaner-について"><a href="#Flow-History-Cleaner-について" class="headerlink" title="Flow History Cleaner について"></a>Flow History Cleaner について</h3><p><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/logic-app-standard-flow-history-cleaner/ba-p/3582258">Logic App Standard Flow History Cleaner - Microsoft Community Hub</a></p><blockquote><p>Application that deletes the Tables and the Queues in the Logic app Standard storage account.<br>it will help you in the development process, especially if there are stuck flows in the running state </p><p>How to download the application<br>Open the Kudo <a href="https://docs.microsoft.com/en-us/azure/app-service/resources-kudu">https://docs.microsoft.com/en-us/azure/app-service/resources-kudu</a> from Logic app site</p></blockquote><blockquote><p>&lt;日本語訳&gt;</p><p>「フロー履歴クリーナー」<br>Logic Apps Standard のストレージアカウントにあるテーブルとキューを削除するアプリケーションです。<br>実行中のフローを停止させている場合において、開発工程に役立ちます。</p><p>アプリケーションのダウンロード方法<br>Logic Apps のサイトから Kudu を開きます。</p></blockquote><h3 id="Kudu-から-Flow-History-Cleaner-を利用する"><a href="#Kudu-から-Flow-History-Cleaner-を利用する" class="headerlink" title="Kudu から Flow History Cleaner を利用する"></a>Kudu から Flow History Cleaner を利用する</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/app-service/resources-kudu">Kudu サービスの概要 - Azure App Service | Microsoft Learn</a></p><p>Kudu は、以下のようにアクセスいたします。<br><code>https://&lt;Logic Apps Standard名&gt;.scm.azurewebsites.net</code></p><p>Kudu 上部から [Debug console] - [CMD] に遷移いたします。</p><p><img src="https://techcommunity.microsoft.com/t5/image/serverpage/image-id/390797iA3695041CA6B8D9A/image-dimensions/2500?v=v2&px=-1"></p><p>下部 CLI 上にて、以下コマンドを用います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mbarqawi/FlowHistoryCleaner.git</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cd FlowHistoryCleaner</span><br><span class="line">dotnet publish</span><br><span class="line">Cd FlowHistoryCleaner\bin\Debug\netcoreapp3.1\publish</span><br><span class="line">FlowHistoryCleaner.exe</span><br></pre></td></tr></table></figure><p>上のコマンドにて clone した FlowHistoryCleaner フォルダ内で、<code>dotnet publish</code> を行いますと、<code>FlowHistoryCleaner.exe</code> が利用いただけるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\home\FlowHistoryCleaner\FlowHistoryCleaner\bin\Debug\netcoreapp3.1\publish&gt;FlowHistoryCleaner.exe</span><br><span class="line">will use the connection string DefaultEndpointsProtocol=https;AccountName=playgroundeastjapan9aea;AccountKey=uwx+LUhDpdjeqVf5riH0MMUwaDF4a1eJIx+0Yc2CRnZ49O09abVvpYobK3iWf4I/65CQumhq7GrD+ASt2DJaSg==;EndpointSuffix=core.windows.net </span><br><span class="line">Are you sure you want to clean all  Tables and Queues ? [y/n] : y</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/FlowHistoryClearner/kudu.png"></p><p>当方の手元では、例として、以下のようなワークフロー履歴につきまして確認しております。</p><p><img src="/blog/LogicApps/FlowHistoryClearner/history1.png"></p><p>実行後、以下のようにクリアされることをご覧いただけます。</p><p><img src="/blog/LogicApps/FlowHistoryClearner/history2.png"></p><p>あくまで「便利ツール」としてのご案内ではございますが、当記事がお力になれれば幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では Logic Apps Standard でワークフロー実行ログを削除する方法について説明いたしました。本記事がお客様のシステム保守の一助になりますと幸いです。</p><h2 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h2><ul><li><a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/logic-app-standard-flow-history-cleaner/ba-p/3582258">Logic App Standard Flow History Cleaner - Microsoft Community Hub</a></li><li><a href="https://github.com/mbarqawi/FlowHistoryCleaner">mbarqawi/FlowHistoryCleaner</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。 Azure Integration サポート チームの山田です。&lt;br&gt;本記事では、Standard Logic Apps のワークフロー実行ログを削除する便利ツールについて、ご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard" scheme="https://jpazinteg.github.io/blog/tags/Standard/"/>
    
  </entry>
  
</feed>
