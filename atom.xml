<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Japan Azure Integration Support Blog</title>
  
  <subtitle>日本マイクロソフトの Azure Integration に関するサポート情報のブログです。</subtitle>
  <link href="https://jpazinteg.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://jpazinteg.github.io/blog/"/>
  <updated>2025-06-16T07:56:14.233Z</updated>
  <id>https://jpazinteg.github.io/blog/</id>
  
  <author>
    <name>Japan Azure Integration Support Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Azure Logic Apps Standard のマネージド ID 資格情報で HTTP アクションにより明示的にアクセストークンの値を取得する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/</id>
    <published>2025-06-02T07:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.233Z</updated>
    
    <content type="html"><![CDATA[<p>Azure Integration サポート チームの長坂です。</p><p>Azure Logic Apps では多くのコネクタをサポートしており、様々な Azure サービスへの認証と接続を行うことが可能です。</p><p>ただし、Azure Logic Apps の標準の機能として提供されるコネクタを使えないサービスやユース―ケースにおいては、認証と接続をワークフローの中で明示的に行うほかない場合があります。<br><br>例えば、Azure Logic Apps Standard を使用して仮想ネットワーク統合の機能を有効化し、Logic Apps から他の Azure サービスへの接続をプライベートなネットワーク経路で行う、といったユースケースでコネクタがその状況に対応していないということが起こり得ます。<br><br>コネクタが使えない状況で特定のサービスに対して REST API の要求を行うときは、多くの場合代替手段として HTTP アクションを使用することが考えられます。</p><p>HTTP アクションの Authentication 機能でマネージド ID を選択することにより、Logic Apps の マネージド ID を使って取得したアクセストークンを <a href="https://datatracker.ietf.org/doc/html/rfc6750#section-2.1">RFC 6750</a> で定められた形式のヘッダーとして追加することが可能です。</p><p>RFC 6750 に沿って Authorization ヘッダーを Bearer <code>token value</code> のような形式で定めている Azure サービスの REST API 要求であれば、HTTP アクションの機能でマネージド ID を選択することで有効なリクエスト形式の要求を送信することが可能です。<br><br>しかし、Azure サービスのデータプレーンへの要求では一部 Authorization ヘッダーが前述のものとは異なる形式となっている場合があり、そのようなサービスへの要求では HTTP アクションの Authentication 機能でマネージド ID を選択したとしても、Authorization ヘッダーの形式が合っていないために要求が失敗します。</p><p>こういった状況に遭遇した場合の対処としては、アクセストークンも HTTP アクションによって取得した上で、アクセストークンの値を要求先のサービスが定めるヘッダー形式に合うように加工して後続の HTTP アクションで REST API の要求を行うという手法が有効です。</p><p>以下、Azure Logic Apps Standard プランを使用する前提でこれを実現する方法についてご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li><a href="#header1">Logic Apps Standard (App Service) でマネージド ID の資格情報を使用してアクセストークンを取得する方法</a></li><li><a href="#header2">アクセストークンを要求するエンドポイントとヘッダー</a></li><li><a href="#header3">エンドポイントとヘッダーを取得する</a></li><li><a href="#header4">レスポンスの値をワークフローの動的コンテンツとして取り扱う</a></li><li><a href="#header5">HTTP アクションによるアクセストークンの要求</a></li><li><a href="#header7">まとめ</a></li></ol><h2 id="header1">1. Logic Apps Standard (App Service) でマネージド ID の資格情報を使用してアクセストークンを取得する方法</h2><p>Azure Logic Apps Standard (シングルテナント) は、ホスト環境を独自に指定する場合を除いて基本的には App Service プラン上で動作します。<br><br>App Service は環境変数として、ローカルのトークン要求エンドポイントを持っており、この URL に対して GET リクエストを送信することでアクセストークンを取得することができます。</p><p>トークン要求のリクエストについては以下を参照してください。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-managed-identity?tabs=portal,http#rest-endpoint-reference">マネージド ID - Azure App Service | Microsoft Learn</a></p><p>Azure Logic Apps Standard は App Service プラン上で動作するため、この仕組みを利用してアクセストークを取得することが可能です。</p><h2 id="header2">2. アクセストークンを要求するエンドポイントとヘッダー</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/app-service/overview-managed-identity?tabs=portal,http#rest-endpoint-reference">マネージド ID - Azure App Service | Microsoft Learn</a> に記載の通り、以下の環境変数にそれぞれエンドポイント URL とヘッダーの値が設定されております。</p><blockquote><ul><li><code>IDENTITY_ENDPOINT</code> - ローカル トークン サービスに対する URL。</li><li><code>IDENTITY_HEADER</code> - サーバー側のリクエスト フォージェリ (SSRF) 攻撃を回避するために使用するヘッダー。 値は、プラットフォームによってローテーションされます。</li></ul></blockquote><h2 id="header3">3. エンドポイントとヘッダーを取得する</h2><p>環境変数の値を取得する方法は別の記事でご紹介しております。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/#header3">Azure Logic Apps Standard がホストされた App Service の OS 情報を取得してワークフロー内で使用する方法 | Japan Azure Integration Support Blog</a></p><p>一例として、<code>Execute Powershell Code</code> アクションで環境変数を取得するコードを記載します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$envVariables</span> =  [<span class="type">PSCustomObject</span>]<span class="selector-tag">@</span>&#123;</span><br><span class="line">    IDENTITY_ENDPOINT = <span class="variable">$Env:IDENTITY_ENDPOINT</span></span><br><span class="line">    IDENTITY_HEADER = <span class="variable">$Env:IDENTITY_HEADER</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Push-WorkflowOutput</span> <span class="literal">-Output</span> <span class="variable">$envVariables</span></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/StandardLogicApps-GetAccessTokenWithMid-1.png"></p><p>値はアクションの出力で JSON として返されます。</p><p><img src="/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/StandardLogicApps-GetAccessTokenWithMid-2.png"></p><p>後述する<code>Parse JSON</code>アクションなどで、JSON に含まれる値を動的コンテンツとして扱えるようにすると、後続のアクションでの値の指定が便利になります。</p><h2 id="header4">4. レスポンスの値をワークフローの動的コンテンツとして取り扱う</h2><p><code>Parse JSON</code>等のデータ操作向けのアクションを使用します。<br>使用例は以下のドキュメントをご参照ください。Parse JSON 以外にもデータ形式や特定のデータ型に適したアクションが提供されております。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption#parse-json-action">データの操作の実行 - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#parse-json-action">JSON の解析アクション</a></li></ul><p>例えば、<a href="#header3">3. エンドポイントとヘッダーを取得する</a> の出力 JSON のスキーマが以下の通りであるため、これを Parse JSON の Schema とすれば、前のアクションから受け取った Schema に一致する出力の JSON の各値を動的コンテンツとして扱えるようになります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;body&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;IDENTITY_ENDPOINT&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;IDENTITY_HEADER&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/StandardLogicApps-GetAccessTokenWithMid-3.png"></p><h2 id="header5">5. HTTP アクションによるアクセストークンの要求</h2><p><code>IDENTITY_ENDPOINT</code> の URL に対して、<code>X-IDENTITY-HEADER</code>ヘッダーに<code>IDENTITY_HEADER</code>の値を入れて GET リクエストを送信することで、レスポンスでアクセストークンを取得できます。</p><p>HTTP リクエストの送信には、HTTP アクションを使用します。</p><p>参考</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-http?tabs=standard#add-an-http-action">外部エンドポイントまたはその他のワークフローを呼び出すワークフローを作成する - Azure Logic Apps | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#http-action">HTTP アクション</a></li></ul><p>例えば、HTTP アクションの設定でトークン要求エンドポイントや<code>X-IDENTITY-HEADER</code> を以下のように入力すると、GET リクエストを送信します。</p><p><img src="/blog/LogicApps/StandardLogicApps-GetAccessTokenWithMid/StandardLogicApps-GetAccessTokenWithMid-4.png"></p><p>レスポンスは JSON のため、 <a href="#header4">4. レスポンスの値をワークフローの動的コンテンツとして取り扱う</a> と同様の方法でアクセストークンの値も動的コンテンツとして扱えるようにすることで、後続のアクションでトークンを使用したリクエストを送信する HTTP アクションにおける値の指定が便利になります。</p><p>取得したアクセストークンを適宜加工することで、認可を伴う他のサービスへの要求において任意のヘッダー形式でリクエストを送信することができます。</p><h2 id="header7">6. まとめ</h2><p>本記事では、Azure Logic Apps Standard のマネージド ID 資格情報で HTTP アクションにより明示的にアクセストークンの値を取得する方法をご紹介しました。</p><p>今回ご紹介した内容は Microsoft ID プラットフォームにおけるトークン (JWT) の仕組みを基礎としております。<br>承認サーバーである Microsoft Entra へアクセストークンを要求する仕組みについては以下の Microsoft ID プラットフォームの公開情報に記載されておりますので、ご参照いただくことでより理解が深まるかと存じます。</p><p><a href="https://learn.microsoft.com/ja-jp/entra/identity-platform/security-tokens">トークンと要求の概要 - Microsoft identity platform | Microsoft Learn</a></p><p>Logic Apps では様々なサービスとの接続用にコネクタが提供されているため、基本的にはコネクタで認証と接続が可能かを先に確認いただくことを推奨いたします。<br>Logic Apps で提供されているいずれのコネクタも要件やユースケースに合わず、独自のヘッダー形式でアクセストークンを指定して他のサービスに要求を送信する必要があるような場合に、今回ご紹介した方法が役に立つかと存じます。</p><p>皆様の開発のご参考になれば幸いです。</p><hr><p>本記事の情報は、2025 年 6 月 2 日時点の内容となります。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Azure Integration サポート チームの長坂です。&lt;/p&gt;
&lt;p&gt;Azure Logic Apps では多くのコネクタをサポートしており、様々な Azure サービスへの認証と接続を行うことが可能です。&lt;/p&gt;
&lt;p&gt;ただし、Azure Logic Apps の標準の機能として提供されるコネクタを使えないサービスやユース―ケースにおいては、認証と接続をワークフローの中で明示的に行うほかない場合があります。&lt;br&gt;&lt;br&gt;例えば、Azure Logic Apps Standard を使用して仮想ネットワーク統合の機能を有効化し、Logic Apps から他の Azure サービスへの接続をプライベートなネットワーク経路で行う、といったユースケースでコネクタがその状況に対応していないということが起こり得ます。&lt;br&gt;&lt;br&gt;コネクタが使えない状況で特定のサービスに対して REST API の要求を行うときは、多くの場合代替手段として HTTP アクションを使用することが考えられます。&lt;/p&gt;
&lt;p&gt;HTTP アクションの Authentication 機能でマネージド ID を選択することにより、Logic Apps の マネージド ID を使って取得したアクセストークンを &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6750#section-2.1&quot;&gt;RFC 6750&lt;/a&gt; で定められた形式のヘッダーとして追加することが可能です。&lt;/p&gt;
&lt;p&gt;RFC 6750 に沿って Authorization ヘッダーを Bearer &lt;code&gt;token value&lt;/code&gt; のような形式で定めている Azure サービスの REST API 要求であれば、HTTP アクションの機能でマネージド ID を選択することで有効なリクエスト形式の要求を送信することが可能です。&lt;br&gt;&lt;br&gt;しかし、Azure サービスのデータプレーンへの要求では一部 Authorization ヘッダーが前述のものとは異なる形式となっている場合があり、そのようなサービスへの要求では HTTP アクションの Authentication 機能でマネージド ID を選択したとしても、Authorization ヘッダーの形式が合っていないために要求が失敗します。&lt;/p&gt;
&lt;p&gt;こういった状況に遭遇した場合の対処としては、アクセストークンも HTTP アクションによって取得した上で、アクセストークンの値を要求先のサービスが定めるヘッダー形式に合うように加工して後続の HTTP アクションで REST API の要求を行うという手法が有効です。&lt;/p&gt;
&lt;p&gt;以下、Azure Logic Apps Standard プランを使用する前提でこれを実現する方法についてご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Azure Monitor のアクション グループから [セキュリティで保護された Webhook] アクションでロジック アプリを呼び出す方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-SecuredWebhook/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-SecuredWebhook/</id>
    <published>2025-05-12T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.205Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの 飯野 です。<br></p><p>Azure Monitor のアクション グループは、Azure Monitor のデータをもとにインフラストラクチャやアプリケーションに問題が発生したことを検知した際に、アラートをトリガーするための機能です。<br>アラートがトリガーされたときに実行されるアクションのうち、ロジック アプリを呼び出すことができるアクションとして [ロジック アプリ] と [セキュリティ保護された Webhook] の 2 種類がございます。<br><br>この記事では Azure Monitor のアクション グループからロジック アプリを呼び出す際に [セキュリティで保護された Webhook] アクションを利用するシナリオと、その際に必要となる手順をご紹介します。<br></p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><p>アクション グループからの呼び出しの受信トリガー</p></li><li><p>セキュリティで保護された Webhook の設定方法</p><ol><li>保護された Web API 用の Microsoft Entra アプリケーションを作成</li><li>ロジック アプリ側で [Azure Active Directory 承認ポリシー] を設定</li><li>ロジック アプリのエンドポイント URL を取得</li><li>アクション グループを設定</li><li>アクション グループが Microsoft Entra アプリケーションを使用できるようにするための PowerShell スクリプトを実行</li></ol></li></ul><h2 id="アクション-グループからの呼び出しの受信トリガー"><a href="#アクション-グループからの呼び出しの受信トリガー" class="headerlink" title="アクション グループからの呼び出しの受信トリガー"></a>アクション グループからの呼び出しの受信トリガー</h2><p>アクション グループから従量課金タイプのロジック アプリを呼び出す際、通常は認証方法を意識することなく、アクション グループの [アクション タイプ] に [ロジック アプリ] を選択いただいてから、呼び出し先のロジック アプリを指定されてアクション グループからロジック アプリを呼び出すことが多いかと思います。<br><br></p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image-02.png"></p><p>この場合、内部的にはロジック アプリの [When a HTTP request is received] トリガーに設定されているエンドポイント URL に対するリクエストが送信されています。<br>エンドポイント URL 文字列にはアクセス キーを利用した SAS (共有アクセス署名) 認証情報が含まれており、 [ロジック アプリ] を選択した場合のロジック アプリの呼び出しは SAS 認証によって行われることとなります。<br>従量課金ワークフローの [When a HTTP request is received] トリガーのエンドポイント URL の呼び出しに利用できる認可方式は、以下セクションの記載のとおり、Microsoft Entra ID を使用した OAuth 2.0 または Shared Access Signature (SAS) のいずれか 1 つのみとなります。<br></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal#considerations-before-you-enable-oauth-20-with-microsoft-entra-id">ワークフロー内のアクセスとデータをセキュリティで保護する - Azure Logic Apps | Microsoft Learn ＃ Microsoft Entra ID を使用した OAuth 2.0 を有効にする前の考慮事項</a><br></p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image-01.png"></p><p>このため、アクション グループからロジック アプリを呼び出す際の認証方法として SAS 認証を回避したい場合、アクション タイプに OAuth 認証による呼び出しを行う [セキュリティで保護された Webhook] を選択することとなります。<br><br>[セキュリティで保護された Webhook] アクションを利用する場合、OAuth 認証の利用のためには事前設定が必要となります。<br>その設定手順の詳細をご説明いたします。</p><h2 id="セキュリティで保護された-Webhook-の設定方法"><a href="#セキュリティで保護された-Webhook-の設定方法" class="headerlink" title="セキュリティで保護された Webhook の設定方法"></a>セキュリティで保護された Webhook の設定方法</h2><p>アクション グループで [セキュリティで保護された Webhook] をを選択して呼び出すためには、Webhook 配信をセキュリティで保護するための Microsoft Entra Webhook アプリケーション ロールのメンバーにサービス プリンシパルを作成し、ロジック アプリ側では OAuth 認証を認証方法として設定しておく必要がございます。<br><br>設定手順につきましては以下の公開情報もございますので、併せてご確認ください。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#configure-authentication-for-secure-webhook">Azure Monitor のアクション グループ - Azure Monitor | Microsoft Learn # セキュリティで保護された Webhook の認証を構成する</a></p><p>おおまかな手順は以下となります。</p><ol><li>保護された Web API 用の Microsoft Entra アプリケーションを作成</li><li>ロジック アプリ側で [Azure Active Directory 承認ポリシー] を設定</li><li>ロジック アプリのエンドポイント URL を取得</li><li>アクション グループを設定</li><li>アクション グループが Microsoft Entra アプリケーションを使用できるようにするための PowerShell スクリプトを実行</li></ol><p>以降から詳細をご説明します。</p><h3 id="1-保護された-Web-API-用の-Microsoft-Entra-アプリケーションを作成"><a href="#1-保護された-Web-API-用の-Microsoft-Entra-アプリケーションを作成" class="headerlink" title="1. 保護された Web API 用の Microsoft Entra アプリケーションを作成"></a>1. 保護された Web API 用の Microsoft Entra アプリケーションを作成</h3><p>[Microsoft Entra ID] - [管理 - アプリの登録] と遷移し、 [+ 新規登録] を選択します。<br>　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　<br><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image001.png"></p><p>アプリケーションを作成しましたら、以下のように [概要] を開き、[アプリケーション ID の URI の追加] を選択します。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image002.png"></p><p>以下の画面の [追加] を選択し、表示されます [アプリケーション ID の URI] をコピーして控えておき、そのまま保存します。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image003.png"></p><p>ディレクトリ(テナント) ID とアクセス トークンの形式についても確認しておきます。<br>ディレクトリ(テナント) ID :<br>登録したアプリの [概要] ページにてコピーのうえ、テキスト エディタなどに貼り付けて控えておきます。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image004.png"></p><p>アクセス トークンの形式 :<br>アプリ登録のマニフェストの AccessTokenAcceptedVersion の値の確認し、アクセス トークンの形式を判断します。<br>1 または null の場合：アクセス トークンの形式は v1<br>2 の場合：アクセス トークンの形式は v2 となります。<br></p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image005.png"></p><p>以下の技術情報もご参考いただけます。<br><br><a href="https://learn.microsoft.com/ja-jp/entra/identity-platform/access-tokens#token-formats">Microsoft ID プラットフォームのアクセス トークン - Microsoft identity platform | Microsoft Learn ＃ トークンの形式</a><br></p><p>このセクションで確認した [アプリケーション ID の URI]、[ディレクトリ(テナント) ID]、[アクセス トークンの形式] は、後述のロジック アプリ側における [Azure Active Directory 承認ポリシー] の設定時に使用します。</p><h3 id="2-ロジック-アプリ側で-Azure-Active-Directory-承認ポリシー-を設定"><a href="#2-ロジック-アプリ側で-Azure-Active-Directory-承認ポリシー-を設定" class="headerlink" title="2. ロジック アプリ側で [Azure Active Directory 承認ポリシー] を設定"></a>2. ロジック アプリ側で [Azure Active Directory 承認ポリシー] を設定</h3><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [設定 – 認可] と遷移し、 [ポリシーの追加] を選択し、以下の値を設定します。<br><br>[ポリシー名] : 任意<br>[ポリシー タイプ] : AAD<br>[クレーム] : 以下のクレーム名と設定内容の組み合わせを指定します。[標準要求の追加] で、クレーム名とクレームの値の行を追加することができます。<br>　[issuer] :<br>　　アクセス トークンの形式が v1 の場合は <a href="https://sts.windows.net/%7B%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88ID%7D/">https://sts.windows.net/{テナントID}/</a><br>　　アクセス トークンの形式が v2 の場合は <a href="https://login.microsoftonline.com/%7B%E3%83%86%E3%83%8A%E3%83%B3%E3%83%88ID%7D/v2.0">https://login.microsoftonline.com/{テナントID}/v2.0</a><br>　[audience] : api://XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX の形式の文字列<br></p><p>アクセス トークンの形式が v1 の場合の [issuer] に指定する文字列の末尾が / で終了することにご注意ください。<br>[audience] には 手順 1. で控えたアプリケーション ID の URI を指定します。<br>上記を設定して [保存] します。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image006.png"></p><p>アプリ登録時にマニフェストにて確認したトークンの形式によって issuer (発行者) の設定値が異なることについて、以下の公開技術情報の記載がご参考いただけます。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal#disable-sas">ワークフロー内のアクセスとデータをセキュリティで保護する - Azure Logic Apps | Microsoft Learn # Microsoft Entra ID を使用した OAuth 2.0 を有効にする前の考慮事項</a><br></p><p>— 抜粋 —<br>承認ポリシーには少なくとも発行者のクレームが含まれている必要があります。<br>その Microsoft Entra ID の発行者の値は、<a href="https://sts.windows.net/">https://sts.windows.net/</a> または <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> (OAuth V2) のいずれかで始まります。<br>— 抜粋 —<br></p><p>ロジック アプリにおける AAD ポリシーの有効化手順については、以下の公開技術情報がご参考いただけます。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal#enable-azure-ad-oauth-for-your-logic-app">Azure AD OAuth を有効にする前の考慮事項 # ロジック アプリに対して OAuth Azure AD を有効にする</a><br></p><h3 id="3-ロジック-アプリのエンドポイント-URL-を取得"><a href="#3-ロジック-アプリのエンドポイント-URL-を取得" class="headerlink" title="3. ロジック アプリのエンドポイント URL を取得"></a>3. ロジック アプリのエンドポイント URL を取得</h3><p>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール] - [ロジック アプリ デザイナー] と遷移し、 [HTTP 要求の受信時] トリガーを開き、URL を取得します。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image007.png"></p><p>取得した URL をメモ帳等に貼り付けます。<br>SAS 認証のために使用されるパラメーター値は AAD 認証の場合には不要となるため、削除します。<br>具体的には以下のように SAS 認証情報を含む URL 文字列から水色箇所を削除し、黄色箇所のみとなるようにします。<br></p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image008.png"></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal#disable-shared-access-signature-sas-authentication-consumption-only">ワークフロー内のアクセスとデータをセキュリティで保護する - Azure Logic Apps | Microsoft Learn<br>＃ Shared Access Signature (SAS) 認証を無効にする (従量課金のみ)</a></p><p>このセクションで解説したロジック アプリのエンドポイント URL の取得手順は、以下技術情報もご参考いただけます。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-securing-a-logic-app?tabs=azure-portal#enable-oauth-with-microsoft-entra-id-for-your-consumption-logic-app-resource">ワークフロー内のアクセスとデータをセキュリティで保護する - Azure Logic Apps | Microsoft Learn ＃ 従量課金ロジック アプリ リソースに Microsoft Entra ID を使用した OAuth を有効にする</a></p><h3 id="4-アクション-グループを設定"><a href="#4-アクション-グループを設定" class="headerlink" title="4. アクション グループを設定"></a>4. アクション グループを設定</h3><p>Azure Monitor 側のアクション グループを開き、以下のように [アクション] - [アクション タイプ] - [セキュリティで保護された Webhook] を選択します。[セキュリティで保護された Webhook] 画面にて前述の手順で確認した内容を以下のように指定します。<br><br>[オブジェクト ID] : 手順 1. で登録したアプリケーションを指定します。<br><br>　(アプリの登録直後でまだドロップダウン リストの候補に表示されない場合、登録が反映されるまで時間を置いてから再度お試しください。)<br><br>[URI] : 手順 3. で SAS 認証の情報を削除した URL を指定します。<br></p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image009.png"></p><p>なお、アクション グループで [セキュリティで保護された Webhook] アクションを作成または変更できるようにするには、<br>Microsoft Entra アプリケーションの所有者ロールをサービス プリンシパルに割り当てる必要があります。</p><p><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image010.png"></p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#configure-authentication-for-secure-webhook">Azure Monitor のアクション グループ - Azure Monitor | Microsoft Learn</a></p><p>以下は上記技術情報からの抜粋となります。<br><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image011.png"><br></p><h3 id="5-アクション-グループが-Microsoft-Entra-アプリケーションを使用できるようにするための-PowerShell-スクリプトを実行"><a href="#5-アクション-グループが-Microsoft-Entra-アプリケーションを使用できるようにするための-PowerShell-スクリプトを実行" class="headerlink" title="5. アクション グループが Microsoft Entra アプリケーションを使用できるようにするための PowerShell スクリプトを実行"></a>5. アクション グループが Microsoft Entra アプリケーションを使用できるようにするための PowerShell スクリプトを実行</h3><p>以下の技術情報のセクションの手順に従い、スクリプトを実行します。<br><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#secure-webhook-powershell-script">Azure Monitor のアクション グループ - Azure Monitor | Microsoft Learn ＃ Secure Webhook PowerShell スクリプト</a></p><p>前提条件として以下技術情報の Microsoft Graph PowerShell SDK を作業端末にインストールしておく必要がございます。<br><a href="https://learn.microsoft.com/ja-jp/powershell/microsoftgraph/installation?view=graph-powershell-1.0&preserve-view=true">Install the Microsoft Graph PowerShell SDK | Microsoft Learn</a></p><p>スクリプトの実行方法は以下となります。<br><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/alerts/action-groups#how-to-run">Azure Monitor のアクション グループ - Azure Monitor | Microsoft Learn ＃実行手順</a></p><ol><li>以下のスクリプトをコピーして作業端末上でテキスト エディタに貼り付け、tenantId と、アプリ登録の ObjectID を置き換えます。<br>tenantId と アプリ登録の ObjectID の文字列は 登録したアプリの [概要] ページにて [ディレクトリ(テナント) ID] と [オブジェクト ID] にてご確認いただけます。</li><li>*.ps1 ファイルとして任意の名称でファイルを保存します。</li><li>作業端末上で PowerShell コマンドを開き、*.ps1 スクリプトを実行します。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">Write-Host &quot;=================================================================================================&quot;</span><br><span class="line">$scopes = &quot;Application.ReadWrite.All&quot;</span><br><span class="line">$myTenantId = &quot;&lt;&lt;Customer&#x27;s tenant id&gt;&gt;&quot;</span><br><span class="line">$myMicrosoftEntraAppRegistrationObjectId = &quot;&lt;&lt;Customer&#x27;s object id from the app registration&gt;&gt;&quot;</span><br><span class="line">$actionGroupRoleName = &quot;ActionGroupsSecureWebhook&quot;</span><br><span class="line">$azureMonitorActionGroupsAppId = &quot;461e8683-5575-4561-ac7f-899cc907d62a&quot; # Required. Do not change.</span><br><span class="line"> </span><br><span class="line">Connect-MgGraph -Scopes $scopes -TenantId $myTenantId</span><br><span class="line"> </span><br><span class="line">Function CreateAppRole([string] $Name, [string] $Description)</span><br><span class="line">&#123;</span><br><span class="line">    $appRole = @&#123;</span><br><span class="line">        AllowedMemberTypes = @(&quot;Application&quot;)</span><br><span class="line">        DisplayName = $Name</span><br><span class="line">        Id = New-Guid</span><br><span class="line">        IsEnabled = $true</span><br><span class="line">        Description = $Description</span><br><span class="line">        Value = $Name</span><br><span class="line">    &#125;</span><br><span class="line">    return $appRole</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$myApp = Get-MgApplication -ApplicationId $myMicrosoftEntraAppRegistrationObjectId</span><br><span class="line">$myAppRoles = $myApp.AppRoles</span><br><span class="line">$myActionGroupServicePrincipal = Get-MgServicePrincipal -Filter &quot;appId eq &#x27;$azureMonitorActionGroupsAppId&#x27;&quot;</span><br><span class="line"> </span><br><span class="line">Write-Host &quot;App Roles before addition of new role..&quot;</span><br><span class="line">foreach ($role in $myAppRoles) &#123; Write-Host $role.Value &#125;</span><br><span class="line"> </span><br><span class="line">if ($myAppRoles.Value -contains $actionGroupRoleName)</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;The Action Group role is already defined. No need to redefine.`n&quot;</span><br><span class="line">    # Retrieve the application again to get the updated roles</span><br><span class="line">    $myApp = Get-MgApplication -ApplicationId $myMicrosoftEntraAppRegistrationObjectId</span><br><span class="line">    $myAppRoles = $myApp.AppRoles</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;The Action Group role is not defined. Defining the role and adding it.&quot;</span><br><span class="line">    $newRole = CreateAppRole -Name $actionGroupRoleName -Description &quot;This is a role for Action Group to join&quot;</span><br><span class="line">    $myAppRoles += $newRole</span><br><span class="line">    Update-MgApplication -ApplicationId $myApp.Id -AppRole $myAppRoles</span><br><span class="line"> </span><br><span class="line">    # Retrieve the application again to get the updated roles</span><br><span class="line">    $myApp = Get-MgApplication -ApplicationId $myMicrosoftEntraAppRegistrationObjectId</span><br><span class="line">    $myAppRoles = $myApp.AppRoles</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$myServicePrincipal = Get-MgServicePrincipal -Filter &quot;appId eq &#x27;$($myApp.AppId)&#x27;&quot;</span><br><span class="line"> </span><br><span class="line">if ($myActionGroupServicePrincipal.DisplayName -contains &quot;AzNS AAD Webhook&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;The Service principal is already defined.`n&quot;</span><br><span class="line">    Write-Host &quot;The action group Service Principal is: &quot; + $myActionGroupServicePrincipal.DisplayName + &quot; and the id is: &quot; + $myActionGroupServicePrincipal.Id</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    Write-Host &quot;The Service principal has NOT been defined/created in the tenant.`n&quot;</span><br><span class="line">    $myActionGroupServicePrincipal = New-MgServicePrincipal -AppId $azureMonitorActionGroupsAppId</span><br><span class="line">    Write-Host &quot;The Service Principal is been created successfully, and the id is: &quot; + $myActionGroupServicePrincipal.Id</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"># Check if the role assignment already exists</span><br><span class="line">$existingRoleAssignment = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $myActionGroupServicePrincipal.Id | Where-Object &#123; $_.AppRoleId -eq $myApp.AppRoles[0].Id -and $_.PrincipalId -eq $myActionGroupServicePrincipal.Id -and $_.ResourceId -eq $myServicePrincipal.Id &#125;</span><br><span class="line"> </span><br><span class="line"># If the role assignment does not exist, create it</span><br><span class="line">if ($null -eq $existingRoleAssignment) &#123;</span><br><span class="line">    Write-Host &quot;Doing app role assignment to the new action group Service Principal`n&quot;</span><br><span class="line">    New-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $myActionGroupServicePrincipal.Id -AppRoleId $myApp.AppRoles[0].Id -PrincipalId $myActionGroupServicePrincipal.Id -ResourceId $myServicePrincipal.Id</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    Write-Host &quot;Skip assigning because the role already existed.&quot;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Write-Host &quot;myServicePrincipalId: &quot; $myServicePrincipal.Id</span><br><span class="line">Write-Host &quot;My Azure AD Application (ObjectId): &quot; $myApp.Id</span><br><span class="line">Write-Host &quot;My Azure AD Application&#x27;s Roles&quot;</span><br><span class="line">foreach ($role in $myAppRoles) &#123; Write-Host $role.Value &#125;</span><br><span class="line"> </span><br><span class="line">Write-Host &quot;=================================================================================================&quot;</span><br></pre></td></tr></table></figure><p>このスクリプトの実行は Microsoft Entra アプリケーション管理者ロールが割り当てられているユーザーが行う必要があります。<br><img src="/blog/LogicApps/LogicApps-SecuredWebhook/image012.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>アクション グループからの呼び出しの受信トリガー</li><li>セキュリティで保護された Webhook の設定方法<br>おおまかな手順として以下をご案内いたしました。</li></ul><ol><li>保護された Web API 用の Microsoft Entra アプリケーションを作成</li><li>ロジック アプリ側で [Azure Active Directory 承認ポリシー] を設定</li><li>ロジック アプリのエンドポイント URL を取得</li><li>アクション グループを設定</li><li>アクション グループが Microsoft Entra アプリケーションを使用できるようにするための PowerShell スクリプトを実行</li></ol><p>ご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの 飯野 です。&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Azure Monitor のアクション グループは、Azure Monitor のデータをもとにインフラストラクチャやアプリケーションに問題が発生したことを検知した際に、アラートをトリガーするための機能です。&lt;br&gt;アラートがトリガーされたときに実行されるアクションのうち、ロジック アプリを呼び出すことができるアクションとして [ロジック アプリ] と [セキュリティ保護された Webhook] の 2 種類がございます。&lt;br&gt;&lt;br&gt;この記事では Azure Monitor のアクション グループからロジック アプリを呼び出す際に [セキュリティで保護された Webhook] アクションを利用するシナリオと、その際に必要となる手順をご紹介します。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="認証" scheme="https://jpazinteg.github.io/blog/tags/%E8%AA%8D%E8%A8%BC/"/>
    
  </entry>
  
  <entry>
    <title>従量課金タイプの Logic Apps 用のカスタム ロールを作成する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-CustomRole/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-CustomRole/</id>
    <published>2025-02-26T03:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.195Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。  Azure Integration サポート チームの継松です。<br>今回は、 従量課金タイプの Logic Apps に対してのカスタム ロールの作成方法についてご紹介いたします！</p><p>本記事では、既に作成済みのリソースに対して保守するための編集・読み取り権限を付与しつつ、削除は出来ないようなロールを作成します。<br>ご要件に沿って、必要な権限を付与・除外することが可能ですのでご参考いただけますと幸いでございます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Azure カスタム ロールについて</li><li>カスタム ロールを作成する</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Azure-カスタム-ロールについて"><a href="#Azure-カスタム-ロールについて" class="headerlink" title="Azure カスタム ロールについて"></a>Azure カスタム ロールについて</h2><p>Azure のロール定義とは、アクセス許可のコレクションです。<br>このロールをユーザー、グループなどに割り当て、 Azure リソースへのアクセスを与えることが可能です。</p><p>既定で各リソース操作の許可をまとめた「組み込みロール」がご用意されております。<br>「組み込みロール」ではお客様のご要件を満たさない場合には独自の Azure カスタム ロールを作成することが可能です。</p><p>カスタム ロールを作成する場合には、これら既存の組み込みロールを複製して、要件に沿って特定の権限 (アクション) を追加・削除する形が簡単です。</p><p>参考ドキュメント:<br><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/overview">Azure ロールベースのアクセス制御 (Azure RBAC) とは</a><br><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles">Azure 組み込みロール</a><br><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/custom-roles-portal">Azure portal を使用して Azure カスタム ロールを作成または更新する</a></p><div class="alert is-info"><p class="alert-title">Note</p><p>必要となる権限 (アクション) の組み合わせについてはお客様のご要件に併せてご検討いただきますようお願いいたします。</p><p>Azure サポート窓口にて、カスタム ロールの作成の代行は難しい事、あらかじめご了承ください。</p></div><h2 id="カスタム-ロールを作成する"><a href="#カスタム-ロールを作成する" class="headerlink" title="カスタム ロールを作成する"></a>カスタム ロールを作成する</h2><p>まず、従量課金タイプの Logic Apps にて有用な組み込みロールとしましては以下がございます。<br>・ Logic App Contributor (ロジック アプリの共同作成者): ロジック アプリを管理できますが、アクセス権を変更することはできません。<br>・ Logic App Operator (ロジック アプリのオペレーター): ロジック アプリの読み取り、有効化、無効化ができますが、編集または更新はできません。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles/integration">統合のための Azure 組み込みロール</a></p><p>本記事では前述の通り、既に作成済みのリソースに対して保守するための編集・読み取り権限を付与しつつ、削除は出来ないようなロールを作成しますので、今回の場合、 Logic App Contributor (ロジック アプリの共同作成者) を複製したうえで、調整する形が簡単かと考えます。</p><p>以下にて手順をまとめましたのでご参考ください。</p><ol><li><p>Azure Portal にて権限を付与されたいロジック アプリを開き、 [アクセス制御 (IAM)] を開きます。</p></li><li><p>[役割] にて今回複製されたいロール (ロジック アプリの共同作成者) を検索し、行の末尾にある省略記号 ( … ) を押下し、 [複製] を押下します。</p></li></ol><p><img src="/blog/LogicApps/LogicApps-CustomRole/image000.png"> </p><ol start="3"><li>[基本] にて任意のカスタム ロール名の入力など、以下の通り構成します。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image001.png"> </li></ol><p>4.[アクセス許可] にて、[+ 権限を除外する] を押下します。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image002.png"> </p><ol start="5"><li>除外されたい権限を入力、選択、追加します。<br>今回の場合は削除の権限を除外したいため “Microsoft.Logic/workflows/delete” を検索します。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image003.png"> </li></ol><p>なお、従量課金タイプの Logic Apps に関しての権限 (アクション) については下記資料にまとめられております。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/permissions/integration#microsoftlogic">統合に対する Azure のアクセス許可 - Microsoft.Logic</a></p><ol start="6"><li>[確認と作成] まで進み、カスタム ロールを作成します。<br>NotAction: Microsoft.Logic/workflows/delete が記載されていることを確認します。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image004.png"> </li></ol><p>※ 作成後、 [アクセス制御 (IAM)] にて反映されるまで数分かかる場合がございます。<br>少々時間をおいた後、 [+ 追加] &gt;&gt; [ロールの割り当ての追加] から作成したカスタム ロールの付与をお試しください。</p><p>作成完了後は、下図のように表示されます。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image005.png"> </p><p>結果:<br>上記手順にて作成したカスタム ロールを割り当てたユーザーが削除を試みると、下図のようなエラーが発生します。<br><img src="/blog/LogicApps/LogicApps-CustomRole/image006.png"> </p><h2 id="関連ドキュメントまとめ"><a href="#関連ドキュメントまとめ" class="headerlink" title="関連ドキュメントまとめ"></a>関連ドキュメントまとめ</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/custom-roles-portal">Azure portal を使用して Azure カスタム ロールを作成または更新する</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/built-in-roles/integration">統合のための Azure 組み込みロール</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/role-based-access-control/permissions/integration#microsoftlogic">統合に対する Azure のアクセス許可 - Microsoft.Logic</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では従量課金タイプの Logic Apps にてお使いいただけるカスタム ロールの作成方法についてご紹介いたしました。</p><p>最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。  Azure Integration サポート チームの継松です。&lt;br&gt;今回は、 従量課金タイプの Logic Apps に対してのカスタム ロールの作成方法についてご紹介いたします！&lt;/p&gt;
&lt;p&gt;本記事では、既に作成済みのリソースに対して保守するための編集・読み取り権限を付与しつつ、削除は出来ないようなロールを作成します。&lt;br&gt;ご要件に沿って、必要な権限を付与・除外することが可能ですのでご参考いただけますと幸いでございます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ、Host Integration Server(HIS)、BizTalk Server などの調査時にサポート エンジニアへ連携するログの取得方法について</title>
    <link href="https://jpazinteg.github.io/blog/general/TroubleLogCollection/"/>
    <id>https://jpazinteg.github.io/blog/general/TroubleLogCollection/</id>
    <published>2025-02-26T02:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.330Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。  </p><p>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。<br>お客様環境のオンプレミス製品にて何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。</p><p>今回は Azure Integration サポート チーム にて MSMQ、Host Integration Server(HIS)、BizTalk Server などの調査時に取得いただきたいログの内容と、その取得方法についてご案内申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>イベント ログ</li><li>MSMQ 関連ログ</li><li>その他</li><li>まとめ</li></ul><h2 id="イベント-ログ"><a href="#イベント-ログ" class="headerlink" title="イベント ログ"></a>イベント ログ</h2><p>イベント ログはイベント ビューアーより採取いただけます。</p><ol><li>Windows Server 上にてイベント ビューアーを起動します（コマンド: eventvwr）</li><li>[Windows Logs (Windows ログ)] を展開します</li><li>以下をそれぞれ右クリックし、[Save All Events As (すべてのイベントを名前をつけて保存)] を選択します  </li></ol><ul><li>Application (アプリケーション)</li><li>System (システム)</li><li>Security (セキュリティ)</li></ul><ol start="4"><li>任意の名前を入力し保存します。[Save as type (ファイルの種類)] は .evtx を選択します。</li></ol><p>ここまでの手順により、イベント ログの内容がエクスポートされたイベント ファイルが作成されます。</p><p><img src="/blog/general/TroubleLogCollection/TroubleLogCollection-1.png"></p><p><img src="/blog/general/TroubleLogCollection/TroubleLogCollection-3.png"></p><p>なお、イベント ファイルを、イベントが記録された環境と異なる環境で開いた際には、イベント ビューアーでの表示に差異が生じる場合がございます。このため、続けて以下を実施いただけますと幸いです。</p><p>再度手順 3 以降について、今回は [Save as type (ファイルの種類)] にて、テキスト (タブ区切り) (.txt)、または CSV (コンマ区切り) (.csv) を選択します。</p><p>手順 4 で作成されるファイルの内容は、あくまでもイベント ログから一部項目を抜粋した内容となります。<br>しかしながら、前述したような表示の差異が生じず、イベントが記録された環境での表示情報を確認するのに役立つファイルとなります。</p><p>以上の手順で作成した、以下 2 点のファイルをご提供いただけますと幸いです。</p><ul><li>イベント ファイル</li><li>テキスト ファイル、または CSV ファイル</li></ul><p>他チームの記事にもイベント ログに関する参考情報がございます。</p><p>参考: <a href="https://jpwinsup.github.io/blog/2023/09/25/UserInterfaceAndApps/EventLog/How-to-check-Event-log/">イベント ログの確認方法 | Microsoft Japan Windows Technology Support Blog</a></p><p>参考: <a href="https://jpdsi.github.io/blog/web-apps/LogCollection1/#1-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88-%E3%83%AD%E3%82%B0">IIS の調査に必要な基本的なログ情報について # イベント ログ</a></p><p><a href="https://learn.microsoft.com/ja-jp/host-integration-server/core/how-to-save-event-logs1">イベント ログを保存する方法1 - Host Integration Server | Microsoft Learn</a></p><h2 id="MSMQ-関連ログ"><a href="#MSMQ-関連ログ" class="headerlink" title="MSMQ 関連ログ"></a>MSMQ 関連ログ</h2><p>MSMQ の調査に有用な End2End ログの採取手順は以下記事をご覧いただけます。</p><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/">MSMQ で End2End ログを取得する手順 | Japan Azure Integration Support Blog</a></p><p>その他 MSMQ 関連の情報を取得するコマンドを依頼する場合がございます。以下はメッセージ キューの情報を取得する PowerShell コマンドとなります。</p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/msmq/get-msmqqueue?view=windowsserver2025-ps">Get-MsmqQueue (MSMQ) | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/msmq/get-msmqoutgoingqueue?view=windowsserver2025-ps">Get-MSMQOutgoingQueue (MSMQ) | Microsoft Learn</a></p><p><img src="/blog/general/TroubleLogCollection/TroubleLogCollection-2.png"></p><p>ほか、<a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/#MSMQ-%E3%82%92%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A7%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">MSMQ の HTTP サポート</a> をご利用の場合に、IIS 関連のログ取得をお願いする場合がございます。</p><p>参考: <a href="https://jpdsi.github.io/blog/web-apps/LogCollection1/">IIS の調査に必要な基本的なログ情報について | Japan Developer Support Internet Team Blog</a> </p><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>必要に応じて、各種コマンドの実行結果や、ネットワーク キャプチャを取得いただく場合がございます。その際のコマンドのご利用方法などについて、以下にリンクをおまとめいたしております。</p><h3 id="Systeminfo-Get-ComputerInfo-など"><a href="#Systeminfo-Get-ComputerInfo-など" class="headerlink" title="Systeminfo / Get-ComputerInfo など"></a>Systeminfo / Get-ComputerInfo など</h3><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/systeminfo">systeminfo | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/microsoft.powershell.management/get-computerinfo">Get-ComputerInfo (Microsoft.PowerShell.Management) - PowerShell | Microsoft Learn</a></p><h3 id="nslookup-Resolve-DnsName-など"><a href="#nslookup-Resolve-DnsName-など" class="headerlink" title="nslookup / Resolve-DnsName など"></a>nslookup / Resolve-DnsName など</h3><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/nslookup">nslookup | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/dnsclient/resolve-dnsname">Resolve-DnsName (DnsClient) | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/troubleshoot/windows-client/networking/troubleshoot-dns-client-resolution-issues">DNS クライアントの名前解決に関する問題のトラブルシューティング - Windows Client | Microsoft Learn</a></p><h3 id="ping-tracert-Test-NetConnection-など"><a href="#ping-tracert-Test-NetConnection-など" class="headerlink" title="ping / tracert / Test-NetConnection など"></a>ping / tracert / Test-NetConnection など</h3><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/ping">ping | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/tracert">tracert | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/nettcpip/test-netconnection">Test-NetConnection (NetTCPIP) | Microsoft Learn</a></p><h3 id="netstat-Get-NetTCPConnection-など"><a href="#netstat-Get-NetTCPConnection-など" class="headerlink" title="netstat / Get-NetTCPConnection など"></a>netstat / Get-NetTCPConnection など</h3><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/netstat">netstat | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/nettcpip/get-nettcpconnection">Get-NetTCPConnection (NetTCPIP) | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/troubleshoot/windows-client/networking/tcp-ip-port-exhaustion-troubleshooting">TCP/IP ポート不足のトラブルシューティング - Windows Client | Microsoft Learn</a></p><h3 id="ipconfig-Get-NetIPConfiguration-など"><a href="#ipconfig-Get-NetIPConfiguration-など" class="headerlink" title="ipconfig / Get-NetIPConfiguration など"></a>ipconfig / Get-NetIPConfiguration など</h3><p><a href="https://learn.microsoft.com/ja-jp/windows-server/administration/windows-commands/ipconfig">ipconfig | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/powershell/module/nettcpip/get-netipconfiguration">Get-NetIPConfiguration (NetTCPIP) | Microsoft Learn</a></p><h3 id="パケット-キャプチャーなど"><a href="#パケット-キャプチャーなど" class="headerlink" title="パケット キャプチャーなど"></a>パケット キャプチャーなど</h3><p>ネットワークの問題が疑われる場合に、Wireshark 等に代表されるネットワーク診断ツールからのログ取得をお願いする場合がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/developer/java/sdk/troubleshooting-network?tabs=windows">ネットワークに関する問題のトラブルシューティング</a></p><p><a href="https://techcommunity.microsoft.com/blog/iis-support-blog/capture-a-network-trace--wireshark/4245529">How to Capture Simultaneous Wireshark Traces from Client and Server for Network Troubleshooting</a></p><p>取得いただきましたログは一連、弊社サポート エンジニアより連携させていただきますファイル アップロード サイトにアップロード頂ければ幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上本記事では、オンプレミス製品の調査時にサポートよりお願い差し上げるログについてご案内いたしました。調査をご依頼の際はこちらの内容を基に本テクニカル サポートへお問合せいただければ幸いです。</p><ul><li>イベント ログ</li><li>MSMQ 関連ログ</li><li>その他</li></ul><p>最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。  &lt;/p&gt;
&lt;p&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。&lt;br&gt;お客様環境のオンプレミス製品にて何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。&lt;/p&gt;
&lt;p&gt;今回は Azure Integration サポート チーム にて MSMQ、Host Integration Server(HIS)、BizTalk Server などの調査時に取得いただきたいログの内容と、その取得方法についてご案内申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
    <category term="Trouble" scheme="https://jpazinteg.github.io/blog/tags/Trouble/"/>
    
    <category term="Log" scheme="https://jpazinteg.github.io/blog/tags/Log/"/>
    
    <category term="HIS" scheme="https://jpazinteg.github.io/blog/tags/HIS/"/>
    
    <category term="BizTalk" scheme="https://jpazinteg.github.io/blog/tags/BizTalk/"/>
    
  </entry>
  
  <entry>
    <title>Azure Logic Apps Standard がホストされた App Service の OS 情報を取得してワークフロー内で使用する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/</id>
    <published>2025-02-14T07:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.234Z</updated>
    
    <content type="html"><![CDATA[<p>Azure Integration サポート チームの長坂です。<br><br>Azure Logic Apps Standard は内部で Azure App Services をホスティングリソースとして活用しており、今回はその仕組みを応用したテクニックをご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ol><li><a href="#header1">Azure Logic Apps Standard のホスト環境</a></li><li><a href="#header2">Kudu</a></li><li><a href="#header3">アクションで OS 情報を取得する一例</a></li><li><a href="#header4">まとめ</a></li></ol><h2 id="header1">1. Azure Logic Apps Standard のホスト環境</h2><p>Azure Logic Apps Standard (シングルテナント) は、ホスト環境を独自に指定する場合を除いて基本的には App Service プラン上で動作します。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare">ロジック アプリ ワークフローの種類と環境</a> で各ホスティングプランとリソース構成を確認することができます。</p><p>Logic Apps のホストである App Service に対して後述する Kudu や CLI を使用することで OS 情報を取得することができます。</p><h2 id="header2">2. Kudu</h2><p>Azure App Service では GUI から CMD や PowerShell のコマンド実行画面を表示することができる <code>Kudu</code> というサービスが提供されております。<br><br>App Service でホストされた Logic Apps Standard でも、Kudu を使用して自身が動作する OS 上でコマンドを実行することができます。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/resources-kudu">Kudu サービスの概要 - Azure App Service | Microsoft Learn</a></p><p>2025 年 2 月時点では以下の画面から Kudu を開くことができます。<br></p><ul><li>Azure Portal &gt; Logic Apps リソース &gt; Development tools -<br>Advanced Tools &gt; <code>Go→</code> のリンク<br><img src="/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/StandardLogicApps-GetEnvironmentVariables-1.png"></li></ul><p>画面上部の <code>Debug console</code> から CMD と PowerShell を選択できます。<br>一例として PowerShell で環境変数の値を取得する様子を以下に記載します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$Env:WEBSITE_SITE_NAME</span></span><br></pre></td></tr></table></figure><p>上記を実行すると、Logic Apps のリソース名が表示されます。<br><img src="/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/StandardLogicApps-GetEnvironmentVariables-2.png"></p><p>App Service の OS ではその他に様々な環境変数が存在しており、状況に応じて必要な値が設定された環境変数を取得してワークフロー内のアクションで活用することができます。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/reference-app-settings?tabs=kudu,dotnet">環境変数とアプリ設定のリファレンス - Azure App Service | Microsoft Learn</a></p><p>このように、OS 情報を取得することが可能です。</p><h2 id="header3">3. アクションで OS 情報を取得する一例</h2><p>PowerShell で環境変数を取得できるということは、同様にワークフロー内の <code>Execute Powershell Code</code> アクションでも取得が可能ということです。<br><br><code>Execute Powershell Code</code> アクションの使い方や制限事項等の説明は以下のドキュメントに記載されております。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/add-run-powershell-scripts">Standard ワークフローで PowerShell を追加して実行する - Azure Logic Apps | Microsoft Learn</a></p><p>ワークフローに出力を返し、後続のアクションで取得した環境変数の値を使用するには上記にも記載の通り、<code>Push-WorkflowOutput</code> を使います。</p><blockquote><p>ワークフローに出力を返すには、<a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/add-run-powershell-scripts#push-workflowoutput">Push-WorkflowOutput コマンドレット</a>を使う必要があります。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$envVariables</span> =  [<span class="type">PSCustomObject</span>]<span class="selector-tag">@</span>&#123;</span><br><span class="line">    WEBSITE_SITE_NAME = <span class="variable">$Env:WEBSITE_SITE_NAME</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Push-WorkflowOutput</span> <span class="literal">-Output</span> <span class="variable">$envVariables</span></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/StandardLogicApps-GetEnvironmentVariables-3.png"></p><p>アクションが成功すると、このように JSON で出力が返されます。<br><img src="/blog/LogicApps/StandardLogicApps-GetEnvironmentVariables/StandardLogicApps-GetEnvironmentVariables-4.png"></p><p>ワークフローに返した出力は <code>Parse JSON</code> アクション等を使用することで、動的コンテンツで取り扱える形式の値とすることが可能になり、より柔軟性が向上します。<br><br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption#parse-json-action">JSON の解析アクション</a></p><h2 id="header4">4. まとめ</h2><p>本記事では、Azure Logic Apps Standard がホストされた App Service の OS 環境変数を取得してワークフロー内で使用する方法をご紹介しました。</p><p>同様の手法で環境変数以外の OS 情報を取得して使用することが可能であるため、ホスト環境である App Service に対する理解を深めた上でご紹介した方法を活用することで、より幅広い応用が可能になるかと存じます。</p><p>ただし、この方法はあくまで Azure Logic Apps Standard 内部の仕組みを応用したものであり、Azure Logic Apps の標準の機能として提供されるものではありません。<br><br>したがって、すべての OS の情報が同じ方法で取得できるとは限らず、将来に渡って同じ手段が使い続けられる保証はありません。<br><br>あくまで試行ベースで得られた結果を活用する方法であるということをご認識の上参考にしていただきますようお願いいたします。</p><p>皆様の開発のご参考になれば幸いです。</p><hr><p>2025 年 2 月 17 日時点の内容となります。<br>本記事の内容は予告なく変更される場合がありますので予めご了承ください。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;Azure Integration サポート チームの長坂です。&lt;br&gt;&lt;br&gt;Azure Logic Apps Standard は内部で Azure App Services をホスティングリソースとして活用しており、今回はその仕組みを応用したテクニックをご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Standard 版 Azure Logic Apps の料金体系を理解するポイント</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-StandardPricing/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-StandardPricing/</id>
    <published>2025-01-20T07:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.212Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は Standard 版 について記載しております。以前、以下記事をご案内いたしました。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/">従量課金版 Azure Logic Apps の料金体系を理解するポイント | Japan Azure Integration Support Blog</a></p><p>今回の記事では続編として、Standard 版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Standard 版 Azure Logic Apps の料金体系を理解するポイント<ul><li>Logic Apps の価格表 (2025 年 1 月の例) </li><li>vCPU および メモリ について … (1) </li><li>アクション と コネクタ について … (2)、(3) </li><li>データ保持 について … (4) </li><li>Azure Logic Apps の使用量の計測、課金、価格のしくみ</li><li>料金計算ツール について</li></ul></li><li>まとめ</li></ul><h2 id="Standard-版-Azure-Logic-Apps-の料金体系を理解するポイント"><a href="#Standard-版-Azure-Logic-Apps-の料金体系を理解するポイント" class="headerlink" title="Standard 版 Azure Logic Apps の料金体系を理解するポイント"></a>Standard 版 Azure Logic Apps の料金体系を理解するポイント</h2><h3 id="Logic-Apps-の価格表-2025-年-1-月の例"><a href="#Logic-Apps-の価格表-2025-年-1-月の例" class="headerlink" title="Logic Apps の価格表 (2025 年 1 月の例)"></a>Logic Apps の価格表 (2025 年 1 月の例)</h3><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a></p><p>以下例では 2025 年 1 月の料金に基づいて記載しております。主要なところを (1)～(4) に分けてお考えいただけます。</p><ol><li>vCPU および メモリ</li><li>Standard コネクタ = ¥0.020483 × 通話 (呼び出し) 回数</li><li>エンタープライズ コネクタ = ¥0.157556 × 通話 (呼び出し) 回数</li><li>データ保持 = ¥18.91 GB/月</li></ol><p>通話 とはチャンクなどにより 1 つのアクションで複数回呼び出し (Call、通信) される場合があるための単位とお考えください。</p><p>価格表:<br><img src="/blog/LogicApps/LogicApps-StandardPricing/LogicApps-StandardPricing-1.png"></p><h3 id="vCPU-および-メモリ-について-…-1"><a href="#vCPU-および-メモリ-について-…-1" class="headerlink" title="vCPU および メモリ について … (1)"></a>vCPU および メモリ について … (1)</h3><p>価格表の (1) の通り、Standard Logic Apps の利用料金では、割り当てられた VM インスタンスのリソース (vCPU、および メモリ) の利用時間によっても課金が発生いたします。こちらはアプリケーションを停止しても待機インスタンスとして最低 1 インスタンスの課金が発生しますことをご留意ください。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing#standard-single-tenant">標準 (シングルテナント)</a></p><blockquote><p>次の表は、シングルテナント Azure Logic Apps のロジック アプリとワークフローで次のコンポーネントを使用した場合に、標準モデルでそれらに対して測定と課金がどのように処理されるかをまとめたものです。</p></blockquote><p><img src="/blog/LogicApps/LogicApps-StandardPricing/LogicApps-StandardPricing-2.png"></p><p>また 1 か月のコストのシミュレーションが以下のページに公開されております。2025 年 1 月時点の記載より引用しておりますこと念のためご留意ください。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing#pricing-tiers-in-the-standard-model">標準モデルの価格レベル</a></p><blockquote><p>ロジック アプリ (Standard) の測定と課金のために選択する価格レベルには、仮想 CPU (vCPU) とメモリ リソースの特定の量のコンピューティングが含まれます。 </p></blockquote><p><img src="/blog/LogicApps/LogicApps-StandardPricing/LogicApps-StandardPricing-3.png"></p><h3 id="アクション-と-コネクタ-について-…-2-、-3"><a href="#アクション-と-コネクタ-について-…-2-、-3" class="headerlink" title="アクション と コネクタ について … (2)、(3)"></a>アクション と コネクタ について … (2)、(3)</h3><p>価格表の (2)、(3) について以下となります。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing#standard-operations">標準モデルでのトリガーとアクションの操作</a></p><blockquote><p>ワークフローを実行できる無制限の無料の組み込み操作を除き、標準モデルでは、ワークフロー全体が正常に実行、完了、またはインスタンス化されるかどうかに関係なく、”呼び出しごと” に操作が測定されて課金されます。</p></blockquote><p>前提として Logic Apps のコネクタには、組み込みコネクタとマネージド コネクタがあります。Standard 版 Logic Apps におけるマネージド コネクタをコネクタ価格レベルで分類すると「Standard コネクタ」、「エンタープライズ コネクタ」となります。<br>このコネクタの種類が Standard コネクタ (価格表の (2)) であるか、エンタープライズ コネクタ (価格表の (3)) であるかにつきましては、コネクタの公開情報から確認いただけます。詳細は以下 従量課金版 におけるコネクタと同様になりますため、以下記事がご参考になりましたら幸いです。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/#%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3-%E3%81%A8-%E3%82%B3%E3%83%8D%E3%82%AF%E3%82%BF-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6">従量課金版 Azure Logic Apps の料金体系を理解するポイント | Japan Azure Integration Support Blog # アクション と コネクタ について</a></p><h3 id="データ保持-について-…-4"><a href="#データ保持-について-…-4" class="headerlink" title="データ保持 について … (4)"></a>データ保持 について … (4)</h3><p>価格表の (4) について、Standard Logic Apps ではストレージ アカウントを使用します。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing#storage-operations">ストレージ操作</a></p><p>データ保持 について以下とお考えいただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/plan-manage-costs#storage-operations-and-costs">Azure Logic Apps のコストの管理を計画する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps では、すべてのストレージ操作に Azure Storage を使用します。</p></blockquote><blockquote><p>シングルテナントの Azure Logic Apps では、独自の Azure ストレージ アカウントを使用できます。 この機能により、Azure Logic Apps データの制御と柔軟性が向上します。 “ステートフル” ワークフローで操作を実行すると、Azure Logic Apps ランタイムによってストレージ トランザクションが作成されます。 たとえば、キューはスケジュール設定に使用され、テーブルと BLOB はワークフローの状態の格納に使用されます。 ストレージのコストは、ワークフローのコンテンツに基づいて変化します。 トリガー、アクション、ペイロードが異なると、ストレージ操作とニーズも異なります。 ストレージ トランザクションは、Azure Storage の価格モデルに従います。 ストレージ コストは、Azure の請求書に個別に一覧表示されます。</p></blockquote><blockquote><p>シングルテナントの Azure Logic Apps では、Logic Apps ストレージ計算ツールを使用して、ワークフローで実行される可能性があるストレージ操作の数とそのコストをいくらか把握できます。 サンプル ワークフローを選択するか、既存のワークフロー定義を使用することができます。 最初の計算では、ワークフロー内のストレージ操作の数を推定します。 その後、これらの数値を使用して、Azure 料金計算ツールを使用して考えられるコストを見積もることができます。 詳細については、シングルテナントの Azure Logic Apps でのワークフローのストレージ ニーズとコストの推定に関する記事を参照してください。</p></blockquote><p>詳細はドキュメントをご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/estimate-storage-costs">シングルテナント Azure Logic Apps のストレージ コストを見積もる - Azure Logic Apps | Microsoft Learn</a></p><p>以上 (1)～(4) が、Standard 版 Azure Logic Apps の料金体系の主要なところとなります。</p><h3 id="Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ"><a href="#Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ" class="headerlink" title="Azure Logic Apps の使用量の計測、課金、価格のしくみ"></a>Azure Logic Apps の使用量の計測、課金、価格のしくみ</h3><p>Azure Logic Apps および関連リソースにおける、測定、課金、および各価格モデルのしくみについて、以下ドキュメントにて網羅的にご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing">使用量の測定、課金、価格 - Azure Logic Apps | Microsoft Learn</a></p><p>詳細は以下 従量課金版 におけるしくみと同様になります。以下記事にてご参考になりましたら幸いです。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/#Azure-Logic-Apps-%E3%81%AE%E4%BD%BF%E7%94%A8%E9%87%8F%E3%81%AE%E8%A8%88%E6%B8%AC%E3%80%81%E8%AA%B2%E9%87%91%E3%80%81%E4%BE%A1%E6%A0%BC%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF">従量課金版 Azure Logic Apps の料金体系を理解するポイント | Japan Azure Integration Support Blog # Azure Logic Apps の使用量の計測、課金、価格のしくみ</a></p><h3 id="料金計算ツール-について"><a href="#料金計算ツール-について" class="headerlink" title="料金計算ツール について"></a>料金計算ツール について</h3><p>ほか Standard Logic Apps に関しても 料金計算ツール にて概算を確認いただけます。ワークフローから計画を「標準」と選択ください。またストレージ コストは <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/estimate-storage-costs#estimate-storage-costs">シングルテナント Azure Logic Apps のストレージ コストを見積もる - Azure Logic Apps | Microsoft Learn # ストレージ コストを見積もる</a> を参考ください。</p><p><a href="https://azure.microsoft.com/ja-jp/pricing/calculator/?service=logic-apps">料金計算ツール | Microsoft Azure</a></p><p>例:<br><img src="/blog/LogicApps/LogicApps-StandardPricing/LogicApps-StandardPricing-4.png"></p><p>最後になりますが、ツールに基づくお見積りは概算となり、具体的なリソースのご利用状況によって増減する可能性もございます。Logic Apps の調査をご依頼の際は以下記事もご参考に、本テクニカル サポートへお問合せいただければ大変うれしく思います。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/">Logic Apps の調査時にサポート エンジニアへ連携するログの取得方法について | Japan Azure Integration Support Blog</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a> のドキュメントを基に、Standard 版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介しました。<a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/">従量課金版 Azure Logic Apps の料金体系を理解するポイント | Japan Azure Integration Support Blog</a> と合わせまして Logic Apps のご利用検討時、皆様のご参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は Standard 版 について記載しております。以前、以下記事をご案内いたしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/&quot;&gt;従量課金版 Azure Logic Apps の料金体系を理解するポイント | Japan Azure Integration Support Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回の記事では続編として、Standard 版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>サービス プロバイダー接続について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/serviceProviderConnection/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/serviceProviderConnection/</id>
    <published>2025-01-13T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.286Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps の [サービス プロバイダー接続] について説明いたします。</p><span id="more"></span><h2 id="Logic-Apps-における-接続"><a href="#Logic-Apps-における-接続" class="headerlink" title="Logic Apps における [接続]"></a>Logic Apps における [接続]</h2><p>Logic Apps における [接続] やコネクタの種類等につきましては、関連記事にてご確認ください。<br>参考ドキュメント : <a href="https://jpazinteg.github.io/blog/LogicApps/apiConnection/">API 接続について</a></p><h2 id="1-サービス-プロバイダー接続とは"><a href="#1-サービス-プロバイダー接続とは" class="headerlink" title="1. サービス プロバイダー接続とは"></a>1. サービス プロバイダー接続とは</h2><p>[サービス プロバイダー接続] は、組み込み (built-in) コネクタの中でもサービス プロバイダー ベース組み込みコネクタの認証情報を保持するものになります。<br>サービス プロバイダー ベース組み込みコネクタは、<strong>Standard Logic Apps</strong> でのみご利用いただけます。</p><ul><li><p>組み込み (built-in) コネクタ全般について<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in">Azure Logic Apps の組み込みコネクタ</a></p></li><li><p>サービス プロバイダー ベース組み込みコネクタについて<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#service-provider-based-built-in-connectors">Azure Logic Apps の組み込みコネクタ # サービス プロバイダーベースの組み込みコネクタ</a></p></li></ul><p>2025 年 1 月現在ですと、以下がサービス プロバイダー ベース組み込みコネクタになります。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection01.jpg"><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-in-consumption-versus-standard">Azure Logic Apps の組み込みコネクタ # 従量課金と Standard の組み込みコネクタの比較</a><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in#built-in-connectors-for-specific-services-and-systems">Azure Logic Apps の組み込みコネクタ # 特定のサービスとシステム用の組み込みコネクタ</a></p><p>Standard Logic Apps にてトリガーやアクション追加時に、[In-app] にチェックを入れますとご確認いただけます。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection02.jpg"></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>[Azure Blob Storage] コネクタや [SQL Server] コネクタといったサービス プロバイダー ベース組み込みコネクタは、マネージド コネクタのご用意もあります。<br>サービス プロバイダー ベース組み込みコネクタをお使いいただくメリットとしましては、たとえば Standard Logic Apps 側の VNet 統合およびアクセス先のサービス側でのプライベート エンドポイントと組み合わせることで、Azure Blob Storage や Azure SQL Server 等にプライベートにアクセスすることが可能である点です。<br>詳細な手順は以下をご参照ください。<br>参考ドキュメント : <a href="https://jpazinteg.github.io/blog/LogicApps/vnetIntergration/">Standard Logic Apps から VNet 経由で別リソースにアクセスする方法</a></p><p>なお、サービス プロバイダー ベース組み込みコネクタとマネージド コネクタとで、一部項目の設定方法の違いや、認証方法の違い、動作の違いがある場合がありますので、ご注意ください。</p><p>例 [Azure Blob Storage] コネクタのトリガー<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection03.jpg"><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-azureblobstorage?tabs=consumption#add-a-blob-trigger">Azure Logic Apps のワークフローから Azure Blob Storage に接続する # BLOB トリガーを追加する</a></p><h3 id="2-確認方法"><a href="#2-確認方法" class="headerlink" title="2. 確認方法"></a>2. 確認方法</h3><p>上記の通り、[サービス プロバイダー接続] は Standard Logic Apps でのみ作成されます。<br>対象の Standard Logic Apps 内で利用している [サービス プロバイダー接続] は、[ワークフロー - 接続] の [サービス プロバイダー接続] タブにてご確認いただけます。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection04.jpg"></p><p>[サービス プロバイダー接続] は [API 接続] とは異なり、別リソースとして作成されません。</p><h3 id="3-削除方法"><a href="#3-削除方法" class="headerlink" title="3. 削除方法"></a>3. 削除方法</h3><p>[ワークフロー – 接続] の [JSON ビュー] タブを開き、”serviceProviderConnections” 配下にある対象の [サービス プロバイダー接続] のプロパティを削除いただき、[保存] ボタンを押下いただくことで [サービス プロバイダー接続] タブの表示から削除されます。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection05.jpg"></p><p>[JSON ビュー] にてご確認いただける内容は、connections.json (※) に記載されております内容と同様になります。<br>(※) connections.json のご確認方法につきましては、以下をご参照ください。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection06.jpg"><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps#service-provider-connections">シングルテナントの Azure Logic Apps の Standard ロジック アプリ向けの DevOps デプロイ # サービス プロバイダーの接続</a><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#download-standard-logic-app-artifacts-from-portal">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # ポータルから Standard ロジック アプリの成果物をダウンロードする</a></p><p>たとえば、サービス プロバイダー ベース組み込みコネクタの [Azure Blob Storage] コネクタで接続文字列を認証に利用している場合、以下のように <code>@appsetting(&#39;&#123;環境変数名&#125;&#39;)</code> という記載形式になっております。<br><code>@appsetting~</code> という記述は、[設定 - 環境変数] の [アプリ設定] タブにて登録されております環境変数の値を参照していることを意味しております。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection07.jpg"></p><p>こちらの環境変数が残存していることによってワークフローの動作に影響はございませんが、管理の面での混乱を避けるために削除いただくことも可能です。<br>該当の環境変数の右側の [ゴミ箱] ボタンを押下し、[適用] ボタンを押下することで削除いただけます。<br>なお、環境変数の変更を行いますと、Standard Logic Apps が再起動いたしますのでご注意ください。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection08.jpg"></p><h3 id="4-デプロイ"><a href="#4-デプロイ" class="headerlink" title="4. デプロイ"></a>4. デプロイ</h3><p>[サービス プロバイダー接続] は別リソースではなく、connections.json および環境変数に認証に必要な情報が登録されます。</p><p>また、Standard Logic Apps におけるデプロイは、Standard Logic Apps (基盤側) のデプロイと、workflow.json、connections.json、host.json を含むアプリ成果物のデプロイの大きく二つに分かれます。<br>[サービス プロバイダー接続] の情報もデプロイするためには、以下の方法がございます。</p><blockquote><p>“シングルテナント” の Azure Logic Apps の場合は、Standard ロジック アプリのリソースとインフラストラクチャの間でリソースのプロビジョニングを分離できるため、デプロイが簡単になります。</p></blockquote><p>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/devops-deployment-single-tenant-azure-logic-apps#single-tenant-versus-multi-tenant">シングルテナントの Azure Logic Apps の Standard ロジック アプリ向けの DevOps デプロイ # シングルテナントとマルチテナント</a></p><ol><li><p>Standard Logic Apps をデプロイする<br>ARM テンプレート等を用いて Standard Logic Apps (基盤側) をデプロイします。<br>※ Standard Logic Apps の場合ですと、この他ストレージ アカウントや App Service Plan 、必要に応じて Application Insights や VNet 等のデプロイも必要ですが、本記事では説明を割愛させていただきます。<br>Standard Logic Apps (基盤側) をデプロイする際に、ARM テンプレート内に環境変数を含めることが可能です。<br>以下、参考情報になります。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#deploy-infrastructure-resources">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # インフラストラクチャ リソースのデプロイ</a><br>既存の Standard Logic Apps (基盤側) に対して、環境変数を手動で追加することも可能です。<br>[設定 - 環境変数] の [アプリ設定] タブにて [+ 追加] ボタンを押下し、環境変数名および値を設定できます。<br><img src="/blog/LogicApps/serviceProviderConnection/serviceProviderConnection09.jpg"></p></li><li><p>zip デプロイを行う<br>zip デプロイによってワークフロー (アプリケーション側) をデプロイすることが可能です。<br>zip デプロイに利用する zip ファイルは、移行元の Standard Logic Apps の [概要] より取得いただけます。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#download-standard-logic-app-artifacts-from-portal">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # ポータルから Standard ロジック アプリの成果物をダウンロードする</a><br>このとき、zip ファイルには [サービス プロバイダー接続] 等の接続情報を保持している connections.json ファイルが含まれております。<br>zip デプロイの際に、この connections.json に必要な [サービス プロバイダー接続] の情報を含めることが可能です。<br>以下の手順に従い、zip デプロイを行います。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-cli#release-to-azure">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # Azure へのリリース</a><br>マネージド ID 認証をご利用の場合には、デプロイ先の Standard Logic Apps のマネージド ID に必要なロールが付与されているかもご確認ください。</p></li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps で利用される [サービス プロバイダー接続] についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>以下、Logic Apps における [接続] についての関連記事になります。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/apiConnection/">API 接続について</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps の [サービス プロバイダー接続] について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="サービス プロバイダー接続" scheme="https://jpazinteg.github.io/blog/tags/%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-%E3%83%97%E3%83%AD%E3%83%90%E3%82%A4%E3%83%80%E3%83%BC%E6%8E%A5%E7%B6%9A/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で日付や時刻を判定してワークフローを制御する (2) - 毎月第 1 月曜日に起動したい</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions2/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions2/</id>
    <published>2024-11-15T02:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.201Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2</a> をご利用いただく際などに、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。</p><p>当ブログでは以前に <a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/">Logic Apps で日付や時刻を判定してワークフローを制御する | Japan Azure Integration Support Blog</a> にて、Logic Apps で日付や時刻を判定してワークフローを制御する方法をいくつかご紹介いたしました。</p><p>今回はさらに Logic Apps における日付や時刻の判定に使えるシナリオとして「毎月第 1 月曜日に起動したい」場合の設定例をご紹介いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の記事では従量課金版 Logic Apps を利用しますが、Standard 版 Logic Apps でもご利用いただけます。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>シナリオ: 毎月第 1 月曜日の午前 8 時にワークフローを起動したい</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="シナリオ-毎月第-1-月曜日の午前-8-時にワークフローを起動したい"><a href="#シナリオ-毎月第-1-月曜日の午前-8-時にワークフローを起動したい" class="headerlink" title="シナリオ: 毎月第 1 月曜日の午前 8 時にワークフローを起動したい"></a>シナリオ: 毎月第 1 月曜日の午前 8 時にワークフローを起動したい</h2><p>「毎月第 1 月曜日の午前 8 時にワークフローを起動したい」。例としてこの場合、まずは以下のように毎週月曜日の 8:00 にワークフローを起動させるよう、繰り返しトリガーを設定しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions2/LogicApps-Functions2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption">繰り返しワークフローをスケジュール設定および実行する - Azure Logic Apps | Microsoft Learn</a></p><h3 id="トリガーの条件"><a href="#トリガーの条件" class="headerlink" title="トリガーの条件"></a>トリガーの条件</h3><p>トリガーには条件式というものを設定できることを、以前の記事でもご紹介いたしました。</p><p>参考: <a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/">Logic Apps で日付や時刻を判定してワークフローを制御する | Japan Azure Integration Support Blog</a> </p><p>今回はこちらに「第 1 月曜日」を満たす式を記述しますが、カレンダーからは以下のように 第 1 月曜日 (または月曜日以外の任意の曜日) は必ず 1 以上 7 以下の日付となることが分かります。</p><p><img src="/blog/LogicApps/LogicApps-Functions2/LogicApps-Functions2-2.png"></p><p>1 週間は 7 日間であることから、月の初日から数えて最初の月曜日は必ず 1 日から 7 日の間にあります。以下となります。</p><ul><li>第 1 週: 1 日から 7 日</li><li>第 2 週: 8 日から 14 日</li><li>第 3 週: 15 日から 21 日</li><li>第 4 週: 22 日から 28 日</li><li>第 5 週: 29 日以降</li></ul><p>したがって、下のように各週の条件を考えることができます。</p><ul><li>第 1 月曜日 (または月曜日以外の任意の曜日) は 1 以上 7 以下の日付。</li><li>第 2 月曜日 (または月曜日以外の任意の曜日) は 8 以上 14 以下の日付。</li><li>第 3 月曜日 (または月曜日以外の任意の曜日) は 15 以上 21 以下の日付。</li><li>第 4 月曜日 (または月曜日以外の任意の曜日) は 22 以上 28 以下の日付。</li><li>第 5 月曜日 (または月曜日以外の任意の曜日) は 29 以上の日付。</li></ul><h3 id="条件式"><a href="#条件式" class="headerlink" title="条件式"></a>条件式</h3><p>上記を踏まえ、日本時間にて「今日が第 1 月曜日である (= 1 以上 7 以下の日付である)」という条件式を設定すると、以下のようになります。</p><p><img src="/blog/LogicApps/LogicApps-Functions2/LogicApps-Functions2-3.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@and(greaterOrEquals(dayOfMonth(convertFromUtc(utcNow(), &#x27;Tokyo Standard Time&#x27;)), 1), lessOrEquals(dayOfMonth(convertFromUtc(utcNow(), &#x27;Tokyo Standard Time&#x27;)), 7))</span><br></pre></td></tr></table></figure><p><code>greaterOrEquals</code> (以上)  と <code>lessOrEquals</code> (以下) の利用方法についてご参考になれば幸いです。また関連する関数について、以下ご覧いただけます。</p><p>参考: </p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#convertFromUtc">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # convertFromUtc</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#dayOfMonth">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # dayOfMonth</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#lessOrEquals">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # lessOrEquals</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#greaterOrEquals">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # greaterOrEquals</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#and">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # and</a></li></ul><p>これにより、「毎月第 1 月曜日に起動したい」とするワークフローを制御できるようになりました。上に基づいて、お客様業務上の任意の後続処理を行うための、条件設定に応用いただけます。</p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>本文中でもご紹介いたしましたが、ほか Logic Apps と日付関数に言及した記事には、以下のようなものがございます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-DateTime/">Logic Apps で簡単に日付や時刻を用いる | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/UnixTime/">Logic Apps の式関数で Unix Time を取得する方法 | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/">Logic Apps で日付や時刻を判定してワークフローを制御する | Japan Azure Integration Support Blog</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、繰り返しトリガー利用時に便利な、日付や時刻の判定方法についてご紹介しました。引き続き皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy&quot;&gt;Start/Stop VMs v2&lt;/a&gt; をご利用いただく際などに、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。&lt;/p&gt;
&lt;p&gt;当ブログでは以前に &lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/&quot;&gt;Logic Apps で日付や時刻を判定してワークフローを制御する | Japan Azure Integration Support Blog&lt;/a&gt; にて、Logic Apps で日付や時刻を判定してワークフローを制御する方法をいくつかご紹介いたしました。&lt;/p&gt;
&lt;p&gt;今回はさらに Logic Apps における日付や時刻の判定に使えるシナリオとして「毎月第 1 月曜日に起動したい」場合の設定例をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>API 接続について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/apiConnection/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/apiConnection/</id>
    <published>2024-11-12T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Logic Apps の [API 接続] について説明いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Logic Apps における [接続]</li><li>Logic Apps のコネクタの種類</li><li><ol><li>API 接続とは</li></ol></li><li><ol start="2"><li>確認方法</li></ol></li><li><ol start="3"><li>削除方法</li></ol></li><li><ol start="4"><li>デプロイ</li></ol></li><li><ol start="5"><li>[API 接続] が無効となる場合</li></ol></li></ul><h2 id="Logic-Apps-における-接続"><a href="#Logic-Apps-における-接続" class="headerlink" title="Logic Apps における [接続]"></a>Logic Apps における [接続]</h2><p>まず、Logic Apps における [接続] は、各トリガーやアクションの実行時に利用する認証情報を保持しておくものであり、従量課金タイプの Logic Apps と Standard タイプの Logic Apps とで以下のように異なります。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/manage-logic-apps-with-azure-portal?tabs=standard#view-connections">Azure portal でロジック アプリ ワークフローを管理する # 接続の表示</a></p><p>具体的な確認方法につきましては、後述の [2. 確認方法] にて説明いたします。</p><h3 id="1-従量課金タイプ"><a href="#1-従量課金タイプ" class="headerlink" title="1. 従量課金タイプ"></a>1. 従量課金タイプ</h3><p>[開発ツール - API 接続] にてご確認いただけます。</p><ul><li>API 接続</li></ul><h3 id="2-Standard-タイプ"><a href="#2-Standard-タイプ" class="headerlink" title="2. Standard タイプ"></a>2. Standard タイプ</h3><p>[ワークフロー - 接続] にてご確認いただけます。</p><ul><li>API 接続</li><li>サービス プロバイダー接続</li><li>関数の接続</li></ul><h2 id="Logic-Apps-のコネクタの種類"><a href="#Logic-Apps-のコネクタの種類" class="headerlink" title="Logic Apps のコネクタの種類"></a>Logic Apps のコネクタの種類</h2><p>Logic Apps では、大きく 2 種類のコネクタのご用意があり、コネクタの種類によって利用される [接続] が異なります。</p><ul><li>組み込み (built-in) コネクタ<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/built-in">Azure Logic Apps の組み込みコネクタ</a></li></ul><p>トリガーやアクション追加時に、[In-app] にチェックを入れますとご確認いただけます。<br><img src="/blog/LogicApps/apiConnection/apiConnection03.jpg"></p><ul><li>マネージド コネクタ<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/managed">Azure Logic Apps のマネージド コネクタ</a></li></ul><p>トリガーやアクション追加時に、[共有済み] にチェックを入れますとご確認いただけます。<br><img src="/blog/LogicApps/apiConnection/apiConnection04.jpg"></p><h3 id="ご参考情報"><a href="#ご参考情報" class="headerlink" title="ご参考情報"></a>ご参考情報</h3><p>コネクタの種類によって送信 IP アドレスも異なります。<br>詳細につきましては以下のブログもご参照ください。<br>参考ドキュメント : <a href="https://jpazinteg.github.io/blog/LogicApps/outboundIpaddress/">Logic Apps の送信 IP アドレスについて</a></p><h2 id="1-API-接続とは"><a href="#1-API-接続とは" class="headerlink" title="1. API 接続とは"></a>1. API 接続とは</h2><p>本記事では [API 接続] について説明いたします。</p><p>従量課金 Logic Apps または Standard Logic Apps でマネージド コネクタをご利用の場合に、[API 接続] という別リソースが作成されます。</p><p>たとえば、[Office 365 Outlook] コネクタの [メールの送信 (V2)] アクションを追加した際に、以下のような画面が表示されます。<br>当該コネクタでは、ユーザーのサインイン情報を必要としますので、[サインイン] ボタンを押下し認証を行います。<br>※ ご利用いただける認証方法は、コネクタによって異なります。<br><img src="/blog/LogicApps/apiConnection/apiConnection05.jpg"></p><p>これにより、[API 接続] という別リソースが自動的に作成され、認証情報を保持します。<br>各トリガーやアクションの実行時に、[API 接続] にて保持している認証情報が利用されます。</p><h2 id="2-確認方法"><a href="#2-確認方法" class="headerlink" title="2. 確認方法"></a>2. 確認方法</h2><h4 id="2-1-従量課金タイプ"><a href="#2-1-従量課金タイプ" class="headerlink" title="2-1. 従量課金タイプ"></a>2-1. 従量課金タイプ</h4><p>対象の従量課金 Logic Apps 内で利用している [API 接続] は、[開発ツール - API 接続] にてご確認いただけます。<br><img src="/blog/LogicApps/apiConnection/apiConnection06.jpg"></p><h4 id="2-2-Standard-タイプ"><a href="#2-2-Standard-タイプ" class="headerlink" title="2-2. Standard タイプ"></a>2-2. Standard タイプ</h4><p>対象の Standard Logic Apps 内で利用している [API 接続] は、[ワークフロー - 接続] の [API 接続] タブにてご確認いただけます。<br><img src="/blog/LogicApps/apiConnection/apiConnection07.jpg"></p><h4 id="2-3-一覧での確認"><a href="#2-3-一覧での確認" class="headerlink" title="2-3. 一覧での確認"></a>2-3. 一覧での確認</h4><p>Azure ポータル上で [API 接続] と検索いただきますと、過去に作成されたすべての [API 接続] をご確認いただけます。<br><img src="/blog/LogicApps/apiConnection/apiConnection08.jpg"></p><p>[種類] にて <strong>V1</strong> と表示されますのが従量課金 Logic Apps の [API 接続]、<strong>V2</strong> が Standard Logic Apps の [API 接続] になります。</p><h2 id="3-削除方法"><a href="#3-削除方法" class="headerlink" title="3. 削除方法"></a>3. 削除方法</h2><h4 id="3-1-従量課金タイプ"><a href="#3-1-従量課金タイプ" class="headerlink" title="3-1. 従量課金タイプ"></a>3-1. 従量課金タイプ</h4><p>ご不要になりました [API 接続] の削除方法につきましては、過去のブログをご参照ください。<br>参考ドキュメント : <a href="https://jpazinteg.github.io/blog/LogicApps/ApiConnectionsDelete/">Azure Logic Apps の コネクタにおける不要な接続情報の削除方法について</a></p><h4 id="3-2-Standard-タイプ"><a href="#3-2-Standard-タイプ" class="headerlink" title="3-2. Standard タイプ"></a>3-2. Standard タイプ</h4><p>[API 接続] リソース自体の削除方法は従量課金タイプと同様となりますが、[API 接続] リソース自体の削除後も [ワークフロー - 接続] の [API 接続] タブにて表示され続けます。<br>[ワークフロー – 接続] の [JSON ビュー] タブを開き、”managedApiConnections” 配下にある対象の [API 接続] のプロパティを削除いただき、[保存] ボタンを押下いただくことで [API 接続] タブ表示からも削除されます。<br><img src="/blog/LogicApps/apiConnection/apiConnection09.jpg"></p><p>[JSON ビュー] にてご確認いただける内容は、connections.json (*) に記載されております内容と同様になります。</p><p>(*) connections.json のご確認方法につきましては、以下をご参照ください。<br><img src="/blog/LogicApps/apiConnection/apiConnection10.jpg"><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#deploy-infrastructure-resources">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # インフラストラクチャ リソースのデプロイ</a><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#download-standard-logic-app-artifacts-from-portal">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # ポータルから Standard ロジック アプリの成果物をダウンロードする</a></p><h3 id="4-デプロイ"><a href="#4-デプロイ" class="headerlink" title="4. デプロイ"></a>4. デプロイ</h3><p>上述の通り、[API 接続] は Logic Apps のリソースとは別に存在するリソースですので、Logic Apps を別サブスクリプションや別テナントへデプロイ (コピー) する場合には、[API 接続] も別途デプロイが必要となります。<br>複数の [API 接続] をご利用の場合には、それぞれをデプロイする必要があります。<br>組み込みコネクタのみで構成されており、[API 接続] が紐づいていない Logic Apps におきましては [API 接続] のデプロイは不要です。<br>※ Logic Apps 自体のデプロイ方法の詳細につきましては、一部割愛させていただいております。</p><h4 id="4-1-従量課金タイプ"><a href="#4-1-従量課金タイプ" class="headerlink" title="4-1. 従量課金タイプ"></a>4-1. 従量課金タイプ</h4><p>Logic Apps 自体をデプロイするよりも先に、[API 接続] をデプロイします。<br>以下は ARM テンプレートを利用する場合についてとなります。</p><ol><li><p>[API 接続] の ARM テンプレートをエクスポートする<br>[Azure ポータル] - [API 接続] - [&lt;対象の　API 接続&gt;] - [オートメーション - テンプレートのエクスポート] ページへ移動します。<br>[パラメーターを含める] にチェックを入れ、[ダウンロード] を選択します。<br>ダウンロードした zip ファイル内の [template.json] が ARM テンプレートになります。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-resource-manager/templates/export-template-portal#export-template-from-a-resource">Azure portal を使用してテンプレートをエクスポートする # リソースからテンプレートをエクスポートする</a></p></li><li><p>ARM テンプレートを編集する<br>ARM テンプレート内に以下のような記述の API 接続のリソース ID が記述されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/subscriptions/&#123;サブスクリプション ID&#125;/resourceGroups/&#123;リソースグループ名&#125;/providers/Microsoft.Web/connections/&#123;API 接続名&#125;</span><br></pre></td></tr></table></figure><p>サブスクリプション、リソースグループ名 に変更がある場合は、文字列置換にて移行先の情報に変更する必要があります。<br>例)<br>置換前 : 現行サブスクリプション ID<br>置換後 : 移行先サブスクリプション ID<br>システム割り当てマネージド ID を有効化されている Logic App の ARM テンプレートの場合、<br>ARM テンプレート内の [resources. Identity. principalId] および [resources. Identity. tenantId] を null にする必要もあります。</p></li><li><p>[API 接続] をデプロイする<br>[Azure ポータル] - [カスタム テンプレートのデプロイ] へ移動します。<br>[エディターで独自のテンプレートを作成します] を選択します。<br>デプロイする ARM テンプレートに差し替えます。(全選択頂きペーストで問題ございません。)<br>リソースグループを選択し、[確認と作成] を選択します。<br>[作成] を選択します。</p></li><li><p>Logic Apps をデプロイする<br>[API 接続] のデプロイ完了後に、Logic Apps のデプロイを行いますが、このとき Logic Apps 側の ARM テンプレートに記載されている [API 接続] の情報を、1.~3. で新しく作成したものに置き換えます。<br>“parameters” &gt; “$connections” に [API 接続] の記載がございます。<br><img src="/blog/LogicApps/apiConnection/apiConnection11.jpg"></p></li><li><p>[API 接続] の再認証を行う<br>API 接続はデプロイしただけでは認証に用いる認証情報が格納されていない状況となります。<br>この状況で Logic App でマネージド コネクタの処理を実行すると認証エラーになりますので、以下の手順にて再認証を実施頂く必要があります。<br>[Azure ポータル] - [API 接続] - [&lt;対象の API 接続&gt;] - [全般 - API 接続の編集] ページへ移動します。<br>[承認する] を選択します。(*)<br>画面の指示に従い再認証手順をご実施頂きます。<br>[保存] を選択します。</p></li></ol><p>(*) たとえば、[Azure Blob Storage] コネクタでアクセス キー認証をご利用の場合には、[Azure Storage アカウント名または BLOB エンドポイント] および [Azure ストレージ アカウントのアクセス キー] の入力が必要となります。<br>各コネクタでの認証方法によって、再認証に必要な作業が異なりますのでご注意ください。</p><h4 id="4-2-Standard-タイプ"><a href="#4-2-Standard-タイプ" class="headerlink" title="4-2. Standard タイプ"></a>4-2. Standard タイプ</h4><ol><li><p>[API 接続] をデプロイする<br>従量課金タイプと同様の方法にて、まず [API 接続] を先にデプロイします。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#before-you-release-to-azure">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # Azure にリリースする前に</a></p></li><li><p>Standard Logic Apps をデプロイする<br>ARM テンプレート等を用いて Standard Logic Apps (基盤側) をデプロイします。<br>※ Standard Logic Apps の場合ですと、この他ストレージ アカウントや App Service Plan 、必要に応じて Application Insights や VNet 等のデプロイも必要ですが、本記事では説明を割愛させていただきます。</p></li><li><p>zip デプロイを行う<br>zip デプロイによってワークフロー (アプリケーション側) をデプロイすることが可能です。<br>zip デプロイに利用する zip ファイルは、移行元の Standard Logic Apps の [概要] より取得いただけます。<br>[アプリ コンテンツのダウンロード] ボタンを押下します。<br>[ダウンロード] ボタンを選択し、zip ファイルをダウンロードします。<br><img src="/blog/LogicApps/apiConnection/apiConnection12.jpg"><br>このとき、zip ファイルには [API 接続] 等の接続情報を保持している connections.json ファイルが含まれております。<br>connections.json ファイルの内容を、1. で新しく作成した [API 接続] の情報をもとに編集します。<br>新しく作成した [API 接続] の [全般 - プロパティ] を開き、[接続ランタイム URL] および [リソース ID] をコピーして控えておきます。<br><img src="/blog/LogicApps/apiConnection/apiConnection13.jpg"><br>connections.json ファイルを開き、”managedApiConnections” 配下に [API 接続] の情報がありますので、”connectionRuntimeUrl” の値に控えておいた [接続ランタイム URL] をペーストします。<br>また、”connection” &gt; “id” に、[リソース ID] の値を置き換えます。<br>その他の箇所において connections.json 内のサブスクリプション ID やリソース グループ名も移行先のものに置き換えてください。<br>以下の手順に従い、zip デプロイを行います。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-cli#release-to-azure">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # Azure へのリリース</a></p></li><li><p>[API 接続] の再認証を行う<br>従量課金タイプと同様の方法にて、[API 接続] の再認証を行います。</p></li><li><p>アクセス ポリシーを追加する<br>各 [API 接続] には、アクセス ポリシーがあります。<br>新しくデプロイした Standard Logic Apps に対して、アクセス ポリシーを付与する必要があります。<br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=github#api-connection-resources-and-access-policies">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # API 接続リソースとアクセス ポリシー</a><br><img src="/blog/LogicApps/apiConnection/apiConnection14.jpg"><br>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/set-up-devops-deployment-single-tenant-azure-logic-apps?tabs=azure-cli#release-to-azure">シングルテナントの Azure Logic Apps に Standard ロジック アプリの DevOps デプロイを設定する # Azure へのデプロイ後</a><br><img src="/blog/LogicApps/apiConnection/apiConnection15.jpg"><br>新しく作成した [API 接続] を開き、[設定 - アクセス ポリシー] にて [+ 追加] ボタンを押下します。<br><img src="/blog/LogicApps/apiConnection/apiConnection16.jpg"><br>新しく作成した Standard Logic Apps 名を検索し、アクセス ポリシーを追加します。<br>※ アクセス ポリシーを割り当てるためには、Standard Logic Apps のマネージド ID が有効化されている必要があります。<br><img src="/blog/LogicApps/apiConnection/apiConnection17.jpg"></p></li></ol><h2 id="5-API-接続-が無効となる場合"><a href="#5-API-接続-が無効となる場合" class="headerlink" title="5. [API 接続] が無効となる場合"></a>5. [API 接続] が無効となる場合</h2><p>[API 接続] が無効となり、トリガーやアクションの実行が失敗する場合があります。<br>以下、よくお問い合わせいただく事例についてご紹介いたします。</p><h3 id="5-1-ユーザー情報によるサインインで認証を行う場合"><a href="#5-1-ユーザー情報によるサインインで認証を行う場合" class="headerlink" title="5-1. ユーザー情報によるサインインで認証を行う場合"></a>5-1. ユーザー情報によるサインインで認証を行う場合</h3><p>[API 接続] が無効となるケースについては以下が考えられます。<br>参考ドキュメント : <a href="https://jpdynamicscrm.github.io/blog/powerautomate/Invalid-Connection/#Power-Automate-%E3%81%A7%E3%80%8C%E7%84%A1%E5%8A%B9%E3%81%AA%E6%8E%A5%E7%B6%9A%E3%80%8D%E3%81%A8%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E5%8E%9F%E5%9B%A0">Power Automate で接続が「無効な接続」になる原因 # Power Automate で「無効な接続」と表示される原因</a><br><img src="/blog/LogicApps/apiConnection/apiConnection18.jpg"><br>※ 上記は Logic Apps の類似製品である Power Automate 側のブログを参照しております。<br>ユーザー情報によるサインインで認証を行っているマネージド コネクタの実行にて、[Unauthorized] エラーが発生した場合には上記のような要因が考えられますので一度ご確認いただけますと幸いです。<br>もしエラー内容等からご判断が難しい場合には、Azure ポータルより <strong>Logic Apps 観点</strong> でお問い合わせください。</p><h3 id="5-2-マネージド-ID-認証の場合"><a href="#5-2-マネージド-ID-認証の場合" class="headerlink" title="5-2. マネージド ID 認証の場合"></a>5-2. マネージド ID 認証の場合</h3><p>一例となりますが、たとえば対象の Logic Apps のマネージド ID を一度無効化し、再度有効化しますとマネージド ID のオブジェクト ID が刷新されますので、<br>改めて新しいマネージド ID に対して必要なロールを付与する必要があります。</p><h3 id="5-3-サービス-プリンシパル認証の場合"><a href="#5-3-サービス-プリンシパル認証の場合" class="headerlink" title="5-3. サービス プリンシパル認証の場合"></a>5-3. サービス プリンシパル認証の場合</h3><p>一例となりますが、シークレットの有効期限切れによって接続が無効となります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps で利用される [API 接続] についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Logic Apps の [API 接続] について説明いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="API 接続" scheme="https://jpazinteg.github.io/blog/tags/API-%E6%8E%A5%E7%B6%9A/"/>
    
  </entry>
  
  <entry>
    <title>従量課金版 Azure Logic Apps の料金体系を理解するポイント</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-ConsumptionPricing/</id>
    <published>2024-11-01T07:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.192Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は 従量課金版 について記載しております。今回は、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>従量課金版 Azure Logic Apps の料金体系を理解するポイント<ul><li>Logic Apps の価格表 (2024 年 10 月の例) </li><li>アクション と コネクタ について</li><li>データ保持 について</li><li>メトリック について</li><li>Azure Logic Apps の使用量の計測、課金、価格のしくみ</li><li>料金計算ツール について</li></ul></li><li>まとめ</li></ul><h2 id="従量課金版-Azure-Logic-Apps-の料金体系を理解するポイント"><a href="#従量課金版-Azure-Logic-Apps-の料金体系を理解するポイント" class="headerlink" title="従量課金版 Azure Logic Apps の料金体系を理解するポイント"></a>従量課金版 Azure Logic Apps の料金体系を理解するポイント</h2><h3 id="Logic-Apps-の価格表-2024-年-10-月の例"><a href="#Logic-Apps-の価格表-2024-年-10-月の例" class="headerlink" title="Logic Apps の価格表 (2024 年 10 月の例)"></a>Logic Apps の価格表 (2024 年 10 月の例)</h3><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a></p><p>以下例では 2024 年 10 月の料金に基づいて記載しております。主要なところを (1)～(4) に分けてお考えいただけます。</p><ol><li>アクション = ¥0.004055 × 実行回数 (ただし、組み込みアクションの最初の 4000 回は毎月無料です。)</li><li>Standard コネクタ = ¥0.018825 × 通話 (呼び出し) 回数</li><li>エンタープライズ コネクタ = ¥0.144805 × 通話 (呼び出し) 回数</li><li>データ保持 = ¥17.38 GB/月</li></ol><p>通話 とはチャンクなどにより 1 つのアクションで複数回呼び出し (Call、通信) される場合があるための単位とお考えください。</p><p>価格表:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-1.png"></p><h3 id="アクション-と-コネクタ-について"><a href="#アクション-と-コネクタ-について" class="headerlink" title="アクション と コネクタ について"></a>アクション と コネクタ について</h3><p>前提といたしまして、Logic Apps のコネクタには、組み込みコネクタとマネージド コネクタがあります。<br>従量課金版における価格記載の「アクション」(価格表の (1)) とは、組み込みコネクタの実行数を意味した記述となります。一方の「Standard コネクタ」、「エンタープライズ コネクタ」はマネージド コネクタとなります。<br>組み込みコネクタとマネージド コネクタの機能的な比較は以下にございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/connectors/introduction#built-in-connectors-versus-managed-connectors">コネクタとは - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>組み込みコネクタは、直接 Azure Logic Apps 内でネイティブで動作するよう作られています。<br>マネージド コネクタは、Microsoft によって Azure でデプロイ、ホスト、管理されます。<br>マネージド コネクタはほとんどが、基になるサービスまたはシステムが Azure Logic Apps と通信するために使用する API のプロキシまたはラッパーを提供します。</p></blockquote><p>マネージド コネクタのうち、コネクタの種類が Standard コネクタ (価格表の (2)) であるか、エンタープライズ コネクタ (価格表の (3)) であるかにつきましては、コネクタの公開情報から確認いただけます。</p><p>Standard コネクタ 例: <a href="https://learn.microsoft.com/ja-jp/connectors/azureblob/">Azure Blob Storage - Connectors | Microsoft Learn</a><br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-2.png"></p><p>エンタープライズ コネクタ 例: <a href="https://learn.microsoft.com/ja-jp/connectors/mq/">MQ - Connectors | Microsoft Learn</a><br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-3.png"></p><p>これを トリガー と アクション に分けておまとめしますと以下となります。</p><p><strong>&lt;トリガー&gt;</strong></p><ul><li>組み込みコネクタのトリガー：無課金</li><li>Standard コネクタのトリガー：<strong>価格表の (2)</strong> に該当</li><li>エンタープライズ コネクタのトリガー： <strong>価格表の (3)</strong> に該当</li></ul><p><strong>&lt;アクション&gt;</strong></p><ul><li>組み込みコネクタのアクション： <strong>価格表の (1)</strong> に該当</li><li>Standard コネクタのアクション： <strong>価格表の (2)</strong> に該当</li><li>エンタープライズ コネクタのアクション： <strong>価格表の (3)</strong> に該当</li></ul><h3 id="データ保持-について"><a href="#データ保持-について" class="headerlink" title="データ保持 について"></a>データ保持 について</h3><p><strong>価格表の(4)</strong> 、データ保持 については以下となります。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/plan-manage-costs#storage-operations-and-costs">Azure Logic Apps のコストの管理を計画する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps では、すべてのストレージ操作に Azure Storage を使用します。 マルチテナントの Azure Logic Apps では、すべてのストレージの使用およびコストがロジック アプリに関連付けられます。 データ保持とストレージ消費によって固定価格モデルを使用するコストが発生します。 たとえば、実行履歴からの入力と出力はバックグラウンド ストレージに保持されます。これは、ロジック アプリから独立して作成、管理、アクセスするストレージ リソースとは異なります。</p></blockquote><p>メトリックの Billing Usage for Storage Consumption Executions が、課金対象のデータを保持した際のデータ サイズとなります。<br>またこのデータ サイズは、Logic Apps 実行履歴のアクションの入力と出力のテキスト サイズからも計算いただけます。</p><p>以上 (1)～(4) が、従量課金版 Azure Logic Apps の料金体系の主要なところとなります。</p><h3 id="メトリック-について"><a href="#メトリック-について" class="headerlink" title="メトリック について"></a>メトリック について</h3><p>ここまでの内容を踏まえメトリックにて、以下を確認いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-monitor/reference/supported-metrics/microsoft-logic-workflows-metrics">サポートされているメトリック - Microsoft.Logic/Workflows - Azure Monitor | Microsoft Learn</a></p><ul><li>課金対象のアクションの実行 … Billable Action Executions</li><li>課金対象のトリガーの実行 … Billable Trigger Executions</li><li>ネイティブ操作実行の利用状況に応じた課金 … Billing Usage for Native Operation</li><li>標準コネクタ実行の利用状況に応じた課金 … Billing Usage for Standard Connector</li><li>ストレージ消費の利用状況に応じた課金 … Billing Usage for Storage Consumption</li><li>課金対象の実行の合計数 … Total Billable Executions</li></ul><p>例:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-4.png"></p><h3 id="Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ"><a href="#Azure-Logic-Apps-の使用量の計測、課金、価格のしくみ" class="headerlink" title="Azure Logic Apps の使用量の計測、課金、価格のしくみ"></a>Azure Logic Apps の使用量の計測、課金、価格のしくみ</h3><p>また Azure Logic Apps および関連リソースにおける、測定、課金、および各価格モデルのしくみについて、以下ドキュメントにて網羅的にご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing">使用量の測定、課金、価格 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps を使用して、スケーリング可能な自動化された統合ワークフローをクラウドに作成して実行できます。この記事では、Azure Logic Apps および関連リソースにおける、測定、課金、および各価格モデルのしくみについて説明します。具体的な価格、コスト計画、さまざまなホスティング環境などの情報については、次のコンテンツを確認してください。</p></blockquote><h3 id="料金計算ツール-について"><a href="#料金計算ツール-について" class="headerlink" title="料金計算ツール について"></a>料金計算ツール について</h3><p>ほか 料金計算ツール にて概算を確認いただけます。</p><p><a href="https://azure.microsoft.com/ja-jp/pricing/calculator/?service=logic-apps">料金計算ツール | Microsoft Azure</a></p><p>例:<br><img src="/blog/LogicApps/LogicApps-ConsumptionPricing/LogicApps-ConsumptionPricing-5.png"></p><p>最後にはなりますが、ツールに基づくお見積りは概算となり、具体的なリソースのご利用状況によって増減する可能性もございます。Logic Apps の調査をご依頼の際は以下記事もご参考に、本テクニカル サポートへお問合せいただければ大変うれしく思います。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/">Logic Apps の調査時にサポート エンジニアへ連携するログの取得方法について | Japan Azure Integration Support Blog</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a> のドキュメントを基に、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介しました。Logic Apps のご利用検討時、皆様のご参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;Azure Logic Apps には 従量課金版 と Standard 版がございますが、本記事は 従量課金版 について記載しております。今回は、従量課金版 Azure Logic Apps で料金をお見積りいただく際に、各資料を読み解いて理解するためのポイントをご紹介してまいります。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ のトランザクション メッセージ</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqTransaction/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqTransaction/</id>
    <published>2024-07-09T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.305Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスのメッセージの種類についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ のトランザクション メッセージ</li><li>MSMQ のトランザクション メッセージ送信</li><li>MSMQ のトランザクション メッセージ再試行</li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><ul><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> </li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/">MSMQ で End2End ログを取得する手順 | Japan Azure Integration Support Blog</a></li></ul><p>上記にも関連記事がございます。</p><h2 id="MSMQ-のトランザクション-メッセージ"><a href="#MSMQ-のトランザクション-メッセージ" class="headerlink" title="MSMQ のトランザクション メッセージ"></a>MSMQ のトランザクション メッセージ</h2><p>トランザクション キューで扱われるメッセージと、非トランザクション キューで扱われるメッセージの違いについてご説明します。端的にトランザクション キューでは、「順序を保証する」点が特徴になります。</p><p>以下のようなドキュメントをご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/dotnet/framework/wcf/feature-details/queuing-in-wcf#msmq">WCF でのキュー - WCF | Microsoft Learn</a></p><blockquote><p>MSMQ では、キューをトランザクションまたは非トランザクションとして設定できます。<br>トランザクション キューの場合、トランザクションによるメッセージの取り込みと配信が可能です。<br>メッセージは、キューに永続的に格納されます。トランザクション キューに送信されたメッセージは、正確に 1 回だけ、順序どおりに転送されます。 </p></blockquote><blockquote><p>非トランザクション キューを使用すると、揮発性メッセージと非揮発性メッセージの両方を送信できます。非トランザクション キューに送信されたメッセージには、信頼できる転送保証がありません。したがって、メッセージが失われる可能性があります。</p></blockquote><p>それぞれ以下から確認いただけます。</p><h3 id="トランザクション-キュー"><a href="#トランザクション-キュー" class="headerlink" title="トランザクション キュー"></a>トランザクション キュー</h3><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-1.png"></p><h3 id="非トランザクション-キュー"><a href="#非トランザクション-キュー" class="headerlink" title="非トランザクション キュー"></a>非トランザクション キュー</h3><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-2.png"></p><h2 id="MSMQ-のトランザクション-メッセージ送信"><a href="#MSMQ-のトランザクション-メッセージ送信" class="headerlink" title="MSMQ のトランザクション メッセージ送信"></a>MSMQ のトランザクション メッセージ送信</h2><p>以下は、トランザクション キューに PowerShell にてメッセージを送信するサンプルです。</p><h3 id="トランザクション-メッセージ送信コマンド例"><a href="#トランザクション-メッセージ送信コマンド例" class="headerlink" title="トランザクション メッセージ送信コマンド例"></a>トランザクション メッセージ送信コマンド例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[System.Reflection.Assembly]::LoadWithPartialName(&quot;System.Messaging&quot;)</span><br><span class="line">$queuePath = &quot;FormatName:Direct=OS:&lt;送信先 コンピューター名&gt;\private$\&lt;キュー名&gt;&quot;</span><br><span class="line">$mq = new-object System.Messaging.MessageQueue($queuePath)</span><br><span class="line">$tran = new-object System.Messaging.MessageQueueTransaction;</span><br><span class="line">$tran.Begin()</span><br><span class="line">$mq.Send(&quot;Hello transaction 1&quot;, $tran)</span><br><span class="line">$mq.Send(&quot;Hello transaction 2&quot;, $tran)</span><br><span class="line">$tran.Commit()</span><br></pre></td></tr></table></figure><h3 id="非トランザクション-メッセージ送信コマンド例"><a href="#非トランザクション-メッセージ送信コマンド例" class="headerlink" title="非トランザクション メッセージ送信コマンド例"></a>非トランザクション メッセージ送信コマンド例</h3><p>以下記事で非トランザクション キューに PowerShell にてメッセージを送信するサンプルを紹介しています。合わせてご覧ください。</p><p><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></p><h2 id="MSMQ-のトランザクション-メッセージ再試行"><a href="#MSMQ-のトランザクション-メッセージ再試行" class="headerlink" title="MSMQ のトランザクション メッセージ再試行"></a>MSMQ のトランザクション メッセージ再試行</h2><p>コマンドの違いとしては上の通り、メッセージの送信処理の前後でトランザクションの開始、コミットを記述することで「順序通りに送る」ことを保証できる点にありますが、内部的にも、トランザクション メッセージは以下のような振る舞いをいたします。</p><p>MSMQのトランザクション メッセージは、トランザクションの完了を確認するために内部の order_queue$ というキューを使用します。通常、トランザクションの order_queue$ への ack は、MSMQ クライアントが確立したのと同じ TCP セッションで送り返されます。</p><p>トランザクション メッセージを送信すると、受信したサーバーから送信元の order_queue$ へ返答を送り返していることが分かります。</p><p><img src="/blog/MSMQ/MsmqTransaction/MsmqTransaction-3.png"></p><p>一方、一般的なネットワーク・通信エラーやその他の問題が発生した場合、TCP セッションが切断される状況もあります。その場合、送信された返答は送信キューに入れられますが、MSMQ 送信メッセージの送信再試行ポリシーで再試行されます。</p><p><a href="https://learn.microsoft.com/ja-jp/previous-versions/windows/it-pro/windows-2000-server/cc957504(v=technet.10)?redirectedfrom=MSDN">SeqResend13Time | Microsoft Learn</a></p><blockquote><p>Determines how often outgoing, transacted messages are resent because they are unacknowledged.<br>The value of this entry specifies the interval between resends for the first three times the message is resent. If, after the third resend, the sender still does not receive an acknowledgement from the intended recipient, the message is resent at intervals determined by the values of the following entries: SeqResend46Time , SeqResend79Time , SeqResend10Time</p></blockquote><blockquote><p>(翻訳) 送信されたトランザクション・メッセージが再送される頻度を指定します。このエントリの値は、メッセージが再送される最初の3回の再送間隔を指定します。3回目の再送の後、送信者がまだ意図した受信者から確認応答を受け取らない場合、メッセージは以下のエントリの値で決まる間隔で再送されます： SeqResend46Time , SeqResend79Time , SeqResend10Time</p></blockquote><p>既定では、MSMQ は以下の間隔でメッセージの再送信を試みます。</p><ul><li>SeqResend13Time:試行1-3 回:30秒:<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957504(v=technet.10)?redirectedfrom=MSDN">SeqResend13Time | Microsoft Learn</a></li><li>SeqResend46Time:試行4-6 回:300秒(5分):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957505(v=technet.10)?redirectedfrom=MSDN">SeqResend46Time | Microsoft Learn</a></li><li>SeqResend79Time:試行7-9 回:1800秒(30分):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957506(v=technet.10)?redirectedfrom=MSDN">SeqResend79Time | Microsoft Learn</a></li><li>SeqResend10Time:試行10+ 回:21600秒(6時間):<a href="https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc957503(v=technet.10)?redirectedfrom=MSDN">SeqResend10Time | Microsoft Learn</a></li></ul><p>関連: <a href="https://learn.microsoft.com/en-us/previous-versions/windows/desktop/msmq/ms699870(v=vs.85)">Message Queuing Transactions | Microsoft Learn</a></p><p>以上、トランザクション メッセージの特徴として、参考になりましたら幸いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ のトランザクション メッセージ</li><li>MSMQ のトランザクション メッセージ送信</li><li>MSMQ のトランザクション メッセージ再試行</li></ul><p>トランザクション メッセージの活用と、オンプレミス製品 MSMQ についてご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスのメッセージの種類についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-AOAI/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-AOAI/</id>
    <published>2024-04-05T07:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.191Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！ Azure Integration サポート チームの山田です。<br>今回は、Azure Logic Apps でパブリック プレビューとなっている Azure OpenAI コネクタを利用する方法を、英語記事を引用する形でご紹介いたします。</p><p>参考: <a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> </p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー<ul><li>紹介</li><li>ワークフロー</li><li>認証</li><li>その他のリソース</li></ul></li><li>まとめ</li></ul><h2 id="Standard-Logic-Apps-で-Azure-OpenAI-アプリ内コネクタがパブリック-プレビュー"><a href="#Standard-Logic-Apps-で-Azure-OpenAI-アプリ内コネクタがパブリック-プレビュー" class="headerlink" title="Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー"></a>Standard Logic Apps で Azure OpenAI アプリ内コネクタがパブリック プレビュー</h2><h3 id="紹介"><a href="#紹介" class="headerlink" title="紹介"></a>紹介</h3><p>「<a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a>」</p><p>この記事は、Azure OpenAI と Azure AI Search の2つの新しい組み込みコネクタの紹介記事です。</p><blockquote><p>Azure OpenAI と AI Search を使用することで、Logic Apps 内で Azure Open-AI と AI Search サービスによって提供されるジェネレーティブ AI 機能とエンタープライズ データとサービスを統合し、強力な自動化を構築できるようになります。</p></blockquote><blockquote><p>これらの新しいコネクタは、接続キー、AAD、マネージド ID など複数の認証タイプをサポートしているほか、ファイアウォール内で Azure OpenAI および Azure Search エンドポイントへの接続もサポートしています。</p></blockquote><h3 id="ワークフロー"><a href="#ワークフロー" class="headerlink" title="ワークフロー"></a>ワークフロー</h3><blockquote><p>Azure OpenAI Service は、GPT-4、GPT-4 Turbo with Vision、GPT-3.5-Turbo、Embeddings モデルシリーズを含む OpenAI の強力な言語モデルへのアクセスを提供します。</p></blockquote><p>以下のようなアクションが用意されています。</p><ul><li>Gets multiple embeddings</li><li>Gets a single embedding</li><li>Gets the chat completions</li></ul><p>ここでは 「Gets the chat completions」 でチャット メッセージをやり取りしてみます。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-1.png"></p><p>パラメーター The Deployment Identifier は Azure OpenAI の「デプロイ名」と対応します。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-4.png"></p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-5.png"></p><p>Message Item には以下形式でチャット メッセージを入力します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot;: &quot;こんにちは！Logic Apps はどんなところが便利ですか？&quot;,</span><br><span class="line">    &quot;role&quot;: &quot;user&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のようにメッセージが返ってきました。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-3.png"></p><h3 id="認証"><a href="#認証" class="headerlink" title="認証"></a>認証</h3><p>以下認証をご利用いただけます。</p><p><img src="/blog/LogicApps/LogicApps-AOAI/LogicApps-AOAI-2.png"></p><ul><li>キーベース: キーベースの認証として Azure OpenAI サービスで生成されたキーを用います。</li><li>Azure Active Directory OAuth: テナント、クライアント識別子、パスワードなどの Active Directory パラメータを使用して、コネクタを認証できます。</li><li>マネージドID: AI サービス用にマネージド ID を作成し、その ID を使用してコネクタを認証できます。</li></ul><h3 id="その他のリソース"><a href="#その他のリソース" class="headerlink" title="その他のリソース"></a>その他のリソース</h3><p><a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> に紹介されておりますとおり、GitHub、Youtube に関連リソースがございます。</p><ul><li><a href="https://github.com/Azure/logicapps/tree/master/ai-sample">logicapps/ai-sample at master · Azure/logicapps</a></li><li><a href="https://www.youtube.com/watch?v=tiU5yCvMW9o">(240) Learn how to build AI applications using logic apps - YouTube</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584">Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)</a> の記事を基に、Standard Logic Apps でパブリック プレビューとなった Azure OpenAI アプリ内コネクタのごくシンプルなご利用方法をご紹介しました。Logic Apps のワークフローと皆様の Azure OpenAI テクノロジーの活用に、ご参考になれば幸いです。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！ Azure Integration サポート チームの山田です。&lt;br&gt;今回は、Azure Logic Apps でパブリック プレビューとなっている Azure OpenAI コネクタを利用する方法を、英語記事を引用する形でご紹介いたします。&lt;/p&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://techcommunity.microsoft.com/t5/azure-integration-services-blog/public-preview-of-azure-openai-and-ai-search-in-app-connectors/ba-p/4049584&quot;&gt;Public Preview of Azure OpenAI and AI Search in-app connectors for Logic Apps (Standard)&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Azure OpenAI" scheme="https://jpazinteg.github.io/blog/tags/Azure-OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>Start/Stop VMs v2 で Logic Apps が即時起動してしまう事象について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/startStopVmsV2ScheduleTrigger/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/startStopVmsV2ScheduleTrigger/</id>
    <published>2023-12-12T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.289Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。Azure Integration サポート チームの髙橋です。</p><p>Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策について説明します。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><ul><li>Start/Stop VMs v2 機能利用時に、Logic Apps が即時起動することを避けたい方</li><li>「繰り返し (Recurrence)」トリガーを利用している場合に、即時起動を避けたい方</li></ul><h2 id="Start-Stop-VMs-v2"><a href="#Start-Stop-VMs-v2" class="headerlink" title="Start/Stop VMs v2"></a>Start/Stop VMs v2</h2><p>Start/Stop VMs v2 につきましては、以下の公開情報やブログがあります。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/overview">Start/Stop VMs v2 の概要</a></li><li>参考ドキュメント : <a href="https://jpazpaas.github.io/blog/2021/11/29/introduce-Start-Stop-VMs-v2.html">Start/Stop VMs v2 のご紹介</a></li></ul><p>Start/Stop VMs v2 は、以下よりデプロイすることが可能です。</p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2 を Azure サブスクリプションにデプロイする</a></li><li>参考ドキュメント : <a href="/blog/main/README/">Start/Stop VMs during off-hours overview (V2)</a></li></ul><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Start/Stop VMs v2 をデプロイしますと、以下のリソースが作成されます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger01.jpg"></p><p>Logic Apps は無効化された状態でデプロイされておりますが、この状態で有効化しますとトリガーが即時に起動いたします。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger02.jpg"></p><h2 id="「繰り返し-Recurrence-」トリガーが即時起動してしまう原因"><a href="#「繰り返し-Recurrence-」トリガーが即時起動してしまう原因" class="headerlink" title="「繰り返し (Recurrence)」トリガーが即時起動してしまう原因"></a>「繰り返し (Recurrence)」トリガーが即時起動してしまう原因</h2><p>本事象は、仕様の動作になります。</p><p>Logic Apps がデプロイされた時点では、「繰り返し (Recurrence)」トリガーの [開始時刻] パラメーターが設定されていないため、<br>有効化されたタイミングで即座に実行するよう、予約済みの初回実行のジョブが既に作成されていることに起因いたします。</p><p>※ デプロイ後かつ有効化前に [開始時刻] をご設定いただいた場合でも、既にジョブが作成されておりますので、有効化後に即時起動いたします。<br>当該ツールのデプロイ方法およびトリガーの仕様に起因した事象でございます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger03.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption#add-the-recurrence-trigger">Azure Logic Apps で Recurrence トリガーを使用して繰り返しワークフローをスケジュール設定および実行する # 繰り返しトリガーを追加する</a></li></ul><p>なお、Start/Stop VMs v2 機能ではなく、Logic Apps を Azure ポータル上で手動で作成し、初めて「繰り返し (Recurrence)」トリガーを設定した場合におきましても、<br>[開始時刻] が設定されていない場合には Logic Apps 保存後に即時に起動いたします。<br>即時起動後には、設定された値に基づいてトリガーが起動いたします。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger04.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows#patterns-for-start-date-and-time">Azure Logic Apps ワークフローで繰り返し実行されるトリガーのスケジュール # 開始日時のパターン</a></li></ul><h2 id="回避策"><a href="#回避策" class="headerlink" title="回避策"></a>回避策</h2><p>以下の例では、Start/Stop VMs v2 における即時起動の回避策についてご案内いたします。<br>考え方といたしましては、デプロイ時に予約されたジョブをリセットする方法になります。</p><p>有効化する前に、トリガー名を一時的に変更し、[開始時刻] パラメーターの設定をご実施ください。<br>トリガー名を変更することにより、予約済みのジョブがリセットされ、[開始時刻] に従ってトリガーを起動するよう新しくジョブを設定することが可能です。</p><ol><li>[Start/Stop VMs during off hours - V2] をデプロイ</li><li>ロジック アプリ [ststv2_vms_Scheduled_start] を開き、ロジック アプリ デザイナーを開く</li><li>[Recurrence] トリガーにて、トリガー名を変更 (Reccurence1)</li><li>[Recurrence] トリガーにて、以下のパラメーターを変更 (開始時刻は変更必須ですが、「設定時刻 (時間)」および「設定時刻 (分)」は必要に応じて変更ください。)<br>・タイム ゾーン : (UTC+09:00) 大阪、札幌、東京<br>・設定時刻<br>・開始時刻: 2022-11-06T14:00:00 (過去、未来いずれも設定いただくことが可能です。詳細については、下記の資料をご参考ください)</li></ol><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/concepts-schedule-automated-recurring-tasks-workflows#patterns-for-start-date-and-time">Azure Logic Apps ワークフローで繰り返し実行されるトリガーのスケジュール # 開始日時のパターン</a><br>※ 開始時刻の項目は [Add new parameter] より追加いただけます。<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger05.jpg"></li></ul><p><strong>タイムゾーンを指定した場合、[開始時刻] の最後に「Z」は不要です。</strong><br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger06.jpg"></p><ul><li>参考ドキュメント : <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption#add-the-recurrence-trigger">Azure Logic Apps で Recurrence トリガーを使用して繰り返しワークフローをスケジュール設定および実行する # 繰り返しトリガーを追加する</a></li></ul><ol start="5"><li>ワークフローを保存<br><img src="/blog/LogicApps/startStopVmsV2ScheduleTrigger/startStopVmV2ScheduleTrigger07.jpg"></li><li>[Recurrence] トリガーのトリガー名を戻し、改めてワークフローを保存 (動作上、戻す必要はありません)</li><li>VM 指定のコードを編集し、ワークフローを保存</li><li>有効化</li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策についてご案内いたしました。<br>本記事が少しでもお役に立ちましたら幸いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p>以下、「繰り返し (Recurrence)」トリガーに関連した記事になります。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/">Logic Apps で日付や時刻を判定してワークフローを制御する</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは。Azure Integration サポート チームの髙橋です。&lt;/p&gt;
&lt;p&gt;Start/Stop VMs v2 機能利用時に、Logic Apps を有効化すると即時で起動してしまう原因と、回避策について説明します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trigger" scheme="https://jpazinteg.github.io/blog/tags/Trigger/"/>
    
  </entry>
  
  <entry>
    <title>Azure Portal からファイアウォール設定配下のストレージ アカウントに Standard Logic Apps を作成する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLAPortal/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLAPortal/</id>
    <published>2023-12-05T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.218Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。<br>以前、ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内いたしました。</p><p><a href="https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/">ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成</a></p><p>今回は、Azure Portal から手動で Standard タイプの Logic Apps をファイアウォール配下のストレージ アカウント配下に接続する方法についてご案内します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>Standard Logic Apps のデプロイ</li><li>ストレージ アカウントの設定</li><li>VNet 統合の設定</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>本ブログ記事の前提として、予め VNet を作成し、サブネットを二つ用意いたします。これは、ストレージ アカウント側のプライベート エンドポイントと Standard Logic Apps 側の VNet 統合で利用するものになります。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/virtual-network/manage-virtual-network">仮想ネットワークの作成、変更、削除</a><br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image001.png"> </li></ul><p>ストレージ アカウントについては汎用 V2 アカウントを利用します。その為、ストレージ アカウントが汎用 V1 の場合は以下のようにストレージ アカウントの種類を変更いたします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-account-upgrade?tabs=azure-portal">汎用 v2 ストレージ アカウントにアップグレードする</a><br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image002.png"> </li></ul><p>また、Standard Logic Apps をデプロイするまでは、対象のストレージ アカウントについてはパブリック アクセスを許可しておく必要がございます。<br>プライベート エンドポイントの作成や VNet 統合の設定については本記事の中で説明します。</p><h2 id="Standard-Logic-Apps-のデプロイ"><a href="#Standard-Logic-Apps-のデプロイ" class="headerlink" title="Standard Logic Apps のデプロイ"></a>Standard Logic Apps のデプロイ</h2><p>始めに、Azure Portal の [ロジック アプリ] のメニューより、Standard Logic Apps のリソースをデプロイします。リージョンや 価格プランなどは任意ですが、[プラン] - [プランの種類] は 消費ではなく Standard を選択してください。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image003.png"> </p><p>ホスティング タブではストレージ アカウントを指定する画面になりますが、こちらはお客様の任意のストレージ アカウントを選択してください。<br>本例では新規作成し、作成後にストレージ アカウントの種類を汎用 V2 に変更します。（Standard Logic Apps のリソース作成画面で構築するストレージ アカウントについては、2023 年 12 月現在で汎用 V1 で作成されるため。）<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image004.png"> </p><p>ネットワーク、監視、タグについては本例ではデフォルトのまま設定し、[確認および作成] 画面にてリソースを作成します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image005.png"> </p><p>以下のように Standard Logic Apps のリソースが構築できていれば完了です。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image006.png"> </p><h2 id="ストレージ-アカウントの設定"><a href="#ストレージ-アカウントの設定" class="headerlink" title="ストレージ アカウントの設定"></a>ストレージ アカウントの設定</h2><p>次に、ストレージ アカウントの種類を汎用 V2 に変更した後、ファイアウォール設定およびプライベート エンドポイントの設定を実施します。今回は、パブリック ネットワーク アクセスを [無効] に設定します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image007.png"> </p><p>このタイミングで少し時間を置き、Standard Logic Apps を再起動すると、以下のように概要画面で接続エラーが発生するかと思います。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image008.png"> </p><p><code>System.Private.CoreLib: Access to the path &#39;C:\home\data\Functions\secrets\Sentinels&#39; is denied.</code></p><p>このメッセージは、Standard Logic Apps がネットワークのルーティングやアプリケーション設定など、何らかの原因でストレージ アカウントに正しく接続できていない為に発生するエラーとなります。<br>その為、当該エラーメッセージが確認された際には、Standard Logic Apps が正しくストレージ アカウントに疎通できるようなネットワーク設定になっているかを確認いただく必要がございますので、参考までに言及いたします。<br>今回の記事ではこれからプライベート エンドポイントを設定してまいりますのでこちらは想定される通りのエラー メッセージとなります。</p><p>次に、ストレージ アカウントにプライベート エンドポイントを設定します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image009.png"> </p><p>プライベート エンドポイントについては、前回の記事でもご案内しました通り、[blob] [table] [queue] [file] の四つが必須になります。GUI ではこれらを一度に作成することが出来ませんので、お手数ですが、それぞれに対してのリソース作成操作をお願いします。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/storage/common/storage-private-endpoints">Azure Storage のプライベート エンドポイントを使用する</a></li></ul><p>＜設定例＞<br>・対象サブリソースを選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image010.png"></p><p>・サブネットを選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image011.png"></p><p>・プライベート DNS 統合を実施するか選択する。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image012.png"></p><p>全てのプライベート エンドポイントが設定できると以下のように四つリソースが表示されます（プライベート エンドポイント名は任意）。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image013.png"></p><p>以上でストレージ アカウント側の設定は完了です。なお、環境変数の “WEBSITE_CONTENTSHARE” に指定しているファイル共有がストレージ アカウントのファイル共有に存在している必要が有りますのでご留意ください。</p><h2 id="VNet-統合の設定"><a href="#VNet-統合の設定" class="headerlink" title="VNet 統合の設定"></a>VNet 統合の設定</h2><p>次に、Standard Logic Apps のリソースの画面に遷移し、[設定] - [ネットワーク] より、[送信トラフィックの構成] の [仮想ネットワーク統合] のリンク (未構成) を選択します。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image014.png"></p><p>その後、[仮想ネットワーク統合の追加] ボタンを選択し、任意のサブネットを選択し、[接続] ボタンを選択します。その際、空のサブネットを選択する必要がございますのでご留意ください。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image015.png"></p><p>以下のような画面が表示されましたら設定は完了です。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image016.png"></p><p>最後に、VNet 統合にかかる環境変数の設定を行い、画面下部の [適用] ボタンを選択して保存します。<br>Standard Logic Apps の [設定] - [環境変数] より、[アプリ設定] を選択し、以下の値を設定します。<br><strong>・設定値：WEBSITE_CONTENTOVERVNET</strong><br><strong>・値：1</strong></p><p><img src="/blog/LogicApps/SecBlobStandardLAPortal/image017.png"></p><p>こちらは Standard Logic Apps が接続するストレージ アカウントが VNet に制限されている場合に設定する値となります。詳しくは以下の App Service の環境変数に関する公開情報をご覧ください。<br><a href="https://learn.microsoft.com/ja-jp/azure/app-service/reference-app-settings?tabs=kudu,dotnet#networking">Azure App Service の環境変数とアプリ設定</a></p><p>環境変数を保存し、少し時間を置いて概要画面より [最新の情報に更新] ボタンにて画面を更新すると、最初に表示されていたエラーメッセージ (System.Private.CoreLib: Access to the path ‘C:\home\data\Functions\secrets\Sentinels’ is denied.) が表示されなくなり、Standard Logic Apps のワークフローの作成や実行が可能となります。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image018.png"></p><p>ワークフローも問題なく作成できることを確認。<br><img src="/blog/LogicApps/SecBlobStandardLAPortal/image019.png"></p><p><img src="/blog/LogicApps/SecBlobStandardLAPortal/image020.png"></p><p>以上の手順にて、ファイアウォール設定配下のストレージ アカウントに Standard Logic Apps を作成することが可能でございます。<br>ただし、前回との違いについては、Standard Logic Apps を作成する際に、事前にストレージ アカウントのパブリック アクセスを許可しておく必要が有ります。<br>前回は既にファイアウォール設定を有効化しているストレージ アカウントに対してデプロイを実施しておりましたが、Azure Portal より新規で Standard Logic Apps を構築する際は、ストレージ アカウントを予めパブリック アクセスが可能な状態とし、Standard Logic Apps をデプロイしてから、ファイアウォール設定やプライベート エンドポイントの設定、VNet 統合の設定を有効化する必要がございますので予めご留意ください。</p><p>なお、上記の手順についてはあくまでも本記事におけるサンプルとなります。<br>商用環境でご利用いただく場合につきましては、お客様の責任において十分に設計および検証をいただいたうえで採用要否について判断をいただければと存じます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>前提条件</li><li>Standard Logic Apps のデプロイ</li><li>ストレージ アカウントの設定</li><li>VNet 統合の設定</li><li>まとめ</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。&lt;br&gt;以前、ARM テンプレートを用いて ファイアウォール設定を有効にした既存のストレージ アカウント配下に Standard Logic Apps を構築する方法についてご案内いたしました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jpazinteg.github.io/blog/LogicApps/SecBlobStandardLA/&quot;&gt;ファイアウォール設定配下の既存ストレージ アカウントに Standard Logic Apps を作成&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今回は、Azure Portal から手動で Standard タイプの Logic Apps をファイアウォール配下のストレージ アカウント配下に接続する方法についてご案内します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Standard Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Standard-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps の調査時にサポート エンジニアへ連携するログの取得方法について</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/TroubleLogCollection/</id>
    <published>2023-11-30T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.252Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>お客様環境の Logic Apps にて障害や何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。<br>今回は、取得いただきたいログの内容と、その取得方法についてご案内申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>従量課金タイプの場合</li><li>Standard タイプの場合</li><li>その他関連ログ</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>まず、本 Logic Apps 製品のお問合せをいただく場合、Azure Portal にログインいただいたうえで、事象の発生しているサブスクリプションからお問合せいただきますようお願いいたします。<br>Unified 契約や Azure 製品のサポート受けられる適切なサポート契約をお持ちの場合でも、M365 管理ポータルや直接電話でのお問合せなど Azure Portal 以外からお問合せいただくと詳細な調査が出来ませんので、その際は別途 Azure Portal からお問合せいただくようお願いさせていただく場合がございます。<br>また、弊社にて詳細ログを調査するためには事象発生から 28 日以内にログを提供いただきますようお願いいたします。28 日を経過すると詳細な調査が出来ない場合がございますので予めご留意ください。</p><h2 id="従量課金タイプの場合"><a href="#従量課金タイプの場合" class="headerlink" title="従量課金タイプの場合"></a>従量課金タイプの場合</h2><p>従量課金タイプの場合、以下の情報についてご提供をお願いいたします。</p><ol><li>当該 Azure のサブスクリプション ID</li><li>当該ロジック アプリのリソース情報</li><li>当該ロジック アプリの識別子</li><li>当該ロジック アプリの実行時間</li><li>当該ロジック アプリの入出力のスクリーンショット</li><li>当該ロジック アプリの未加工入出力</li><li>当該ロジック アプリのコードビュー</li></ol><p>それでは取得方法についてご案内申し上げます。</p><h3 id="1．当該-Azure-のサブスクリプション-ID"><a href="#1．当該-Azure-のサブスクリプション-ID" class="headerlink" title="1．当該 Azure のサブスクリプション ID"></a>1．当該 Azure のサブスクリプション ID</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該 Azure のサブスクリプション ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] より、概要欄のサブスクリプション ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image001.png"></p><h3 id="2．当該ロジック-アプリのリソース情報"><a href="#2．当該ロジック-アプリのリソース情報" class="headerlink" title="2．当該ロジック アプリのリソース情報"></a>2．当該ロジック アプリのリソース情報</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該のリソース ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [設定 - プロパティ] に遷移いただき「リソース ID」に設定されているリソース ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image002.png"></p><h3 id="3-当該ロジック-アプリの識別子"><a href="#3-当該ロジック-アプリの識別子" class="headerlink" title="3. 当該ロジック アプリの識別子"></a>3. 当該ロジック アプリの識別子</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの識別子については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴の [識別子] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image003.png"></p><h3 id="4-当該ロジック-アプリの実行時間"><a href="#4-当該ロジック-アプリの実行時間" class="headerlink" title="4. 当該ロジック アプリの実行時間"></a>4. 当該ロジック アプリの実行時間</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの実行時間については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴の [開始時間] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image004.png"></p><h3 id="5-当該ロジック-アプリの入出力のスクリーンショット"><a href="#5-当該ロジック-アプリの入出力のスクリーンショット" class="headerlink" title="5. 当該ロジック アプリの入出力のスクリーンショット"></a>5. 当該ロジック アプリの入出力のスクリーンショット</h3><p><u><strong>提供方法：イメージ形式</strong></u><br>当該ロジック アプリの入出力のスクリーンショットについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴を選択し、[ロジック アプリの実行] にて対象のアクションを展開いただき、対象アクションの入力と出力が表示されているスクリーンショットを取得します。アクションの全体が分かるように取得いただきますようお願いします。</p><p>例 1<br><img src="/blog/LogicApps/TroubleLogCollection/image005.png"></p><p>例 2<br><img src="/blog/LogicApps/TroubleLogCollection/image006.png"></p><p>例 3<br><img src="/blog/LogicApps/TroubleLogCollection/image006-1.png"></p><h3 id="6-当該ロジック-アプリの未加工入出力"><a href="#6-当該ロジック-アプリの未加工入出力" class="headerlink" title="6. 当該ロジック アプリの未加工入出力"></a>6. 当該ロジック アプリの未加工入出力</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの未加工入出力については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] よりエラーの発生した実行履歴を選択し、[ロジック アプリの実行] にて対象のアクションを展開いただき、対象アクションの入力及び出力にて [未加工入力の表示]、[未加工出力の表示] を押下いただき出力されるテキストの内容をご確認下さい。未加工出力が存在していない場合、その旨をご連絡ください。</p><p>・未加工入力の表示（未加工出力の表示がある場合はそちらも）のリンクを選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image007.png"></p><p>・表示されているテキストの情報を全てコピーしてテキストファイルなどに貼り付けます。<br><img src="/blog/LogicApps/TroubleLogCollection/image008.png"></p><h3 id="7-当該ロジック-アプリのコードビュー"><a href="#7-当該ロジック-アプリのコードビュー" class="headerlink" title="7. 当該ロジック アプリのコードビュー"></a>7. 当該ロジック アプリのコードビュー</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリのコードビューについて、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [開発ツール - ロジック アプリ コード ビュー] にて表示されますコード全文をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image009.png"></p><p>以上を取得できましたら、弊社サポート エンジニアより連携させていただきます ファイル アップロード サイトにログをアップロード頂きますようお願いいたします。<br>従量課金タイプのログ取得については以上となります。</p><p>続いて、Standard タイプの Logic Apps に関するログの提供依頼についてご案内申し上げます。</p><h2 id="Standard-タイプの場合"><a href="#Standard-タイプの場合" class="headerlink" title="Standard タイプの場合"></a>Standard タイプの場合</h2><p>Standard タイプの場合、以下の情報についてご提供をお願いいたします。<br>ただし、Standard タイプの場合はステートフルのワークフローを利用しているとログが出力されませんので予めご留意ください。</p><ol><li>当該 Azure のサブスクリプション ID</li><li>当該ロジック アプリのリソース情報</li><li>当該ロジック アプリの識別子</li><li>当該ロジック アプリの実行時間</li><li>当該ロジック アプリの入出力のスクリーンショット</li><li>当該ロジック アプリの未加工入出力</li><li>当該ロジック アプリのコンテンツ</li></ol><p>それでは取得方法についてご案内申し上げます。</p><h3 id="1．当該-Azure-のサブスクリプション-ID-1"><a href="#1．当該-Azure-のサブスクリプション-ID-1" class="headerlink" title="1．当該 Azure のサブスクリプション ID"></a>1．当該 Azure のサブスクリプション ID</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該 Azure のサブスクリプション ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] より、概要欄のサブスクリプション ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image013.png"></p><h3 id="2．当該ロジック-アプリのリソース情報-1"><a href="#2．当該ロジック-アプリのリソース情報-1" class="headerlink" title="2．当該ロジック アプリのリソース情報"></a>2．当該ロジック アプリのリソース情報</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該のリソース ID については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [設定 - プロパティ] に遷移いただき「リソース ID」に設定されているリソース ID をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image014.png"></p><h3 id="3-当該ロジック-アプリの識別子-1"><a href="#3-当該ロジック-アプリの識別子-1" class="headerlink" title="3. 当該ロジック アプリの識別子"></a>3. 当該ロジック アプリの識別子</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの識別子については、 [Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴の [識別子] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image015.png"></p><h3 id="4-当該ロジック-アプリの実行時間-1"><a href="#4-当該ロジック-アプリの実行時間-1" class="headerlink" title="4. 当該ロジック アプリの実行時間"></a>4. 当該ロジック アプリの実行時間</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの実行時間については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴の [開始時間] をご確認下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image016.png"></p><h3 id="5-当該ロジック-アプリの入出力のスクリーンショット-1"><a href="#5-当該ロジック-アプリの入出力のスクリーンショット-1" class="headerlink" title="5. 当該ロジック アプリの入出力のスクリーンショット"></a>5. 当該ロジック アプリの入出力のスクリーンショット</h3><p><u><strong>提供方法：イメージ形式</strong></u><br>当該ロジック アプリの入出力のスクリーンショットについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴を選択し、対象のアクションを展開いただき、対象アクションの入力と出力が表示されているスクリーンショットを取得します。画面の下部に見切れている部分も含めて、アクションの全体が分かるように取得いただきますようお願いします。</p><p>例 1<br><img src="/blog/LogicApps/TroubleLogCollection/image018.png"></p><p>例 2<br><img src="/blog/LogicApps/TroubleLogCollection/image019.png"></p><h3 id="6-当該ロジック-アプリの未加工入出力-1"><a href="#6-当該ロジック-アプリの未加工入出力-1" class="headerlink" title="6. 当該ロジック アプリの未加工入出力"></a>6. 当該ロジック アプリの未加工入出力</h3><p><u><strong>提供方法：テキスト形式</strong></u><br>当該ロジック アプリの未加工入出力については、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [ワークフロー - ワークフロー] - [&lt;対象の ワークフロー&gt;] よりエラーの発生した実行履歴を選択し、対象のアクションを展開いただき、対象アクションの入力及び出力にて [未加工入力の表示]、[未加工出力の表示] を押下いただき出力されるテキストの内容をご確認下さい。未加工出力が存在していない場合、その旨をご連絡ください。</p><p>・未加工入力の表示（未加工出力の表示がある場合はそちらも）のリンクを選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image026.png"></p><p>・表示されているテキストの情報を全てコピーしてテキスト ファイルなどに貼り付けます。<br><img src="/blog/LogicApps/TroubleLogCollection/image027.png"></p><h3 id="7-当該ロジック-アプリのコンテンツ"><a href="#7-当該ロジック-アプリのコンテンツ" class="headerlink" title="7. 当該ロジック アプリのコンテンツ"></a>7. 当該ロジック アプリのコンテンツ</h3><p><u><strong>提供方法：圧縮ファイル形式</strong></u><br>当該ロジック アプリのコンテンツについては、[Azure ポータル] - [Logic Apps] - [&lt;対象の Logic App&gt;] - [概要] - [アプリ コンテンツのダウンロード]より、アプリ設定を含めたコンテンツ一式の圧縮ファイルを提供下さい。<br><img src="/blog/LogicApps/TroubleLogCollection/image028.png"></p><p><img src="/blog/LogicApps/TroubleLogCollection/image029.png"></p><h2 id="その他関連ログ"><a href="#その他関連ログ" class="headerlink" title="その他関連ログ"></a>その他関連ログ</h2><p>必要に応じて、お客様のブラウザの操作における HAR ファイルや Standard Logic Apps のネットワーク キャプチャを取得いただく場合がございます。<br>その際の取得方法について、以下に記載いたしますので参考までにご確認下さい。</p><h3 id="HAR-ファイルの取得依頼"><a href="#HAR-ファイルの取得依頼" class="headerlink" title="HAR ファイルの取得依頼"></a>HAR ファイルの取得依頼</h3><p><u><strong>提供方法：har 拡張子の形式</strong></u></p><ol><li><p>Microsoft Edge を起動します。</p></li><li><p>[F12] キーを押下し、表示されるペイン内にて、[Network] タブに移動して、データをキャプチャーしていることを確認します。<br>※ 以下のように、赤い丸が表示されておりましたら、キャプチャーが開始されております。<br><img src="/blog/LogicApps/TroubleLogCollection/image010.png"></p></li><li><p>[ログの保持 (もしくは Preserve log) ] にチェックを入れます。その後、以下のボタンをクリックして、現在のログを削除します。<br><img src="/blog/LogicApps/TroubleLogCollection/image011.png"></p></li><li><p>今回事象の発生している動作や、弊社サポートより連携させていただいた操作を実施し、結果を確認します。</p></li><li><p>[Network] タブに戻り、[Export HAR] をクリックします。<br><img src="/blog/LogicApps/TroubleLogCollection/image012.png"></p></li></ol><p>エクスポートした HAR ファイルを弊社までお寄せください。</p><h3 id="Standard-Logic-Apps-のパケットキャプチャ"><a href="#Standard-Logic-Apps-のパケットキャプチャ" class="headerlink" title="Standard Logic Apps のパケットキャプチャ"></a>Standard Logic Apps のパケットキャプチャ</h3><p><u><strong>提供方法：圧縮ファイル形式</strong></u></p><ol><li><p>以下のサイトより、「使ってみる」ボタンを押下し、事象の発生している Standard Logic Apps を参照可能なユーザーでサインインします。<br><a href="https://learn.microsoft.com/ja-jp/rest/api/appservice/web-apps/start-network-trace?tabs=HTTP">Web Apps - Start Network Trace</a><br><img src="/blog/LogicApps/TroubleLogCollection/image020.png"></p></li><li><p>ネットワーク キャプチャの採取を開始します。設定項目については公開情報にも記載がございますが以下の通りとなります。<br>設定できましたら、画面下部の「実行」ボタンを押下します。</p></li></ol><p>・name : Standard Logic Apps の名前<br>・resourceGroupName : Standard Logic Apps が存在するリソース グループ名<br>・subscriptionId : Standard Logic Apps が存在するサブスクリプション ID<br>・api-version : 変更なし<br><img src="/blog/LogicApps/TroubleLogCollection/image021.png"></p><ol start="3"><li><p>対象の Standard Logic Apps を開き、ワークフローを実行して事象を再現します。</p></li><li><p>ワークフローの実行が完了しましたら、以下のサイトより、「使ってみる」ボタンを押下し、ネットワーク キャプチャの採取を終了します。こちらも設定項目は同様でございます。<br><a href="https://learn.microsoft.com/ja-JP/rest/api/appservice/web-apps/stop-network-trace?tabs=HTTP">Web Apps - Stop Network Trace</a></p></li><li><p>ネットワーク キャプチャを取得します。<br>[ロジック アプリ] - [&lt;対象の ロジック アプリ&gt;] - [開発ツール - 高度なツール] と遷移し、「移動」ボタンを押下して Kudu を開きます。<br><img src="/blog/LogicApps/TroubleLogCollection/image022.png"></p></li><li><p>Kudu にログインできましたら、画面上部より「Debug console &gt; CMD」を選択します。<br><img src="/blog/LogicApps/TroubleLogCollection/image023.png"></p></li><li><p>停止いただくと、以下の通り / LogFiles / networktrace 内に Zip ファイルが生成されますので、出力されたファイル全てダウンロードします。<br><img src="/blog/LogicApps/TroubleLogCollection/image024.png"></p></li><li><p>ファイルのダウンロードは以下の通り画面左のダウンロード アイコンからお願いいたします。<br><img src="/blog/LogicApps/TroubleLogCollection/image025.png"></p></li></ol><p>ダウンロードした圧縮ファイルを弊社までお寄せください。</p><p>なお、上記でご案内いたしましたログについては、テキスト ファイルに個別に分割いただいても構いませんし、Excel ファイルにまとめていただいても結構でございますが、Word ファイルにまとめられると容量の都合上内容を確認出来ない場合がございますので、可能な限り Word での提供は避けていただけると幸いでございます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。Logic Apps の調査をご依頼の際はこちらの内容を基に本テクニカルサポートへお問合せいただければと思います。</p><ul><li>前提条件</li><li>従量課金タイプの場合</li><li>Standard タイプの場合</li><li>その他関連ログ</li><li>まとめ</li></ul><p>最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;お客様環境の Logic Apps にて障害や何らかの問題が発生した際に、本テクニカル サポートとしましてお客様にログの採取をお願いする場合がございます。&lt;br&gt;今回は、取得いただきたいログの内容と、その取得方法についてご案内申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Trouble" scheme="https://jpazinteg.github.io/blog/tags/Trouble/"/>
    
    <category term="Log" scheme="https://jpazinteg.github.io/blog/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>MSMQ で End2End ログを取得する手順</title>
    <link href="https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/"/>
    <id>https://jpazinteg.github.io/blog/MSMQ/MsmqEnd2Endlog/</id>
    <published>2023-11-26T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.303Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 山田 です。<br>Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスにて、調査時に有用な End2End ログを有効化する手順、取得する手順についてご紹介します。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>MSMQ について</li><li>MSMQ の End2End ログを有効化する</li><li>MSMQ の End2End ログを取得する</li><li>まとめ</li></ul><h2 id="MSMQ-について"><a href="#MSMQ-について" class="headerlink" title="MSMQ について"></a>MSMQ について</h2><p>MSMQ とは、弊社が提供するオンプレミス製品のメッセージ キューイング サービスです。</p><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms711472(v=vs.85)">Message Queuing (MSMQ)</a></li></ul><blockquote><p>Message Queuing (MSMQ) technology enables applications running at different times to communicate across heterogeneous networks and systems that may be temporarily offline. Applications send messages to queues and read messages from queues. </p></blockquote><blockquote><p>(翻訳) メッセージ キューイング（MSMQ）技術は、異なる時間に実行されるアプリケーションが、異種ネットワークや一時的にオフラインになる可能性のあるシステム間で通信することを可能にします。アプリケーションはキューにメッセージを送信し、キューからメッセージを読み取ります。</p></blockquote><ul><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCheckInstall/">MSMQ を有効化する手順・メッセージを送受信する手順 | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/MSMQ/MsmqCleanInstall/">MSMQ をドメイン モードでインストールする手順について | Japan Azure Integration Support Blog</a> </li></ul><p>上記にもご案内がございます。</p><h2 id="MSMQ-の-End2End-ログを有効化する"><a href="#MSMQ-の-End2End-ログを有効化する" class="headerlink" title="MSMQ の End2End ログを有効化する"></a>MSMQ の End2End ログを有効化する</h2><p>End2End ログは [コンピューターの管理]-[システム ツール]-[アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から ご確認いただけます。</p><ol><li>対象の端末でイベント ビューアーを開きます。ショートカット キー「Windows + X」を押下後に「V」を押下しますと、「イベント ビューアー」が開きます。</li><li>左側のメニューから [アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から End2End に移動します。</li><li>画面右側の [操作] から [プロパティ] を選択します。</li><li>[ログを有効にする] にチェックを入れ、最大ログ サイズに 100MB 程度を入力し、[必要に応じてイベントを上書きする (最も古いイベントから)] にチェックを入れます。</li><li>[OK] を選択します。</li></ol><p><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-1.png"></p><p>以上にて End2End ログが有効化されます。</p><h2 id="MSMQ-の-End2End-ログを取得する"><a href="#MSMQ-の-End2End-ログを取得する" class="headerlink" title="MSMQ の End2End ログを取得する"></a>MSMQ の End2End ログを取得する</h2><p>続いて End2End ログ取得手順です。</p><ol><li>対象の端末でイベント ビューアーを開きます。ショートカット キー「Windows + X」を押下後に「V」を押下しますと、「イベント ビューアー」が開きます。</li><li>左側のメニューから [アプリケーションとサービス ログ]-[Microsoft]-[Windows]-[MSMQ] から End2End に移動します。</li><li>画面右側の [操作] から [すべてのイベントを名前を付けて保存] を選択します。</li><li>[ファイルの種類] が [*.evtx] であることを確認し、ファイルの出力先を指定し、任意のファイル名を入力し、[保存] を選択します。</li><li>[これらの言語についての表示情報] にチェックを入れ、表示情報に 日本語 または 英語 にチェックが入っていることを確認し、[OK] を選択します。</li></ol><p><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-2.png"><br><img src="/blog/MSMQ/MsmqEnd2Endlog/MsmqEnd2Endlog-3.png"></p><p>以上にて End2End ログを取得いただけます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしました。</p><ul><li>MSMQ について</li><li>MSMQ の End2End ログを有効化する</li><li>MSMQ の End2End ログを取得する</li></ul><p>End2End ログは既定で無効化状態となり、調査対象の事象発生時に End2End ログが有効でない場合、ログが収集できていない状況と想定されます。</p><p>オンプレミス製品 MSMQ についてもしもの時のご理解の一助として、本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 山田 です。&lt;br&gt;Azure Integration サポート チームでは Azure 製品以外にもオンプレミス製品を取り扱っております。今回は Windows に含まれる MSMQ というサービスにて、調査時に有用な End2End ログを有効化する手順、取得する手順についてご紹介します。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="MSMQ" scheme="https://jpazinteg.github.io/blog/tags/MSMQ/"/>
    
  </entry>
  
  <entry>
    <title>Google Sheets コネクタで行 ID を取得する方法</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/HowToGetRowIdGS/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/HowToGetRowIdGS/</id>
    <published>2023-11-19T15:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.159Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！Azure Integration サポート チームの 川合 です。  </p><p>Logic Apps から Google Sheets に対して行の取得や更新等をされたい場合、以下の Google Sheets コネクタを利用することで実現可能です。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/">Google Sheets</a></li></ul><p>しかしながら、こちらのアクションで利用する行 ID については、本日現在（2023 年 11 月現在）でプルダウンのようにシステム上で動的に指定が出来ない仕様でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image001.png"></p><p>今回は、こちらのアクションを利用するにあたり、行 ID を取得する小技についてご案内申し上げます。<br>なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提条件</li><li>Google Sheets コネクタの設定</li><li>アレイのフィルター処理</li><li>まとめ</li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の手順を実施する前に、Google Sheets 上に “__PowerAppsId__“ という行 ID を格納する列が必要となります。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image003.png"></p><p>こちらの列については手動で作成いただかなくても、行の挿入アクションで行を挿入した際に自動的に挿入される列となります。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/#%E8%A1%8C%E3%81%AE%E6%8C%BF%E5%85%A5">Google Sheets # 行の挿入</a></li></ul><p>また、こちらの値についてはランダムに設定される値となります。<br>以上の前提条件が整いましたら、後続のアクションの設定に移ります。</p><h2 id="Google-Sheets-コネクタの設定"><a href="#Google-Sheets-コネクタの設定" class="headerlink" title="Google Sheets コネクタの設定"></a>Google Sheets コネクタの設定</h2><p>こちらの ID についてですが、先に記載いたしました通り、行の取得アクションなどでシステムで動的な取得が出来ません。<br>その為、Google スプレッドシートの画面から値を確認し、ワークフローのアクションに手動で当該の ID を設定頂く必要がございますが、複数行を取得アクションを利用すると行 ID を取得することが可能でございます。</p><ul><li><a href="https://learn.microsoft.com/ja-JP/connectors/googlesheet/#%E8%A4%87%E6%95%B0%E8%A1%8C%E3%82%92%E5%8F%96%E5%BE%97">Google Sheets # 複数行を取得</a></li></ul><p>・コネクタの実行結果<br><img src="/blog/LogicApps/HowToGetRowIdGS/image004.png"></p><p>上記の実行結果からも分かる通り、”__PowerAppsId__“ の値がそのまま取得されるわけではなく、カンマ区切りで行番号が設定されていることが確認できます。<br>以上より、当該の行 ID が取得できますが、このままでは全ての行に対して “__PowerAppsId__“ が取得されてしまいます。<br>その為、次に記載いたします通り アレイのフィルター処理 アクションにて取得したい行の値のみを取得致します。</p><h2 id="アレイのフィルター処理"><a href="#アレイのフィルター処理" class="headerlink" title="アレイのフィルター処理"></a>アレイのフィルター処理</h2><p>Google Sheets コネクタの後続処理に “アレイのフィルター処理” アクションを設定いたします。</p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image002.png"></p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption#filter-array-action">Azure Logic Apps でデータの操作を実行する # 配列のフィルター処理アクション</a><br>上記の公開情報については比較的良く使うデータ操作のコネクタやテクニックがございますので、先頭から読み進めていただくことを推奨いたします。</li></ul><p>次に、アレイのフィルター処理アクションに以下の値を設定いたします。</p><p>＜設定値＞<br>・差出人：”動的なコンテンツ” より “レコード value” を選択<br><img src="/blog/LogicApps/HowToGetRowIdGS/image005.png"></p><p>・左辺：行の主キーになる列の値。本例では No 列を指定します。<br>・条件：特定の一行を取得する任意の条件（お客様のデータに依存）<br>・右辺：特定の一行を取得する任意の値（お客様のデータに依存）<br><img src="/blog/LogicApps/HowToGetRowIdGS/image006.png"></p><p>こちらで、一意の値のみを取得する条件を設定いただくことで、当該行の ID を取得することが可能でございます。<br>ただし、ここで注意が必要な点がございます。本例では No が数字となっておりますが、こちら “アレイのフィルター処理” アクションの右辺に直接数字を指定した場合、正常に取得できない場合がございます。<br>その場合、以下のようにコードビューにて直接 JSON の内容を修正し、シングル クォーテーションで文字を囲う必要がございますのでご留意ください。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image007.png"></p><p>また、上記のままですと行 ID のみを利用することが出来ませんので、以下のように作成アクションなど、一時的に値を格納する変数のようなアクションを利用し、JSON プロパティから値を抜き出します。<br>式関数に、以下のような値を設定することで、データの取得が可能でございます。</p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image008.png"></p><p><img src="/blog/LogicApps/HowToGetRowIdGS/image009.png"></p><p>＜式関数＞<br>body(‘アレイのフィルター処理’)?[0][‘__PowerAppsId__‘]<br>※上記式関数をブラウザ上でコピー＆ペーストした際に、文字コードの都合上そのまま利用できない場合があります。必要に応じてシングル クォーテーションを入力し直して下さい。</p><p>こちらは、body 関数でアレイのフィルター処理から Body を指定し、[0] にて 0 番目の配列を指定いたします。（アレイのフィルター処理にて配列が1つのみ取得できる前提）<br>最後に、”__PowerAppsId__“ のプロパティを指定します。</p><p>最後に、ワークフローを保存して実行すると、以下のように行 ID を取得することが可能でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image010.png"></p><p>上記の出力を基に、Google Sheets コネクタにて特定行の更新や削除など、行 ID を利用する処理を行うことが可能でございます。<br>例えば、以下図のように出力に値を設定することで特定行の取得が可能でございます。<br><img src="/blog/LogicApps/HowToGetRowIdGS/image011.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、以下についてご案内いたしましたが、ご理解いただけましたでしょうか。</p><ul><li>前提条件</li><li>Google Sheets コネクタの設定</li><li>アレイのフィルター処理</li><li>まとめ</li></ul><p>本記事が少しでもお役に立ちましたら幸いです。最後までお読みいただき、ありがとうございました！</p><p>&lt;Azure Logic Apps の参考サイト&gt;<br>– 概要 - Azure Logic Apps とは<br><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview</a><br>Azure Logic Apps とは、ロジック アプリ デザイナーでフロー チャートを用いて作成したワークフローを自動実行するソリューションです。<br>Azure Logic Apps では、条件分岐などを実装することができ、ワークフローの実行状況に応じて実行する処理を分岐することが可能です。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！Azure Integration サポート チームの 川合 です。  &lt;/p&gt;
&lt;p&gt;Logic Apps から Google Sheets に対して行の取得や更新等をされたい場合、以下の Google Sheets コネクタを利用することで実現可能です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-JP/connectors/googlesheet/&quot;&gt;Google Sheets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;しかしながら、こちらのアクションで利用する行 ID については、本日現在（2023 年 11 月現在）でプルダウンのようにシステム上で動的に指定が出来ない仕様でございます。&lt;br&gt;&lt;img src=&quot;/blog/LogicApps/HowToGetRowIdGS/image001.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;今回は、こちらのアクションを利用するにあたり、行 ID を取得する小技についてご案内申し上げます。&lt;br&gt;なお、本ブログでご案内する仕組みについてはあくまで参考情報となります。こちらをお客様の商用環境でご利用になる場合は十分にお客様環境で検証いただき、設計および製造、試験をお客様の責任で実施いただきますようお願い申し上げます。&lt;/p&gt;</summary>
    
    
    
    
    <category term="How-To" scheme="https://jpazinteg.github.io/blog/tags/How-To/"/>
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
    <category term="Google Sheets" scheme="https://jpazinteg.github.io/blog/tags/Google-Sheets/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps をこれから使い始めようという方へ</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-HeadFirst/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-HeadFirst/</id>
    <published>2023-11-10T02:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.202Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。<br>今回は Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを厳選し、引用しながら、リンク集としてご紹介いたします。</p><span id="more"></span><h2 id="こんな方におすすめです"><a href="#こんな方におすすめです" class="headerlink" title="こんな方におすすめです"></a>こんな方におすすめです</h2><p>従量課金版 Logic Apps、Standard 版 Logic Apps 合わせて、これから Azure Logic Apps を使い始めたいという方。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>Azure Logic Apps とは</li><li>コネクタとは</li><li>ワークフローとは</li><li>Standard 版 (シングルテナント) Logic Apps とは</li><li>その他</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="Azure-Logic-Apps-とは"><a href="#Azure-Logic-Apps-とは" class="headerlink" title="Azure Logic Apps とは"></a>Azure Logic Apps とは</h2><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview">概要 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Azure Logic Apps はクラウド プラットフォームであり、コードをほとんど、またはまったく使用せずに、自動化されたワークフローを作成して実行できます。 ビジュアル デザイナーを使用し、事前構築済みの操作から選択することで、アプリ、データ、サービス、システムを統合および管理するワークフローをすばやく構築できます。</p></blockquote><blockquote><p>Azure Logic Apps を使用すると、クラウド、オンプレミス、ハイブリッド環境の間でレガシ、最新、最先端のシステムを接続する方法が簡素化され、企業のシナリオと企業間 (B2B) シナリオ向けに高度にスケーラブルな統合ソリューションを開発するための、コードの記述がほとんど必要ない手段が提供されます。</p></blockquote><p>引用: <a href="https://learn.microsoft.com/ja-jp/azure/architecture/reference-architectures/enterprise-integration/basic-enterprise-integration">Azure での基本的なエンタープライズ統合 - Azure Architecture Center | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-1.png"></p><p>引用: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-overview#create-and-deploy-to-different-environments">概要 # さまざまな環境を作成してデプロイする - Azure Logic Apps | Microsoft Learn</a></p><h3 id="従量課金版-Consumption、消費、マルチテナント-Logic-Apps"><a href="#従量課金版-Consumption、消費、マルチテナント-Logic-Apps" class="headerlink" title="従量課金版 (Consumption、消費、マルチテナント) Logic Apps"></a>従量課金版 (Consumption、消費、マルチテナント) Logic Apps</h3><blockquote><p>1 つのロジック アプリではワークフローを 1 つだけ 使用できます。<br>“複数の Azure Active Directory テナントにわたる” ロジック アプリで、同じ処理 (コンピューティング)、ストレージ、ネットワークなどが共有されます。<br>冗長性のために、データはペア リージョンにレプリケートされます。 高可用性を実現するために、geo 冗長ストレージ (GRS) が有効になっています。</p></blockquote><p>メリットについて以下となります。</p><blockquote><ul><li>最も簡単に開始できる</li><li>従量課金制</li><li>フル マネージド</li></ul></blockquote><h3 id="Standard-版-シングルテナント-Logic-Apps"><a href="#Standard-版-シングルテナント-Logic-Apps" class="headerlink" title="Standard 版 (シングルテナント) Logic Apps"></a>Standard 版 (シングルテナント) Logic Apps</h3><blockquote><p>1 つのロジック アプリに、複数の “ステートフル” と “ステートレス” のワークフローを含めることができます。<br>“1 つのロジック アプリとテナント” のワークフローでは、同じ処理 (コンピューティング)、ストレージ、ネットワークなどが共有されます。<br>データはロジック アプリをデプロイしたのと同じリージョンに残ります。</p></blockquote><p>メリットについて以下となります。</p><blockquote><ul><li>シングルテナント Azure Logic Apps ランタイムを使用して実行します。 デプロイ スロットは現在サポートされていません。</li><li>大規模なスループット向上とコスト削減を実現するための追加の組み込みコネクタ</li><li>ランタイムとパフォーマンスの設定に関する制御と微調整機能の強化</li><li>仮想ネットワークとプライベート エンドポイントに対する統合サポート。</li><li>独自の組み込みコネクタの作成。</li></ul></blockquote><h2 id="コネクタとは"><a href="#コネクタとは" class="headerlink" title="コネクタとは"></a>コネクタとは</h2><p><a href="https://learn.microsoft.com/ja-jp/connectors/connectors#connector-components">コネクタの概要 | Microsoft Learn</a></p><blockquote><p>各コネクタは、アクションとトリガーに分類される一連の操作を提供します。 基盤となるサービスに接続すると、アプリやワークフロー内でこれらの操作を簡単に活用することができます。</p></blockquote><blockquote><p>アクションを使用して SQL データベース内のデータを検索、書き込み、更新、削除します。 </p></blockquote><blockquote><p>いくつかのコネクタは、特定のイベントが発生したときにアプリに通知できるトリガーを提供しています。 </p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/create-workflow-with-trigger-or-action?tabs=consumption">トリガーまたはアクションを使用してワークフローを作成する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>トリガーは、どのワークフローでも常に最初のステップであり、ワークフローが実行を開始できるようになる前に満たす条件を指定します。 トリガーの後に、ワークフローが必要なタスクを実行するには、後続のアクションを 1 つ以上追加する必要があります。 トリガーとアクションは連携して、ワークフローのロジックと構造を定義します。</p></blockquote><p>以下は 「繰り返し」 トリガー と 「パスを使用して BLOB コンテンツを取得する (V2)」 アクション の例です。</p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-create-api-azureblobstorage?tabs=consumption#add-a-blob-action">ワークフローから Azure Blob Storage に接続する - Azure Logic Apps | Microsoft Learn</a></p><p>以下からコネクタの一覧をご覧いただけます。</p><p><a href="https://learn.microsoft.com/ja-jp/connectors/">Azure Logic Apps コネクタのドキュメント - Connectors | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/connectors/connector-reference/connector-reference-logicapps-connectors">すべての Logic Apps コネクタの一覧 | Microsoft Learn</a></p><h2 id="ワークフローとは"><a href="#ワークフローとは" class="headerlink" title="ワークフローとは"></a>ワークフローとは</h2><p>ワークフロー内にて、アクションを条件に基づいて制御したり、繰り返し処理したりできます。また、式関数を用いて出力結果から値を加工して利用できます。</p><h3 id="制御"><a href="#制御" class="headerlink" title="制御"></a>制御</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-conditional-statement?tabs=consumption">ワークフローに条件を追加する - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-switch-statement">スイッチ アクションをワークフローに追加する - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-loops?tabs=consumption">アクションを繰り返すループを追加する - Azure Logic Apps | Microsoft Learn</a></p><p><img src="/blog/LogicApps/LogicApps-HeadFirst/LogicApps-HeadFirst-3.png"></p><h3 id="式関数"><a href="#式関数" class="headerlink" title="式関数"></a>式関数</h3><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference">式関数のリファレンス ガイド - Azure Logic Apps | Microsoft Learn</a></p><p><a href="https://jpazinteg.github.io/blog/LogicApps/how-to-treat-json-in-logicApps/">Azure Logic Apps で JSON オブジェクトから特定のプロパティの値を取得する方法 | Japan Azure Integration Support Blog</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-perform-data-operations?tabs=consumption">データの操作の実行 - Azure Logic Apps | Microsoft Learn</a></p><h2 id="Standard-版-シングルテナント-Logic-Apps-とは"><a href="#Standard-版-シングルテナント-Logic-Apps-とは" class="headerlink" title="Standard 版 (シングルテナント) Logic Apps とは"></a>Standard 版 (シングルテナント) Logic Apps とは</h2><p>ここまでの内容に加えて、Standard 版 Logic Apps には以下のような特長がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare#standard-logic-app-and-workflow">Azure Logic Apps でのシングルテナントとマルチテナントの比較 - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Standard ロジック アプリとワークフローには、再設計されたシングルテナント Azure Logic Apps ランタイムが使用されています。 このランタイムには Azure Functions 機能拡張モデルが使用されており、Azure Functions ランタイムの拡張機能としてホストされます。 この設計により、ロジック アプリ ワークフローの移植性、柔軟性、パフォーマンス向上に加え、Azure Functions プラットフォームと Azure App Service エコシステムから継承されたその他の機能と利点が提供されます。 </p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/single-tenant-overview-compare#stateful-stateless">ステートフルおよびステートレス ワークフロー</a></p><blockquote><p>ステートフル ワークフローでは、サービス停止が発生した場合に高い回復性を実現できます。 サービスとシステムが復元された後に、中断された実行を保存済みの状態から再構築し、ワークフローを再実行して完了することができます。 ステートフル ワークフローは、ステートレス ワークフローよりもはるかに長い間実行を継続できます。</p></blockquote><blockquote><p>各実行が完了した後に外部ストレージに前のイベントのデータを保持、確認、参照する必要がない場合は、ステートレス ワークフローを作成します。 これらのワークフローでは、各アクションとその状態の入出力を外部ストレージにではなく、”メモリ内にのみ” 保存します。 その結果、ステートレス ワークフローでは、実行時間が短縮され (通常は 5 分未満)、パフォーマンスが高速化されて応答時間が短くなり、スループットが向上し、実行コストが削減されます。</p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/secure-single-tenant-workflow-virtual-network-private-endpoint">Standard ワークフローと仮想ネットワーク間のトラフィックをセキュリティで保護する - Azure Logic Apps | Microsoft Learn</a></p><blockquote><p>Standard ロジック アプリのワークフローと Azure 仮想ネットワーク間で安全かつプライベートに通信するために、受信トラフィック用に “プライベート エンドポイント” を設定し、送信トラフィック用に仮想ネットワーク統合を使用できます。</p></blockquote><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>ほか、多くお問い合わせをいただくトピックです。</p><h3 id="制約と構成"><a href="#制約と構成" class="headerlink" title="制約と構成"></a>制約と構成</h3><p>Logic Apps を利用するうえで知っておきたい制約事項です。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-limits-and-config?tabs=consumption,azure-portal">制約と構成の参考ガイド - Azure Logic Apps | Microsoft Learn</a></p><h3 id="価格"><a href="#価格" class="headerlink" title="価格"></a>価格</h3><p>Logic Apps の利用価格です。</p><p><a href="https://azure.microsoft.com/ja-jp/pricing/details/logic-apps/">価格 - Logic Apps | Microsoft Azure</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-pricing">使用量の測定、課金、価格 - Azure Logic Apps | Microsoft Learn</a></p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>Logic Apps を学べるリソースには、以下のようなものがございます。</p><ul><li>チュートリアル<ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/tutorial-build-schedule-recurring-logic-app-workflow">スケジュールに基づいた自動化ワークフローを作成する - Azure Logic Apps | Microsoft Learn</a></li></ul></li><li>Training<ul><li><a href="https://learn.microsoft.com/ja-jp/training/paths/build-workflows-with-logic-apps/">Azure Logic Apps でデータとアプリを統合するための自動化されたワークフローを構築する - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/intro-to-logic-apps/">Azure Logic Apps の概要 - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/route-and-process-data-logic-apps/">Azure Logic Apps を使用してデータを自動的にルートし、処理する - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/logic-apps-and-custom-connectors/">カスタム コネクタを使用して Azure Logic Apps ワークフローから API を呼び出す - Training | Microsoft Learn</a></li><li><a href="https://learn.microsoft.com/ja-jp/training/modules/create-deploy-logic-apps-using-arm-templates/">Azure Resource Manager テンプレートを使用して Azure Logic Apps ワークフローを作成し、デプロイする - Training | Microsoft Learn</a></li></ul></li><li>Blog<ul><li><a href="https://jpazinteg.github.io/blog/index.html">Japan Azure Integration Support Blog</a></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを一挙にご紹介いたしました。引き続き、皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;br&gt;今回は Azure Logic Apps をこれから使い始めようという方へ、「Azure Logic Apps とは何なのか」「何ができるのか」を効率よく理解できるリソースを厳選し、引用しながら、リンク集としてご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>Logic Apps で日付や時刻を判定してワークフローを制御する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-Functions/</id>
    <published>2023-10-06T02:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.199Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2</a> をご利用いただく際に、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。</p><p>今回はそうしたときに便利な、 Logic Apps における日付や時刻の判定に使えるシナリオをご紹介いたします。</p><span id="more"></span><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>今回の記事では従量課金版 Logic Apps を利用しますが、Standard 版 Logic Apps でも問題ありません。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい</li><li>シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="シナリオ-1-平日-8-時に-VM-を起動したい。ただし-特定の日-祝日など-を除外したい"><a href="#シナリオ-1-平日-8-時に-VM-を起動したい。ただし-特定の日-祝日など-を除外したい" class="headerlink" title="シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい"></a>シナリオ 1: 平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい</h2><p>「平日 8 時に VM を起動したい。ただし 特定の日 (祝日など) を除外したい」。例としてこの場合、以下のように毎週 月曜日 ～ 金曜日 の 8:00 にワークフローを動作させるよう、繰り返しトリガーを設定しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions8.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/connectors/connectors-native-recurrence?tabs=consumption">繰り返しワークフローをスケジュール設定および実行する - Azure Logic Apps | Microsoft Learn</a></p><h3 id="トリガーの条件"><a href="#トリガーの条件" class="headerlink" title="トリガーの条件"></a>トリガーの条件</h3><p>一方トリガーには条件式というものを設定できます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions9.png"></p><p>こちらに「月曜日 ～ 金曜日、ただし 特定の日 (祝日など) を除外する」を満たす式を記述します。以下フォーラムとドキュメントを引用いたします。</p><p>参考: <a href="https://techcommunity.microsoft.com/t5/integrations-on-azure-blog/what-you-need-to-know-about-trigger-conditions/ba-p/2320757">What you need to know about trigger conditions?</a></p><blockquote><p>Trigger conditions is a trigger setting used to specify one or more conditional expressions which must be true for the trigger to fire.<br>Trigger conditions can be set using logic app designer or manually using code view; for schema reference for trigger conditions</p><ol><li>Go to your logic app.</li><li>On the trigger, click on the three dots (…) at the top right corner.</li><li>Select Settings.</li><li>Scroll down to Trigger Conditions.</li><li>Specify your conditional expression.</li><li>Click Done.</li></ol></blockquote><blockquote><p>&lt;翻訳&gt;<br>トリガーの条件は、トリガーが起動するために true でなければならない 1 つ以上の条件式を指定します。<br>トリガーの条件は、ロジック アプリ デザイナーを使用して設定することも、コード ビューを使用して手動で設定することもできます。</p><ol><li>ロジック アプリに移動します。</li><li>トリガーで、右上隅にある3つのドット(…)をクリックします。</li><li>[設定]を選択します。</li><li>[トリガー条件]まで下にスクロールします。</li><li>条件式を指定します。</li><li>[完了]をクリックします。</li></ol></blockquote><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-workflow-actions-triggers#trigger-conditions">Azure Logic Apps でのトリガーとアクションの種類のスキーマ リファレンス ガイド # トリガーの条件</a></p><blockquote><p>どのトリガーにも、ワークフローを実行するかどうかを決める条件を表した 1 つまたは複数の式を含む配列を追加できます。</p></blockquote><p>フォーラムにありますとおり、トリガーの条件を用いることで以下メリットがあります。</p><ul><li>Logic Apps のフロー自体をシンプルにできる。</li><li>条件により実行が判断されることで、不要な実行を排除でき、運用上の負担を軽減できる。</li><li>実行数を減らすことでコストを削減できる。</li></ul><h3 id="条件式"><a href="#条件式" class="headerlink" title="条件式"></a>条件式</h3><p>上記を踏まえ、「今日が 2023 年の日本の祝日ではない」という条件式を設定してみることにします。まず日本時間の「月日」 (MMdd) は以下となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;MMdd&#x27;)</span><br></pre></td></tr></table></figure><p>また例として 2023 年の日本の祝日 (MMdd) を示すアレイを作成いたしますと、以下となります。</p><p>参考: <a href="https://www8.cao.go.jp/chosei/shukujitsu/gaiyou.html">国民の祝日について - 内閣府</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">createArray(&#x27;0101&#x27;,</span><br><span class="line">            &#x27;0102&#x27;,</span><br><span class="line">            &#x27;0109&#x27;,</span><br><span class="line">            &#x27;0211&#x27;,</span><br><span class="line">            &#x27;0223&#x27;,</span><br><span class="line">            &#x27;0321&#x27;,</span><br><span class="line">            &#x27;0429&#x27;,</span><br><span class="line">            &#x27;0503&#x27;,</span><br><span class="line">            &#x27;0504&#x27;,</span><br><span class="line">            &#x27;0505&#x27;,</span><br><span class="line">            &#x27;0717&#x27;,</span><br><span class="line">            &#x27;0811&#x27;,</span><br><span class="line">            &#x27;0918&#x27;,</span><br><span class="line">            &#x27;0923&#x27;,</span><br><span class="line">            &#x27;1009&#x27;,</span><br><span class="line">            &#x27;1103&#x27;,</span><br><span class="line">            &#x27;1123&#x27;</span><br><span class="line">           )</span><br></pre></td></tr></table></figure><p>以上を用いると、「今日が 2023 年の祝日ではない」ことを表す判定式は以下となります。こちらを「トリガーの条件」欄に記載致します。「トリガーの条件」欄では式の先頭に ＠ を記載します点をご注意ください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">not(contains( </span><br><span class="line">    createArray(&#x27;0101&#x27;,</span><br><span class="line">                &#x27;0102&#x27;,</span><br><span class="line">                &#x27;0109&#x27;,</span><br><span class="line">                &#x27;0211&#x27;,</span><br><span class="line">                &#x27;0223&#x27;,</span><br><span class="line">                &#x27;0321&#x27;,</span><br><span class="line">                &#x27;0429&#x27;,</span><br><span class="line">                &#x27;0503&#x27;,</span><br><span class="line">                &#x27;0504&#x27;,</span><br><span class="line">                &#x27;0505&#x27;,</span><br><span class="line">                &#x27;0717&#x27;,</span><br><span class="line">                &#x27;0811&#x27;,</span><br><span class="line">                &#x27;0918&#x27;,</span><br><span class="line">                &#x27;0923&#x27;,</span><br><span class="line">                &#x27;1009&#x27;,</span><br><span class="line">                &#x27;1103&#x27;,</span><br><span class="line">                &#x27;1123&#x27;</span><br><span class="line">                ), </span><br><span class="line">    convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;MMdd&#x27;)</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>参考: </p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#convertFromUtc">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # convertFromUtc</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#createArray">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # createArray</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#contains">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # contains</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/workflow-definition-language-functions-reference#not">Azure Logic Apps および Power Automate のワークフロー式関数のリファレンス ガイド # not</a></li></ul><p>またここでは「日本の祝日」となる日付を静的にアレイに記述しましたが、カレンダーなどから取得して構築することも考えられます。詳細割愛いたしますが以下などがご活用いただけます。</p><p>参考: <a href="https://learn.microsoft.com/ja-jp/connectors/office365/#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC-%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97-(v3)">Office 365 Outlook - Connectors | Microsoft Learn # イベントのカレンダー ビューの取得 (V3)</a>)<br>ほか 2024 年の日本の祝日 (MMdd) を示すアレイは以下となります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">createArray(&#x27;0101&#x27;,</span><br><span class="line">            &#x27;0108&#x27;,</span><br><span class="line">            &#x27;0211&#x27;,</span><br><span class="line">            &#x27;0212&#x27;,</span><br><span class="line">            &#x27;0223&#x27;,</span><br><span class="line">            &#x27;0320&#x27;,</span><br><span class="line">            &#x27;0429&#x27;,</span><br><span class="line">            &#x27;0503&#x27;,</span><br><span class="line">            &#x27;0504&#x27;,</span><br><span class="line">            &#x27;0505&#x27;,</span><br><span class="line">            &#x27;0506&#x27;,</span><br><span class="line">            &#x27;0715&#x27;,</span><br><span class="line">            &#x27;0811&#x27;,</span><br><span class="line">            &#x27;0812&#x27;,</span><br><span class="line">            &#x27;0916&#x27;,</span><br><span class="line">            &#x27;0922&#x27;,</span><br><span class="line">            &#x27;0923&#x27;,</span><br><span class="line">            &#x27;1014&#x27;,</span><br><span class="line">            &#x27;1103&#x27;,</span><br><span class="line">            &#x27;1104&#x27;,</span><br><span class="line">            &#x27;1123&#x27;</span><br><span class="line">           )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="シナリオ-2-平日-6-時に-VM1-を起動し、8-時に-VM2-を起動したい"><a href="#シナリオ-2-平日-6-時に-VM1-を起動し、8-時に-VM2-を起動したい" class="headerlink" title="シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい"></a>シナリオ 2: 平日 6 時に VM1 を起動し、8 時に VM2 を起動したい</h2><p>「平日 6 時に VM1 を起動し、8 時に VM2 を起動したい」。例としてこの場合は、以下のように毎週 月曜日 ～ 金曜日 の 6:00、8:00 にワークフローを動作させるよう繰り返しトリガーを設定しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions7.png"></p><p>前提として、パラメーターにて VM1 を起動する際のパラメーター、VM2 を起動する際のパラメーターを作成しておきます。<br><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/create-parameters-workflows?tabs=consumption">ワークフロー入力ためのパラメーターを作成する - Azure Logic Apps | Microsoft Learn</a></p><p>またこちらも前処理として、VM の引数を格納する変数を初期化しておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions1.png"></p><p>そのうえで スイッチ を利用してまいります。スイッチするための式は、ここでは以下のようにしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convertFromUtc(UtcNow(), &#x27;Tokyo Standard Time&#x27;, &#x27;HH&#x27;)</span><br></pre></td></tr></table></figure><p>これでワークフローが動作した際の現在時刻が 6 時ならば「06」、8 時ならば「08」などという文字列が取得できます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions4.png"></p><p>踏まえ、ここではケース の判定を「”06”」と等しい場合とします。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions6.png"></p><p>ケース内では “06”、つまり 6 時に「VM1」を起動する際の引数をセットします。同様、”08” の時に「VM2」を起動する際の引数を ケース 2 にてセットすれば「平日 6 時に VM1 を起動し、8 時に VM2 を起動」という条件を利用して、日付に応じて意図した VM を起動する制御ができます。なおそのどちらにも該当しない「既定」時は、ワークフローを終了することとしておきます。</p><p><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions3.png"></p><p>例:<br><img src="/blog/LogicApps/LogicApps-Functions/LogicApps-Functions10.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/logic-apps/logic-apps-control-flow-switch-statement">スイッチ アクションをワークフローに追加する - Azure Logic Apps | Microsoft Learn</a></p><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p>ほか Logic Apps と日付関数に言及した記事には、以下のようなものがございます。</p><ul><li><a href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-DateTime/">Logic Apps で簡単に日付や時刻を用いる | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について | Japan Azure Integration Support Blog</a></li><li><a href="https://jpazinteg.github.io/blog/LogicApps/UnixTime/">Logic Apps の式関数で Unix Time を取得する方法 | Japan Azure Integration Support Blog</a></li></ul><p>今回の記事では日付に対して 6 時 や 8 時という時刻を例に紹介いたしましたが、0 時を起動時刻に設定し日付を条件判定する際には、<a href="https://jpazinteg.github.io/blog/LogicApps/ScheduleTriggerStrattime/">「繰り返し (Recurrence)」トリガーの起動時刻の差異について</a> にありますように起動時刻仕様についてもご確認いただけますと幸いです。</p><p>また今回の「Start/Stop VMs v2」に関する参考ドキュメントや記事は、以下のようなものがございます。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2 を Azure サブスクリプションにデプロイする | Microsoft Learn</a></li><li><a href="https://jpazpaas.github.io/blog/2021/11/29/introduce-Start-Stop-VMs-v2.html">Start/Stop VMs v2 のご紹介 - Japan PaaS Support Team Blog</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、<a href="https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy">Start/Stop VMs v2</a> をはじめとした繰り返しトリガー利用時に便利な、日付や時刻の判定方法についてご紹介しました。引き続き皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/ja-jp/azure/azure-functions/start-stop-vms/deploy&quot;&gt;Start/Stop VMs v2&lt;/a&gt; をご利用いただく際に、「もう少し柔軟に日付や時刻を条件判定して利用したい」というケースが多くあると思います。&lt;/p&gt;
&lt;p&gt;今回はそうしたときに便利な、 Logic Apps における日付や時刻の判定に使えるシナリオをご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
  <entry>
    <title>特定の条件の Logic Apps ワークフローや API 接続を検索する</title>
    <link href="https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/"/>
    <id>https://jpazinteg.github.io/blog/LogicApps/LogicApps-ResourceGraph/</id>
    <published>2023-09-20T02:00:00.000Z</published>
    <updated>2025-06-16T07:56:14.203Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは！  Azure Integration サポート チームの 山田 です。</p><p>今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。</p><span id="more"></span><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li>前提</li><li>シナリオ 1: 従量課金版 Logic Apps を検索する</li><li>シナリオ 2: Standard 版 Logic Apps を検索する</li><li>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</li><li>シナリオ 4: API 接続を検索する</li><li>関連ドキュメント</li><li>まとめ</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前提として、Logic Apps を含む各種リソースを検索する際は、Azure Resource Graph エクスプローラー をご利用いただけます。以下ドキュメントに概要がございます。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="シナリオ-1-従量課金版-Logic-Apps-を検索する"><a href="#シナリオ-1-従量課金版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 1: 従量課金版 Logic Apps を検索する"></a>シナリオ 1: 従量課金版 Logic Apps を検索する</h2><p>踏まえ、まずは基本として、従量課金版 Logic Apps を Azure Resource Graph エクスプローラーから検索いただく方法です。左側 カテゴリ から、「ロジック アプリ」がございます。</p><p>例として以下クエリにて、リソースが表示されます。name 列にて Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-1.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#resources</a></p><h2 id="シナリオ-2-Standard-版-Logic-Apps-を検索する"><a href="#シナリオ-2-Standard-版-Logic-Apps-を検索する" class="headerlink" title="シナリオ 2: Standard 版 Logic Apps を検索する"></a>シナリオ 2: Standard 版 Logic Apps を検索する</h2><p>さて Standard 版 Logic Apps は上と異なり、「AppServiceResources」からご覧いただけます。</p><p>例として以下クエリにて、リソースが表示されます。同じく name 列にて Standard Logic Apps 名が見つかるかと思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-2.png"></p><p>参考: <a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources">https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/reference/supported-tables-resources#appserviceresources</a></p><h2 id="シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する"><a href="#シナリオ-3-特定のコネクタを利用している-Logic-Apps-を検索する" class="headerlink" title="シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する"></a>シナリオ 3: 特定のコネクタを利用している Logic Apps を検索する</h2><p>踏まえまして、特定のコネクタを利用しているなど、プロパティに応じた Logic Apps を検索したいケースがあるかと思います。</p><p>例として以下のようなクエリにて、対象を絞り込むことができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;teams&quot; // 例として teams のコネクタを利用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line">| top 3 by name // name 列で並べた、先頭の 3 個のレコードを返す</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-4.png"></p><p>Standard Logic Apps の場合は以下のようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AppServiceResources</span><br><span class="line">| where type == &quot;microsoft.web/sites/workflows&quot;</span><br><span class="line">| where properties contains &quot;Send_an_email_(V2)&quot; // 例として Send_an_email_(V2) というアクション名を使用しているもの</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-3.png"></p><h2 id="シナリオ-4-API-接続を検索する"><a href="#シナリオ-4-API-接続を検索する" class="headerlink" title="シナリオ 4: API 接続を検索する"></a>シナリオ 4: API 接続を検索する</h2><p>さらにここまでの内容に加え、API 接続を検索するには以下クエリがご利用いただけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| extend status = tostring(properties.statuses[0].status)</span><br><span class="line">| where type == &#x27;microsoft.web/connections&#x27;</span><br><span class="line">| where status == &#x27;Error&#x27; // 例として Error 状態のもの</span><br><span class="line">| project subscriptionId, resourceGroup, apiConnection=name, id</span><br></pre></td></tr></table></figure><p><img src="/blog/LogicApps/LogicApps-ResourceGraph/LogicApps-ResourceGraph-5.png"></p><p>また上記の API 接続をもとに、対象の Logic Apps を見つけることができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resources</span><br><span class="line">| where type == &quot;microsoft.logic/workflows&quot;</span><br><span class="line">| where properties contains &quot;azureblob-24&quot; // API 接続名で検索する</span><br><span class="line">| project id, name, location, resourceGroup, subscriptionId, properties</span><br></pre></td></tr></table></figure><h2 id="関連ドキュメント"><a href="#関連ドキュメント" class="headerlink" title="関連ドキュメント"></a>関連ドキュメント</h2><p><a href="https://jpazinteg.github.io/blog/LogicApps/ApiConnectionsDelete/">Azure Logic Apps の コネクタにおける不要な接続情報の削除方法について | Japan Azure Integration Support Blog</a></p><p><a href="https://learn.microsoft.com/ja-jp/azure/governance/resource-graph/first-query-portal#run-your-first-resource-graph-query">クイック スタート:初めてのポータル クエリ - Azure Resource Graph | Microsoft Learn</a></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ についてサンプルをご紹介しました。Logic Apps と関連リソースの整理整頓に役立てば幸いです。引き続き、皆様のお役に立てる情報を発信してまいります。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;こんにちは！  Azure Integration サポート チームの 山田 です。&lt;/p&gt;
&lt;p&gt;今回は、ある特定の条件の Logic Apps ワークフローや API 接続を検索したいときに便利な Azure Resource Graph エクスプローラー と クエリ に関する Tips をご紹介いたします。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jpazinteg.github.io/blog/tags/Tips/"/>
    
    <category term="Azure Integration" scheme="https://jpazinteg.github.io/blog/tags/Azure-Integration/"/>
    
    <category term="Azure Logic Apps" scheme="https://jpazinteg.github.io/blog/tags/Azure-Logic-Apps/"/>
    
  </entry>
  
</feed>
